T SimpleIO (A: Type)
| end(val: A);
| ask(then: String -> SimpleIO(A));
| say(text: String, then: Unit -> SimpleIO(A));

SimpleIO.query(text: String): SimpleIO(String)
  SimpleIO.say<String>(text, () SimpleIO.ask<String>(SimpleIO.end<String>))

SimpleIO.print(text: String): SimpleIO(Unit)
  use skip = SimpleIO.say<Unit>(text)
  SimpleIO.end<Unit>(Unit.new)

SimpleIO.bind<A: Type, B: Type>(a: SimpleIO(A), f: A -> SimpleIO(B)) : SimpleIO(B)
  case a:
  | f(a.val);
  | SimpleIO.ask<B>((x) SimpleIO.bind<A,B>(a.then(x), f));
  | SimpleIO.say<B>(a.text, (x) SimpleIO.bind<A,B>(a.then(x), f));

SimpleIO.monad: Monad(SimpleIO)
  Monad.new<SimpleIO>(SimpleIO.bind, SimpleIO.end)
