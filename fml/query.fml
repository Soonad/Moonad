query: <A: Type> -> (cpy: A -> Pair(A)(A)) -> (bits: Bits) -> (map: Map(A)) -> Pair(Map(A))(Maybe(A))
  <A> (cpy) (bits) (map) bits<(bits.self) Pair(Map(A))(Maybe(A))>(map<(map.self) Pair(Map(A))(Maybe(A))>(let map = Map.new<A>; let val = Maybe.none<A>; Pair.new<Map(A)><Maybe(A)>(map)(val))((map.val) (map.lft) (map.rgt) map.val<(map.val.self) Pair(Map(A))(Maybe(A))>(let map = Map.tie<A>(Maybe.none<A>)(map.lft)(map.rgt); let val = Maybe.none<A>; Pair.new<Map(A)><Maybe(A)>(map)(val))((map.val.value) cpy(map.val.value)<(self) Pair(Map(A))(Maybe(A))>((p.fst) (p.snd) let map = Map.tie<A>(Maybe.some<A>(p.fst))(map.lft)(map.rgt); let val = Maybe.some<A>(p.snd); Pair.new<Map(A)><Maybe(A)>(map)(val)))))((bits.pred) map<(map.self) Pair(Map(A))(Maybe(A))>(let map = Map.new<A>; let val = Maybe.none<A>; Pair.new<Map(A)><Maybe(A)>(map)(val))((map.val) (map.lft) (map.rgt) query<A>(cpy)(bits.pred)(map.lft)<(self) Pair(Map(A))(Maybe(A))>((p.fst) (p.snd) let map = Map.tie<A>(map.val)(p.fst)(map.rgt); let val = p.snd; Pair.new<Map(A)><Maybe(A)>(map)(val))))((bits.pred) map<(map.self) Pair(Map(A))(Maybe(A))>(let map = Map.new<A>; let val = Maybe.none<A>; Pair.new<Map(A)><Maybe(A)>(map)(val))((map.val) (map.lft) (map.rgt) query<A>(cpy)(bits.pred)(map.rgt)<(self) Pair(Map(A))(Maybe(A))>((p.fst) (p.snd) let map = Map.tie<A>(map.val)(map.lft)(p.fst); let val = p.snd; Pair.new<Map(A)><Maybe(A)>(map)(val))))

