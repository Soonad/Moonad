TaelinArena.Game.update_buff_dur: 
  (self: TaelinArena.Game.Thing) -> 
  TaelinArena.Game.Thing
  (self)
  let self.buf = TaelinArena.Game.get_thing_buf(self)
  let fn = ( (buff) (acc)
    buff<() List(TaelinArena.Game.Buff)>
    | #shielded# (buff.dur) (buff.val)
      Bool.if<List(TaelinArena.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      | acc;
      | List.cons<TaelinArena.Game.Buff> 
        | TaelinArena.Game.Buff.shielded(F64.sub(buff.dur)(F64.1))(buff.val);
        | acc;;
    ; 
    | #slowed# (buff.dur) (buff.val)
      Bool.if<List(TaelinArena.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      | acc;
      | List.cons<TaelinArena.Game.Buff> 
        | TaelinArena.Game.Buff.slowed(F64.sub(buff.dur)(F64.1))(buff.val);
        | acc;;
    ; 
    | #hasted# (buff.dur) (buff.val)
      Bool.if<List(TaelinArena.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      | acc;
      | List.cons<TaelinArena.Game.Buff> 
        | TaelinArena.Game.Buff.hasted(F64.sub(buff.dur)(F64.1))(buff.val);
        | acc;;
    ; 
    | #silenced# (buff.dur)
      Bool.if<List(TaelinArena.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      | acc;
      | List.cons<TaelinArena.Game.Buff> 
        | TaelinArena.Game.Buff.silenced(F64.sub(buff.dur)(F64.1));
        | acc;;
    ; 
    | #rooted# (buff.dur)
      Bool.if<List(TaelinArena.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      | acc;
      | List.cons<TaelinArena.Game.Buff> 
        | TaelinArena.Game.Buff.rooted(F64.sub(buff.dur)(F64.1));
        | acc;;
    ; 
    | #stuned# (buff.dur)
      Bool.if<List(TaelinArena.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      | acc;
      | List.cons<TaelinArena.Game.Buff> 
        | TaelinArena.Game.Buff.stuned(F64.sub(buff.dur)(F64.1));
        | acc;;
    ; 
  ) :: TaelinArena.Game.Buff -> List(TaelinArena.Game.Buff) -> List(TaelinArena.Game.Buff)
    let new_buf = 
      List.fold<TaelinArena.Game.Buff><List(TaelinArena.Game.Buff)>
      | List.nil<TaelinArena.Game.Buff>;
      | fn;
      | self.buf;
    TaelinArena.Game.set_thing_buf(self)(new_buf)

// update_buff_dur(self: Thing) : Thing 
//   case self |thing 
//   let fn = (buff: Buff, acc: List(Buff)) => 
//     case buff 
//     | shielded => 
//       if buff.dur === 0 then 
//         acc 
//       else cons(_ shielded(buff.dur - 1, buff.val), acc)
//     | slowed => 
//       if buff.dur === 0 then 
//         acc 
//       else cons(_ slowed(buff.dur - 1, buff.val), acc)
//     | hasted => 
//       if buff.dur === 0 then 
//         acc 
//       else cons(_ hasted(buff.dur - 1, buff.val), acc)
//     | silenced => 
//       if buff.dur === 0 then 
//         acc 
//       else cons(_ silenced(buff.dur - 1), acc)
//     | rooted => 
//       if buff.dur === 0 then 
//         acc 
//       else cons(_ rooted(buff.dur - 1), acc)
//     | stuned => 
//       if buff.dur === 0 then 
//         acc 
//       else cons(_ stuned(buff.dur - 1), acc)

//     let new_buf = fold(Buff; List(Buff); [], fn, self.buf)
//     self <= thing(buf = new_buf)
