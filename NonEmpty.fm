NonEmpty.cons: <A: Type> -> (head: A) -> (tail: NonEmpty(A)) -> NonEmpty(A)
  <A> (head) (tail)
  <P> (end) (cons) cons(head)(tail)

NonEmpty.end: <A: Type> -> (value: A) -> NonEmpty(A)
  <A> (value)
  <P> (end) (cons) end(value)

NonEmpty: (A: Type) -> Type
  (A)
  non_empty<P: (x: NonEmpty(A)) -> Type> ->
  (end:  (value: A) -> P(NonEmpty.end<A>(value))) ->
  (cons: (head: A) -> (tail: NonEmpty(A)) -> P(NonEmpty.cons<A>(head)(tail))) ->
  P(non_empty)

NonEmpty.to_list: <A: Type> -> NonEmpty(A) -> List(A)
  <A> (xs)
  xs<() List(A)>
  | (value) List.cons<A>(value)(List.nil<A>);
  | (head) (tail) List.cons<A>(head)(NonEmpty.to_list<A>(tail));

