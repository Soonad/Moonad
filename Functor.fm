// Functor where
//   map :: (a -> b) -> f a -> f b
// with map satisfying the laws
//   map id == id
//   map (f . g) == map f . map g
T Functor<F: Type -> Type>
| new(
  map
    : <A: Type, B: Type> ->
      (A -> B) -> F(A) -> F(B)
  )<
  id
    : <A: Type> ->
      (fa: F(A)) -> Equal(F(A), map<A, A>(Function.id<A>, fa), Function.id<F(A)>(fa)),
  comp
    : <A: Type, B: Type, C: Type> ->
      (fa: F(A)) -> (g: B -> C) -> (h: A -> B) ->
      Equal(F(C),
            map<A, C>(Function.comp<A, B, C>(g, h), fa),
            Function.comp<F(A), F(B), F(C)>(map<B, C>(g), map<A, B>(h))(fa))
  >;

Functor.map<F: Type -> Type>(f: Functor(F)): <A: Type, B: Type> -> (A -> B) -> F(A) -> F(B)
  case f:
  | f.map;

Functor.const<F: Type -> Type>(f: Functor(F)): <A: Type, B: Type> -> A -> F(B) -> F(A)
  <A, B> (a)
  Functor.map<>(f)<,>(Function.const<,>(a))
