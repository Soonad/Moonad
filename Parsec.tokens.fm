// match a literal string
Parsec.tokens: String -> Parsec(String)
  (str)
  <X> (s1) (empty_value) (empty_error) (eaten_value) (eaten_error)
  s1<() X> | (input) (index) (error) 
  let len = String.length(str)
  String.take_n(len)(input)<() X>
  | let unex = Maybe.some<Parsec.Error.Item>(Parsec.Error.Item.end_of_input)
    let expe = List.single<Parsec.Error.Item>
      | Parsec.Error.Item.label(String.quote(str));
    empty_error(s1)(Parsec.Error.make_trivial(Nat.zero)(unex)(expe));
  | (p) p<() X> | (took) (rest)
    let s2 = Parsec.State.make(rest)(Nat.add(index)(len))(error)
    String.eql(str)(took)<() X>
    | str<() X>
      | empty_value(s2)(str);
      | () () eaten_value(s2)(str);;
    | let expe_label = Parsec.Error.Item.label(String.quote(str))
      let unex = took<() Maybe(Parsec.Error.Item)>
        | Maybe.none<Parsec.Error.Item>;
        | () () Maybe.some<Parsec.Error.Item>(Parsec.Error.Item.tokens(took));
      let expe = List.single<Parsec.Error.Item>(expe_label)
      empty_error(s1)(Parsec.Error.make_trivial(index)(unex)(expe));;;;

