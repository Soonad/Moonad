Lang.pst: (Core.Ctx -> Core) -> Parser(Core.Ctx -> Core)
  def C = Core.Ctx -> Core
  (base)
  Parser.bind<Maybe(C)><C>
  | Parser.optional<C> |
    Parser.choice<C> |
    List.cons<Parser(C)>(Lang.app(base)) |
    List.cons<Parser(C)>(Lang.pip(base)) |
    List.cons<Parser(C)>(Lang.arr(base)) |
    List.cons<Parser(C)>(Lang.ann(base)) |
    List.nil<Parser(C)>;;;;;;;
  | (maybe_term) maybe_term<() Parser(C)>
    | Parser.pure<C>(base);
    | (post) Lang.pst(post);;
