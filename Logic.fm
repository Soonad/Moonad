
// Definitions and Synonyms
// ========================

// logical conjunction
And(A:Type,B:Type): Type
  Pair(A,B)

And.new<A: Type,B: Type>(x: A,y:B) : And(A,B)
  Pair.new<A,B>(x,y)

// simplification
And.fst<A: Type,B: Type>(x: And(A,B)) : A
  Pair.fst<A,B>(x)

And.snd<A: Type,B: Type>(x: And(A,B)) : B
  Pair.snd<A,B>(x)

// logical disjunction
Or(A:Type,B:Type): Type
  Either(A,B)

Or.lft<A: Type,B: Type>(x: A): Or(A,B)
  Either.left<_,_>(x)

Or.rgt<A: Type,B: Type>(x: B): Or(A,B)
  Either.right<_,_>(x)

// logical negation
Not(P : Type) : Type
  P -> Empty

Logic.exfalso(x: Empty,P: Type): P
  Empty.absurd<>(x)

// Theorems
// ========

// (P -> Q) ∧ P |- Q
Logic.modus_ponens<P: Type, Q: Type>(implies: P -> Q, p: P) : Q
  implies(p)

// (P -> Q) ∧ ¬Q |- ¬P
Logic.modus_tollens<P: Type, Q: Type>(implies: P -> Q, not_q: Not(Q)) : Not(P)
  (x) not_q(implies(x))

// (P -> Q) -> (¬Q -> ¬P)
Logic.contrapositive<P:Type, Q: Type>(f: P -> Q) : Not(Q) -> Not(P)
  (x) (p) x(f(p))

Logic.hypothetical_syllogism<P: Type, Q: Type, R: Type>(
  f: P -> Q,
  g: Q -> R,
  x: P
) : R
  g(f(x))

// Modus tollendo ponens: ((P ∨ Q) ∧ ¬P) |- Q
Logic.disjunctive_syllogism<P: Type, Q: Type>(c: Or(P,Q), not_p: Not(P)) : Q
 c<() Q>
 | (x) Empty.absurd<>(not_p(x));
 | (x) x;

// (P -> Q) ∧ (R -> S) ∧ (P ∨ R) |- (Q ∨ S)
Logic.constructive_dilemma<P: Type, Q: Type, R: Type, S: Type>(
  f: P -> Q,
  g: R -> S,
  c: Or(P,R)
) : Or(Q,S)
  c<() _>
  | (x) Or.lft<_,_>(f(x));
  | (x) Or.rgt<_,_>(g(x));

// (P -> Q) ∧ (R -> S) ∧ (¬Q ∨ ¬S) |- (¬P ∨ ¬R)
Logic.destructive_dilemma<P: Type, Q: Type, R: Type, S: Type>(
  f: P -> Q,
  g: R -> S,
  c: Or(Not(Q),Not(S))
) : Or(Not(P),Not(R))
  c<() _>
  | (x) Or.lft<_,_>((p) x(f(p)));
  | (x) Or.rgt<_,_>((r) x(g(r)));

// (P -> Q) ∧ (R -> S) ∧ (P ∨ ¬S) |- (Q ∨ ¬R)
Logic.bidirectional_dilemma<P: Type, Q: Type, R: Type, S: Type>(
  f: P -> Q,
  g: R -> S,
  c: Or(P,Not(S))
) : Or(Q,Not(R))
  c<() _>
  | (x) Or.lft<_,_>(f(x));
  | (x) Or.rgt<_,_>((r) x(g(r)));

Logic.composition<P: Type,Q: Type,R: Type>(f: P -> Q, g: P -> R, p: P): And(Q,R)
  And.new<_,_>(f(p),g(p))

Logic.transposition<P: Type, Q: Type>(f: P -> Q, not_q: Not(Q)): Not(P)
  (p) not_q(f(p))

Logic.double_negation<P: Type>(p:P): Not(Not(P))
  (notP) notP(p)

// ¬(P ∧ ¬P)
Logic.noncontradiction<P: Type>: Not(And(P,Not(P)))
  (contra) contra<() _>
  | (p) (not_p) not_p(p);

// DeMorgan
// ========

// ¬(P ∨ Q) -> ¬P ∧ ¬Q
Logic.Or.forward<A: Type, B: Type>(x: Not(Or(A,B))): And(Not(A),Not(B))
  And.new<_, _>((a) x(Or.lft<_, _>(a)), (b) x(Or.rgt<_, _>(b)))

// ¬P ∧ ¬Q -> ¬(P ∨ Q)
Logic.Or.reverse<A: Type, B: Type>(x: And(Not(A), Not(B))): Not(Or(A, B))
  (or) or<() _>
  | (a) x<() _>((not_a, not_b) not_a(a));
  | (b) x<() _>((not_a, not_b) not_b(b));

// ¬P ∨ ¬Q -> ¬(P ∧ Q)
Logic.And.reverse<A: Type, B: Type>(or_not: Or(Not(A), Not(B))): Not(And(A,B))
  (and) and<() _> | (a, b)
     or_not<() _>
    | (not_a) not_a(a);
    | (not_b) not_b(b);;

// Classical Logic (non-constructive)
// ==================================

Logic.ExcludedMiddle: Type
  <P: Type> -> Or(P,Not(P))

Logic.negation_elimination<P: Type>(
  lem: Logic.ExcludedMiddle,
  not_not_p: Not(Not(P))
): P
  lem<P><() _>
  | (x) x;
  | (x) Logic.exfalso(not_not_p(x),P);

// !(P ∧ Q) => !P ∨ !Q
Logic.And.forward<P: Type, Q: Type>(
  lem : Logic.ExcludedMiddle,
  not_pq: Not(And(P, Q))
) : Or(Not(P), Not(Q))
  lem<P><() _>
  | (p) lem<Q><() _>
    | (q) Logic.exfalso(not_pq(And.new<_,_>(p,q)), _);
    | (q) Or.rgt<_,_>(q);;
  | (p) Or.lft<_,_>(p);

