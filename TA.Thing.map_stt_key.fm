TA.Thing.map_stt_key
  : TA.Thing     ->
    Bits         ->
    (F64 -> F64) -> 
    TA.Thing
  (self) (stt_key) (func)
  let stt = TA.Thing.get_stt(self)
  Map.get<F64>(stt_key)(stt)<() TA.Thing>
  | TA.Thing.set_stt
    |self;
    |Map.set<F64>(stt_key)(F64.0)(stt);;
  | (result.value)
    TA.Thing.set_stt
    |self;
    |Map.set<F64>(stt_key)(func(result.value))(stt);; 

// map_stt_key(self: Thing, stt_key: Bits, func: Number -> Number) : Thing
//   self <= thing(stt = 
//     case lookup(_ stt_key, stt) as result
//     | none => insert(_ stt_key, 0, stt)
//     | some => insert(_ stt_key, func(result.value), stt))
