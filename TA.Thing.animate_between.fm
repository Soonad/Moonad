// Performs an animation, reseting to idle when it ends
// - self: thing to be animated
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model: id of the first model of the animation
// - count: total count of models on the animation
// - from: frame to start animating
// - til: last frame to animate

TA.Thing.animate_between
  : (self: TA.Thing) -> 
    (boost: F64)          -> 
    (model: F64)          -> 
    (count: F64)          -> 
    (from: F64)           -> 
    (til: F64)            -> 
    TA.Thing
  (self) (boost) (model) (count) (from) (til)
  let self.tik = TA.Thing.get_tik(self)
  let self.pad = TA.Thing.get_pad(self)
  let self.act = TA.Thing.get_act(self)
  let self.dir = TA.Thing.get_dir(self)
  Bool.if<TA.Thing>(F64.is_between(from)(til)(self.tik))
  | let set_bst = TA.Thing.set_bst(self)(boost)
    let set_dir = 
      TA.Thing.set_dir(self)
      | let pad_len = F64.V3.len(self.pad)
        Bool.if<F64.V3>(Bool.and(F64.ltn(F64.0)(self.act))(F64.eql(pad_len)(F64.0)))
        | TA.Thing.targ_dir(self);
        | Bool.if<F64.V3>(F64.ltn(F64.0)(pad_len))
          | F64.V3.norm(self.pad);
          | self.dir;;
      ;
    let set_mid = TA.Thing.set_mid(self)
    | let duration = F64.sub(til)(from)
      let curr_tik = F64.sub(self.tik)(from)
      let curr_tim = F64.div(curr_tik)(duration)
      F64.add(model)(F64.mod(F64.floor(F64.mul(curr_tim)(count)))(count))
    ;
    self;
  | self;
  
// animate_between(
//   self  : Thing,
//   boost : Number,
//   model : Number,
//   count : Number,
//   from  : Number,
//   til   : Number
//   ) : Thing
//   case self |thing
//   if is_between(from, til, self.tik) then
//     self <= thing(
//       bst = boost,
//       dir =
//         let pad_len = len_v3(pad)
//         if (act > 0) && (pad_len === 0) then
//           targ_dir(self)
//         else if pad_len > 0 then
//           norm_v3(pad)
//         else
//           dir,
//       mid =
//         let duration = til - from
//         let curr_tik = tik - from
//         let curr_tim = curr_tik \ duration
//         model + (floor(curr_tim * count) % count))
//   else
//     self