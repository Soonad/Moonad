// Take a number of characters, error with a custom label if we hit end of input

Parsec.take: <A: Type> -> String -> Nat -> Parsec(String)
  <A> (err) (n)
  <X> (s1) (empty_value) (empty_error) (eaten_value) ()
  s1<() X> | (input) (index) (error)
  String.take_n(n)(input)<() X>
  | empty_error(s1) | Parsec.Error.make_trivial
    | index;
    | Maybe.some<Parsec.Error.Item>(Parsec.Error.Item.end_of_input);
    | List.single<Parsec.Error.Item>(Parsec.Error.Item.label(err));;;
  | (p) p<() X> | (took) (rest)
    let s2  = Parsec.State.make(rest)(Nat.add(index)(n))(error)
    eaten_value(s2)(took);;;


