// Squared distance between a point and a segment
F64.V3.point_segment_sqrdist: F64.V3 -> F64.Segment -> F64
  (p) (s)
  p<() F64> | (p.x) (p.y) (p.z)
  s<() F64> | (a) (b)
  a<() F64> | (a.x) (a.y) (a.z)
  b<() F64> | (b.x) (b.y) (b.z)
  let ab_x_diff_sqrd = F64.pow(F64.sub(a.x)(b.x))(F64.2) 
  let ab_y_diff_sqrd = F64.pow(F64.sub(a.y)(b.y))(F64.2)
  let pa_x_diff = F64.sub(p.x)(a.x)
  let pa_y_diff = F64.sub(p.y)(a.y)
  let ba_x_diff = F64.sub(b.x)(a.x)
  let ba_y_diff = F64.sub(b.y)(a.y)
  let l = F64.add(ab_x_diff_sqrd)(ab_y_diff_sqrd)
  let t = F64.add(F64.mul(pa_x_diff)(ba_x_diff))(F64.mul(pa_y_diff)(ba_y_diff))
  let t = F64.div(t)(l)
  let t = F64.max(F64.0)(F64.min(F64.1)(t))
  let d = F64.0
  let t_times_ba_x_diff = F64.mul(t)(ba_x_diff)
  let t_times_ba_y_diff = F64.mul(t)(ba_y_diff)
  let k = F64.pow(F64.sub(p.x)(F64.add(a.x)(t_times_ba_x_diff)))(F64.2)
  let d = F64.add(d)(k)
  let k = F64.pow(F64.sub(p.y)(F64.add(a.y)(t_times_ba_y_diff)))(F64.2)
  let d = F64.add(d)(k)
  d;;;;

// point_segment_sqrdist(p: V3, s: Segment) : Number
//   case s |segment
//   case s.a as a |v3
//   case s.b as b |v3
//   case p |v3
//   let l = 0
//   let l = l + ((a.x - b.x) ** 2)
//   let l = l + ((a.y - b.y) ** 2)
//   let t = 0
//   let t = t + ((p.x - a.x) * (b.x - a.x))
//   let t = t + ((p.y - a.y) * (b.y - a.y))
//   let t = t \ l
//   let t = max(0, min(1, t))
//   let d = 0
//   let k = (p.x - (a.x + (t * (b.x - a.x)))) ** 2
//   let d = d + k
//   let k = (p.y - (a.y + (t * (b.y - a.y)))) ** 2
//   let d = d + k
//   d
