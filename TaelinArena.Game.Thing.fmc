TaelinArena.Game.Thing : Type 
  thing<P: TaelinArena.Game.Thing -> Type> ->
  (new: 
    (fun: TaelinArena.Game.TxFunction) ->
    (pid: TaelinArena.Game.PlayerId) -> 
    (mid: TaelinArena.Game.ModelId) ->
    (act: TaelinArena.Game.ActionId) ->
    (sid: TaelinArena.Game.SideId) ->
    (stt: Map(F64)) -> 
    (nam: String) ->
    (lit: List(TaelinArena.Game.Light)) ->
    (tik: F64) ->
    (pos: F64.V3) ->
    (mov: F64) -> 
    (bst: F64) ->
    (pad: F64.V3) ->
    (dir: F64.V3) ->
    (trg: F64.V3) ->
    (vel: F64.V3) ->
    (box: TaelinArena.Game.Hitbox) ->
    (wei: F64) ->
    (mhp: F64) ->
    (dmg: F64) ->
    (knk: F64.V3) ->
    (buf: List(TaelinArena.Game.Buff)) ->
    (chi: List(TaelinArena.Game.Thing)) -> 
    (hit: List(TaelinArena.Game.Hit)) ->
    (rst: Bool) -> 
    (die: Bool) -> 
    P(TaelinArena.Game.Thing.new
    | fun; 
    | pid;
    | mid;
    | act;
    | sid;
    | stt;
    | nam;
    | lit;
    | tik;
    | pos;
    | mov;
    | bst;
    | pad;
    | dir;
    | trg;
    | vel;
    | box;
    | wei;
    | mhp;
    | dmg;
    | knk;
    | buf;
    | chi;
    | hit;
    | rst;
    | die;) ) ->
    P(thing)

// T Thing
// | thing(
//   fun : TxFunction,  // transaction function
//   pid : PlayerId,    // number of player controlling this
//   mid : ModelId,     // id of model to be rendered
//   act : ActionId,    // number of performing action
//   sid : SideId,      // player side
//   stt : Map(Number), // an arbitrary state
//   nam : String,      // name of thing
//   lit : List(Light), // list of lights to render
//   tik : Number,      // ticks passed since last act change
//   pos : V3,          // in-game position
//   mov : Number,      // movement speed
//   bst : Number,      // movement speed multiplier
//   pad : V3,          // analog pad direction (len = 0 to 1)
//   dir : V3,          // facing direction (len = 1)
//   trg : V3,          // targeted position
//   vel : V3,          // dash velocity vector
//   box : Hitbox,      // hitbox (space occupied)
//   wei : Number,      // weight (affects friction)
//   mhp : Number,      // max health points
//   dmg : Number,      // damage taken
//   knk : V3,          // launch direction and intensity
//   buf : List(Buff),  // buffs and nerfs (status effects) applied
//   chi : List(Thing), // child thing to create on next tick
//   hit : List(Hit),   // hits done by this
//   rst : Bool,        // should this reset to idle
//   die : Bool)        // should this be removed?