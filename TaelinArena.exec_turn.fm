// Game's main loop
TaelinArena.exec_turn: TaelinArena.Game.Game -> TaelinArena.Game.Game
  (gm)
  // Interaction function
  let intr = ((that) (this) TaelinArena.interact_with(this)(that)) 
  :: TaelinArena.Game.Thing -> TaelinArena.Game.Thing -> TaelinArena.Game.Thing 
  
  // For each thing in the game...
  let tick = ((this) (others) (res)
    
    // Removes past hits
    let this = TaelinArena.Game.set_thing_hit
    |this;
    |List.nil<TaelinArena.Game.Hit>;

    // Resets   
    let rst = TaelinArena.Game.get_thing_rst(this)
    let this = 
      rst<() TaelinArena.Game.Thing>
      | #true#
        let new_vel = F64.V3.new(F64.0)(F64.0)(F64.0)
        let new_bst = F64.1
        let new_box = TaelinArena.Game.Hitbox.cbox(F64.mul(F64.parse("3"))(F64.parse("4")))
        let new_act = F64.0
        let new_tik = F64.0
        let new_lit = List.nil<TaelinArena.Game.Light>
        let new_rst = Bool.false 
        let this = TaelinArena.Game.set_thing_vel(this)(new_vel)
        let this = TaelinArena.Game.set_thing_bst(this)(new_bst)
        let this = TaelinArena.Game.set_thing_box(this)(new_box)
        let this = TaelinArena.Game.set_thing_act(this)(new_act)
        let this = TaelinArena.Game.set_thing_tik(this)(new_tik)
        let this = TaelinArena.Game.set_thing_lit(this)(new_lit)
        let this = TaelinArena.Game.set_thing_rst(this)(new_rst)
        this;
      | #false# this;  

    // Integrates position with walk vector
    let boost = TaelinArena.Game.speed_multiplier_of(this)
    let pos   = TaelinArena.Game.get_thing_pos(this)
    let mov   = TaelinArena.Game.get_thing_mov(this)
    let pad   = TaelinArena.Game.get_thing_pad(this)
    let this  = 
      TaelinArena.Game.set_thing_pos 
      |this;
      |F64.V3.add(pos)(F64.V3.scale(F64.mul(mov)(boost))(pad));

    // Decreases duration of all buffs, removes from list if dur=0
    let this = TaelinArena.Game.update_buff_dur(this)

    // Integrates position with knockback
    let pos = TaelinArena.Game.get_thing_pos(this)
    let knk = TaelinArena.Game.get_thing_knk(this)
    let wei = TaelinArena.Game.get_thing_wei(this)
    let new_pos = F64.V3.add(pos)(knk)
    let knk_len = F64.V3.len(knk)
    let new_knk = 
      F64.gtn(knk_len)(F64.0)<() F64.V3>
      | #true# 
        let force = F64.max(F64.sub(knk_len)(wei))(F64.0)
        F64.V3.scale(force)(F64.V3.norm(knk));
      | #false# knk;
    let this = TaelinArena.Game.set_thing_pos(this)(new_pos)
    let this = TaelinArena.Game.set_thing_knk(this)(new_knk)

    // Calls the transaction function
    let fun = TaelinArena.Game.get_thing_fun(this)
    let this = fun(this)

    // Calls the interaction function with all other things
    let this = 
      List.fold<TaelinArena.Game.Thing><TaelinArena.Game.Thing>
      |this;
      |intr;
      |others;

    // Increments tik counter
    let tik  = TaelinArena.Game.get_thing_tik(this)
    let this = TaelinArena.Game.set_thing_tik(this)(F64.add(tik)(F64.1))

    // Spawns children
    let this_chi = TaelinArena.Game.get_thing_chi(this)
    let chi_init = ((chi) 
      TaelinArena.Game.get_thing_fun(chi)(chi)
    ) :: TaelinArena.Game.Thing -> TaelinArena.Game.Thing
    let chi_list = 
      List.map<TaelinArena.Game.Thing><TaelinArena.Game.Thing>
      |chi_init;
      |this_chi;
    let this = 
      TaelinArena.Game.set_thing_chi(this)(List.nil<TaelinArena.Game.Thing>)

    // Keeps inside map
    let this_pos = TaelinArena.Game.get_thing_pos(this)
    let pos_x = F64.V3.get_z(this_pos)
    let pos_y = F64.V3.get_y(this_pos)
    let pos_z = F64.V3.get_z(this_pos)
    let new_x = F64.min(F64.max(F64.parse("-256"))(pos_x))(F64.parse("256"))
    let new_y = F64.min(F64.max(F64.parse("-160"))(pos_y))(F64.parse("160"))
    let new_z = F64.min(F64.max(F64.0)(pos_z))(F64.parse("256"))
    let this  = TaelinArena.Game.set_thing_pos
    |this;
    |F64.V3.new(new_x)(new_y)(new_z);

    // Bounds HP
    let dmg = TaelinArena.Game.get_thing_dmg(this)
    let mhp = TaelinArena.Game.get_thing_mhp(this)
    let new_dmg = F64.max(F64.0)(F64.min(mhp)(dmg))
    let this = TaelinArena.Game.set_thing_dmg(this)(new_dmg)

    // Dies when 0 is 0
    let sid = TaelinArena.Game.get_thing_sid(this)
    let dmg = TaelinArena.Game.get_thing_dmg(this)
    let mhp = TaelinArena.Game.get_thing_mhp(this)
    let no_hp = Bool.false
      // Bool.and(F64.gtn(sid)(F64.0))(F64.gte(dmg)(mhp))

    let die = TaelinArena.Game.get_thing_die(this)
    let xs = 
      Bool.or(die)(no_hp)<() List(TaelinArena.Game.Thing)>
      | res;
      | List.cons<TaelinArena.Game.Thing>(this)(res);

    List.concat<TaelinArena.Game.Thing>(chi_list)(xs)

  ) :: TaelinArena.Game.Thing -> 
       List(TaelinArena.Game.Thing) ->
       List(TaelinArena.Game.Thing) ->
       List(TaelinArena.Game.Thing)

  let things_id = 
    ((x) x) :: List(TaelinArena.Game.Thing) -> List(TaelinArena.Game.Thing)
  let stage = gm<() List(TaelinArena.Game.Thing)> | (stage) stage;
  let stage_nil = List.nil<TaelinArena.Game.Thing>
  let new_stage = 
    TaelinArena.fold_with_context<TaelinArena.Game.Thing><List(TaelinArena.Game.Thing)>
    |stage_nil;
    |tick;
    |stage;
    |things_id;

  TaelinArena.Game.Game.new(new_stage)


  

// Game's main loop
// exec_turn(gm: Game) : Game
//   // Interaction function
//   let intr = (that,this) => interact_with(this,that)

//   // For each thing in the game...
//   let tick = (this: Thing, others: List(Thing), res: List(Thing)) =>
//     case this |thing

//     // Removes past hits
//     let this = this <= thing(hit = [])

//     // Resets
//     let this =
//       case this.rst
//       | true  => this <= thing(
//         vel = v3(0,0,0),
//         bst = 1,
//         box = cbox(12),
//         act = 0,
//         tik = 0,
//         lit = nil(_),
//         rst = false)
//       | false => this

//     // Integrates position with dash velocity
//     let this = this <= thing(pos = add_v3(pos,vel))

//     // Integrates position with walk vector
//     let boost = speed_multiplier_of(this)
//     let this = this <= thing(pos = add_v3(pos,scale_v3(mov*boost,pad)))

//     // Decreases duration of all buffs, removes from list if dur=0
//     let this = update_buff_dur(this) 

//     // Integrates position with knockback
//     let this = this <= thing(
//       pos = add_v3(pos, knk),
//       knk = if len_v3(knk) > 0
//         then
//           let force = max(len_v3(knk) - this.wei, 0)
//           scale_v3(force, norm_v3(knk))
//         else knk)

//     // Calls the transaction function
//     let this = this.fun(this)

//     // Calls interaction function with all other things
//     let this = fold(Thing; _ this, intr, others)

//     // Increments tik counter
//     let this = this <= thing(tik = tik + 1)

//     // Spawns children
//     case this |thing
//     let chi_init = (chi) => case chi |thing chi.fun(chi)
//     let chi_list = map(Thing; Thing; chi_init, this.chi)
//     let this = this <= thing(chi = [])

//     // Keeps inside map
//     let this = this <= thing(pos =
//       case pos |v3
//       let x = min(max(-256, pos.x), 256)
//       let y = min(max(-160, pos.y), 160)
//       let z = min(max(   0, pos.z), 256)
//       v3(x, y, z))

//     // Bounds HP
//     let this = this <= thing(dmg = max(0, min(mhp, dmg)))

//     // Dies when 0 is 0
//     let no_hp =
//       false
//       //if (this.sid > 0) && gte(this.dmg, this.mhp)
//       //then true
//       //else false
    
//     // Adds updated thing and new things to stage
//     concat(_ chi_list,
//       case or(this.die, no_hp) as dead
//       |true res
//       |false cons(_ this, res))

//   // Ticks every thing on stage
//   gm <= game(
//     stage = fold_with_context(Thing; _ [], tick, stage, (x)=>x))