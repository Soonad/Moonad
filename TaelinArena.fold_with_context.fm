TaelinArena.fold_with_context
  : <A : Type>                  -> 
    <B : Type>                  ->
    (i : B)                     ->
    (f: A -> List(A) -> B -> B) ->
    (xs : List(A))              -> 
    (ys : List(A) -> List(A))   ->
    B 
  <A> <B> (i) (f) (xs) (ys)
  xs<() B>
  | i;
  | (xs.head) (xs.tail)
    let ys2 = ((x) ys(List.cons<A>(xs.head)(xs))) :: List(A) -> List(A)
    let rest = TaelinArena.fold_with_context<A><B>(i)(f)(xs.tail)(ys2)
    f(xs.head)(ys(xs.tail))(rest);


// Like a fold, but with access to a list of other elements
// fold_with_context(A; B;
//   i: B,
//   f: A -> List(A) -> B -> B,
//   xs: List(A),
//   ys: List(A) -> List(A)
//   ) : B
//   case xs
//   | nil  => i
//   | cons =>
//     let self = xs.head
//     let tail = xs.tail
//     let ys2  = (x) => ys(cons(_ xs.head, x))
//     let rest = fold_with_context(A; B; i, f, xs.tail, ys2)
//     f(xs.head, ys(xs.tail), rest)
