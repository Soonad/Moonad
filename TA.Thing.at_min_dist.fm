// Return the position within a mininum range towards targ_dir
// at_min_dist(self: Thing, min_range: Number)
//   case self |thing
//   let dist_min = dist_v3(self.pos, at_dist(self, min_range))
//   let dist_trg = dist_v3(self.pos, self.trg)
//   if dist_trg > dist_min
//     then at_dist(self, dist_trg)
//     else at_dist(self, min_range)

TA.Thing.at_min_dist: TA.Thing -> F64 -> F64.V3
  (self) (min_range)
  let self_pos  = TA.Thing.get_pos(self)
  let self_trg  = TA.Thing.get_trg(self)
  let dist_min  = F64.V3.dist(self_pos)(TA.Thing.at_dist(self)(min_range))
  let dist_trg  = F64.V3.dist(self_pos)(self_trg)
  let less_than = F64.ltn(dist_min)(dist_trg)
  F64.if<F64.V3>(F64.from_bool(less_than))
  | TA.Thing.at_dist(self)(dist_trg);
  | TA.Thing.at_dist(self)(min_range);
