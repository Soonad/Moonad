Map.lookup: <A: Type> -> Bits -> A -> Map(A) -> Pair(A)(Map(A))
  <A> (bits) (val) (map)
  bits<() Pair(A)(Map(A))>
  | map<() Pair(A)(Map(A))>
    | let map = Map.tie<A>(Maybe.some<A>(val))(Map.new<A>)(Map.new<A>)
      Pair.new<A><Map(A)>(val)(map);
    | (map.val) (map.lft) (map.rgt)
      let value = Maybe.extract<A>(map.val)(val)
      let map = Map.tie<A>(Maybe.some<A>(value))(map.lft)(map.rgt)
      Pair.new<A><Map(A)>(value)(map);;
  | (bits.pred)
    map<() Pair(A)(Map(A))>
    | let p = Map.lookup<A>(bits.pred)(val)(Map.new<A>)
      p<() Pair(A)(Map(A))>
      | (p.a) (p.b) 
        Pair.new<A><Map(A)>(p.a)(Map.tie<A>(Maybe.none<A>)(p.b)(Map.new<A>));;
    | (map.val) (map.lft) (map.rgt)
      let p = Map.lookup<A>(bits.pred)(val)(map.lft)
      p<() Pair(A)(Map(A))>
      | (p.a) (p.b) 
        Pair.new<A><Map(A)>(p.a)(Map.tie<A>(map.val)(p.b)(map.rgt));;;
  | (bits.pred)
    map<() Pair(A)(Map(A))>
    | let p = Map.lookup<A>(bits.pred)(val)(Map.new<A>)
      p<() Pair(A)(Map(A))>
      | (p.a) (p.b) 
        Pair.new<A><Map(A)>(p.a)(Map.tie<A>(Maybe.none<A>)(Map.new<A>)(p.b));;
    | (map.val) (map.lft) (map.rgt)
      let p = Map.lookup<A>(bits.pred)(val)(map.rgt)
      p<() Pair(A)(Map(A))>
      | (p.a) (p.b) 
        Pair.new<A><Map(A)>(p.a)(Map.tie<A>(map.val)(map.lft)(p.b));;;
