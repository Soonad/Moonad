Vector.len_0_is_nil<A: Type>(vec: Vector(A, Nat.zero))
  : Equal()(vec)(Vector.nil<A>)
  case vec
  : (len, vec)
    (e: Equal()(len)(Nat.zero)) ->
    def P0 = ((x) Vector(A)(x)) :: _
    def P1 = ((x) Vector(A)(Nat.zero)) :: _
    let x0 = Equal.rewrite<><><><P0>(e, vec)
    let x1 = Equal.rewrite<><><><P1>(e, Vector.nil<A>)
    Equal()(x0)(x1);
  | (e)
    def P0 = ((x) Vector(A)(Nat.zero)) :: _
    def x0 = Equal.rewrite<><><><P0>(e, Vector.nil<A>)
    Equal.to<Vector(A, Nat.zero)><x0>;
  | <len> (x, xs, e)
    Empty.absurd(Nat.succ_isnt_zero(len, e), _);
  | Equal.to<><>;

