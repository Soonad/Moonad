Vector.len_0_is_nil(vec: Vector(Nat, Nat.zero)) : Equal()(vec)(Vector.nil<Nat>)
  case vec
  : (len, vec) (e: Equal(Nat)(len)(Nat.zero)) ->
    def P0 = (x) Vector(Nat)(x)
    def P1 = (x) Vector(Nat)(Nat.zero)
    let x0 = Equal.rewrite<><><><P0>(e, vec)
    let x1 = Equal.rewrite<><><><P1>(e, Vector.nil<Nat>)
    Equal()(x0)(x1)
  |#nil# (e)
    def P = (x) Vector(Nat)(Nat.zero)
    let x = Equal.rewrite<><><><P>(e, Vector.nil<Nat>)
    Equal.to<Vector(Nat, Nat.zero)><x>;
  |#ext# <len> (x, xs, e)
    Empty.absurd(Nat.succ_isnt_zero(len, e), _);
  | Equal.to<><>;
