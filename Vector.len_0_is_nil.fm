Vector.len_0_is_nil(vec: Vector(Nat, Nat.zero)) : Equal()(vec)(Vector.nil<Nat>)
  case vec
  : (len, vec)
    (e: Equal(Nat)(len)(Nat.zero)) ->
    let lft = Equal.rewrite<Nat><len><Nat.zero><(x) Vector(Nat)(x)>(e, vec)
    let rgt = Equal.rewrite<Nat><len><Nat.zero><(x) Vector(Nat)(Nat.zero)>(e, Vector.nil<Nat>)
    let Ret = Equal()(lft)(rgt)
    Ret;
  | (e)
    def vec = Equal.rewrite<Nat><Nat.zero><Nat.zero><(x) Vector(Nat)(Nat.zero)>(e, Vector.nil<Nat>)
    Equal.to<Vector(Nat, Nat.zero)><vec>;
  | <len> (x, xs, e)
    Empty.absurd(Nat.succ_isnt_zero(len, e), _);
  | Equal.to<Nat><Nat.zero>;
