// A monomorphic specialization of List(Char) for performance/compilation
T String
| nil;
| cons(head: Char, tail: String);

// Basic Functions
// ===============

String.to_list(str: String): List(Char)
  case str:
  | List.nil<>;
  | List.cons<>(str.head)(String.to_list(str.tail));

String.from_list(xs: List(Char)) : String
  case xs:
  | String.nil;
  | String.cons(xs.head,String.from_list(xs.tail));

String.eql(a: String, b: String): Bool
  case a:
  | case b: | Bool.true; | Bool.false;;
  | case b:
    | Bool.false;
    | Bool.and(U16.eql(a.head,b.head),String.eql(a.tail,b.tail));;

String.to_bits(str: String): Bits
  case str:
  | Bits.nil;
  | Bits.concat(U16.to_bits(str.head))(String.to_bits(str.tail));

//String.to_set(str: String): Set
//  case str:
//  | Set.new;
//  | Set.set
//    | U16.to_bits(str.head);
//    | String.to_set(str.tail);;

// A proposition that a string is not the empty string
String.not_empty(xs: String) : Type
  case xs:
  | Empty;
  | Unit;

// A theorem that String.cons isn't String.nil
String.cons_isnt_nil(x:Char, xs: String)
  : Not(Equal(String,String.cons(x,xs), String.nil))
  def P = String.not_empty
  (e) Equal.rewrite<String, String.cons(x,xs), String.nil,P>(e, Unit.new)

// A theorem that a string made with String.cons is not the empty string
String.cons_isnt_empty(x: Char, xs: String): String.not_empty(String.cons(x,xs))
  def y = String.cons(x,xs)
  case y:
  with e : Equal(String,y,y.self) = Equal.to<String,y>;
  | Empty.absurd<>(String.cons_isnt_nil(x,xs,e));
  | Unit.new;

// Concatenates two strings.
String.concat(as: String, bs: String): String
  case as:
  | bs;
  | String.cons(as.head, String.concat(as.tail,bs));

// Get the head of a nonempty string
String.head(xs: String, not_empty: String.not_empty(xs)) : Char
  case xs:
  with ne : String.not_empty(xs.self) = not_empty;
  | Empty.absurd<>(ne);
  | xs.head;

// Get the tail of a nonempty string
String.tail(xs: String, not_empty: String.not_empty(xs)) : String
  case xs:
  with ne : String.not_empty(xs.self) = not_empty;
  | Empty.absurd<>(ne);
  | xs.tail;

// Get the all characters of a nonempty string except the last one
String.init(xs: String, not_empty: String.not_empty(xs)) : String
  case xs:
  with ne : String.not_empty(xs.self) = not_empty;
  | Empty.absurd<>(ne);
  | case xs.tail:
    with e : Equal(_, xs.tail.self,xs.tail) = Equal.to<String,xs.tail>;
    | String.nil;
    | def cne = String.cons_isnt_empty(xs.tail.head,xs.tail.tail)
      def xne = Equal.rewrite<_,_,_,(x) String.not_empty(x)>(e,cne)
      String.cons(xs.head,String.init(xs.tail,xne));;

// Get the last character of a nonempty string
String.last(xs: String, not_empty: String.not_empty(xs)) : Char
  case xs:
  with ne : String.not_empty(xs.self) = not_empty;
  | Empty.absurd<>(ne);
  | case xs.tail:
    with e : Equal(_, xs.tail.self,xs.tail) = Equal.to<String,xs.tail>;
    | xs.head;
    | def cne = String.cons_isnt_empty(xs.tail.head,xs.tail.tail)
      def xne = Equal.rewrite<_,_,_,(x) String.not_empty(x)>(e,cne)
      String.last(xs.tail,xne);;

String.null(xs: String) : Bool
  case xs:
  | Bool.true;
  | Bool.false;

// Computes the length of the string.
String.length(xs: String): Nat
  String.length.go(xs,0)

String.length.go(xs: String, n: Nat): Nat
  case xs:
  | n;
  | String.length.go(xs.tail,Nat.succ(n));

// Appends character to the end of the string.
String.append(as: String, a: Char): String
  case as:
  | String.pure(a);
  | String.cons(as.head,String.append(as.tail, a));

// String transformations
// ====================

// Applies a function to all characters of the string.
String.map(f: Char -> Char, as: String): String
  case as:
  | String.nil;
  | String.cons(f(as.head),String.map(f,as.tail));

// Map over a string with the index
String.imap(f: Nat -> Char -> Char, xs: String): String
  case xs:
  | String.nil;
  | String.cons(f(0,xs.head),String.imap((n) f(Nat.succ(n)),xs.tail));

// Reverse the order of the characters of the string
String.reverse(xs: String) : String
  String.reverse.go(xs,String.nil)

String.reverse.go(xs: String, res: String): String
  case xs:
  | res;
  | String.reverse.go(xs.tail,String.cons(xs.head,res));

// insert separators between characters, i.e. `[A,B,C] ~> [A,sep,B,sep,C]`
String.intersperse(sep: Char, xs: String): String
  case xs:
  | String.nil;
  | case xs.tail:
    | String.pure(xs.head);
    | String.cons(xs.head,String.cons(sep,String.intersperse(sep,xs.tail)));;

// insert separators between characters, i.e. `[A,B,C] ~> [A,sep,B,sep,C]`
String.intercalate(sep: String, xs: List(String)): String
  String.flatten(List.intersperse<>(sep,xs))

// Reducing Strings
// ==============

// Folds over a string, right associative
String.fold(xs: String) : <P: Type> -> P -> (Char -> P -> P) -> P
  <P> (nil, cons)
  case xs:
  | nil;
  | cons(xs.head, String.fold(xs.tail)<P>(nil, cons));

// Special folds
// =============

// Flattens a string of strings into a single string.
String.flatten(xs: List(String)): String
  case xs:
  | String.nil;
  | String.concat(xs.head, String.flatten(xs.tail));

// Print a string
String.show(xs: String): String
  String.Builder.cons('"',String.to_builder(xs))(String.pure('"'))

// String monad
// ==========

// A string with only one character.
String.pure(x : Char) : String
  String.cons(x)(String.nil)

// The bind function of the string Monad.
String.bind(xs: String, f: Char -> String): String
  case xs:
  | String.nil;
  | String.concat(f(xs.head), String.bind(xs.tail,f));

// Substrings
// ========

// Removes the first characters of a string.
String.drop(n: Nat, xs: String):  String
  case n:
  | xs;
  | case xs:
    | String.nil;
    | String.drop(n.pred,xs.tail);;

// Remove characters while a condition is true
String.drop_while(f: Char -> Bool, xs: String): String
  case xs:
  | String.nil;
  | case f(xs.head):
    | String.drop_while(f,xs.tail);
    | xs;;

String.drop_until(f: Char -> Bool, xs: String): String
  String.drop_while((c) Bool.not(f(c)), xs)

// Removes all characters that do not satisfy a condition.
String.filter(f: Char -> Bool, xs: String): String
  case xs:
  | String.nil;
  | case f(xs.head):
    | String.cons(xs.head,String.filter(f, xs.tail));
    | String.filter(f, xs.tail);;

String.span(f: Char -> Bool, xs: String): Pair(String,String)
  case xs:
  | Pair.new<,>(String.nil,String.nil);
  | case f(xs.head):
    | get y z = String.span(f,xs.tail)
      Pair.new<,>(String.cons(xs.head,y),z);
    | Pair.new<,>(String.nil,xs);;

// Returns the first characters of a string, discards the rest.
String.take(n: Nat, xs: String): String
  case xs:
  | String.nil;
  | case n:
    | String.nil;
    | String.cons(xs.head,String.take(n.pred, xs.tail));;

String.split_at(n : Nat, xs: String) : Pair(String,String)
  Pair.new<,>(String.take(n,xs),String.drop(n,xs))

// String.Builder
// ============

// A lazy String constructor, useful for efficient concatenation
String.Builder: Type
  String -> String

// construct a new builder (it's just the identity function)
String.Builder.new : String.Builder
  (x) x

// turn a builder into a String
String.run_builder(lb: String.Builder): String
  lb(String.nil)

// concatenate two string builders
String.Builder.concat(a: String.Builder, b: String.Builder): String.Builder
   (x) a(b(x))

// prepend an character
String.Builder.cons(c: Char, lb: String.Builder) : String.Builder
  (x) String.cons(c,lb(x))

// append a character
String.Builder.snoc(c: Char, lb: String.Builder) : String.Builder
  (x) lb(String.cons(c,x))

// convert a string to a builder
String.to_builder(string: String) : String.Builder
  String.to_builder.go(string, String.Builder.new)

String.to_builder.go(string: String, lb: String.Builder) : String.Builder
  case string:
  | lb;
  | String.to_builder.go(string.tail)(String.Builder.snoc(string.head, lb));

