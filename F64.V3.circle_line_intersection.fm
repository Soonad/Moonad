F64.V3.circle_line_intersection: F64.Circle -> F64.Line -> Maybe(Pair(F64.V3)(F64.V3))
  (c) (l)
  c<() Maybe(Pair(F64.V3)(F64.V3))>     | (c.pos) (c.rad)
  l<() Maybe(Pair(F64.V3)(F64.V3))>     | (l.pos) (l.dir)
  c.pos<() Maybe(Pair(F64.V3)(F64.V3))> | (cx) (cy) (cz)
  l.pos<() Maybe(Pair(F64.V3)(F64.V3))> | (l.pos.x) (l.pos.y) (l.pos.z)
  l.dir<() Maybe(Pair(F64.V3)(F64.V3))> | (dx) (dy) (dz)
  let x1 = F64.sub(l.pos.x)(cx)
  let y1 = F64.sub(l.pos.y)(cy)
  let x2 = F64.sub(F64.add(l.pos.x)(dx))(cx)
  let y2 = F64.sub(F64.add(l.pos.y)(dy))(cy)
  let dd = F64.sub(F64.mul(x1)(y2))(F64.mul(x2)(y1))
  let de = F64.sub(F64.mul(c.rad)(c.rad))(F64.mul(dd)(dd))
  F64.lte(de)(F64.0)<() Maybe(Pair(F64.V3)(F64.V3))>
  | Maybe.none<Pair(F64.V3)(F64.V3)>;
  | let sx = F64.if<F64>(F64.from_bool(F64.ltn(dy)(F64.0)))(F64.sub(F64.0)(dx))(dx)
    let sy = F64.if<F64>(F64.from_bool(F64.ltn(dy)(F64.0)))(F64.sub(F64.0)(dy))(dy)
    let px = F64.mul(sx)(F64.sqrt(de))
    let py = F64.mul(sy)(F64.sqrt(de))
    let qx = F64.mul(dd)(dy)
    let qy = F64.mul(F64.sub(F64.0)(dd))(dx)
    let ax = F64.sub(qx)(px)
    let ay = F64.sub(qy)(py)
    let bx = F64.add(qx)(px)
    let by = F64.add(qy)(py)
    let ux = F64.add(ax)(cx)
    let uy = F64.add(ay)(cy)
    let vx = F64.add(bx)(cx)
    let vy = F64.add(by)(cy)
    let fst_v = F64.V3.new(ux)(uy)(F64.0)
    let snd_v = F64.V3.new(vx)(vy)(F64.0)
    Maybe.some<Pair(F64.V3)(F64.V3)>(Pair.new<F64.V3><F64.V3>(fst_v)(snd_v))
    ;;;;;;


// circle_line_intersection(circle: Circle, line: Line)
// : Maybe(Pair(V3,V3))
//   case circle |circle
//   case line |line
//   case circle.pos |v3
//   case line.pos |v3
//   case line.dir |v3
//   let cx = circle.pos.x
//   let cy = circle.pos.y
//   let dx = line.dir.x
//   let dy = line.dir.y
//   let x1 = line.pos.x - cx
//   let y1 = line.pos.y - cy
//   let x2 = (line.pos.x + dx) - cx
//   let y2 = (line.pos.y + dy) - cy
//   let dd = (x1 * y2) - (x2 * y1)
//   let de = (circle.rad * circle.rad) - (dd * dd) 
//   if (de < 0) || (de === 0) then
//     none(_)
//   else
//     let sx = if dy < 0 then 0 - dx else dx
//     let sy = if dy < 0 then 0 - dy else dy
//     let px = sx * (de ** 0.5)
//     let py = sy * (de ** 0.5)
//     let qx = dd * dy
//     let qy = (0 - dd) * dx
//     let ax = qx - px
//     let ay = qy - py
//     let bx = qx + px
//     let by = qy + py
//     let ux = ax + cx
//     let uy = ay + cy
//     let vx = bx + cx
//     let vy = by + cy
//     some(_ pair(__ v3(ux,uy,0), v3(vx,vy,0)))
