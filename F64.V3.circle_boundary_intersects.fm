F64.V3.circle_boundary_intersects: F64.Circle -> F64.Boundary -> F64
  (c) (b) 
  c<() F64> | (c.pos) (c.rad)
  b<() F64> | (pts)
  pts<() F64> 
  | F64.0;
  | (h0) (t0)
    t0<() F64>
    | F64.0;
    | (h1) (t1)
      let p0 = h0
      let p1 = h1 
      let sg = F64.Segment.new(p0)(p1)
      let cd = F64.V3.point_segment_sqrdist(c.pos)(sg)
      let test = F64.ltn(cd)(F64.mul(cd)(cd))
      test<() F64> 
      | F64.1;
      | let boun = F64.Boundary.new(List.cons<F64.V3>(h1)(t1))
        F64.V3.circle_boundary_intersects(c)(boun);;;;;

// Circle-boundary intersection test
// circle_boundary_intersects(c: Circle, b: Boundary): Number
//   case b |boundary
//   case c |circle
//   case b.points as l0
//   | nil => 0
//   | cons => case l0.tail as l1
//     | nil => 0
//     | cons => 
//       let p0 = l0.head
//       let p1 = l1.head
//       let sg = segment(p0, p1)
//       let cd = point_segment_sqrdist(c.pos, sg)
//       if cd < (c.rad * c.rad) then
//         1
//       else
//         let boun = boundary(cons(_ l1.head, l1.tail))
//         circle_boundary_intersects(c, boun)

