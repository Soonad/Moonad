Core.to_bits.go: Π(:Core) Π(:Nat) Π(:Bool) Π(:Bits) Bits
  λterm λdep λhash ((((((((<term λ Π(:Bits) Bits> λname λindx λflip λx $indx=((<flip λ Bits> (Nat.to_bits ((Nat.sub indx) (Nat.succ dep)))) (Nat.to_bits indx));(Bits.0 (Bits.0 (Bits.0 (Bits.0 ((Bits.concat indx) x)))))) λname λx (Bits.0 (Bits.0 (Bits.1 ((Bits.concat (String.to_bits name)) x))))) λx (Bits.0 (Bits.1 (Bits.0 x)))) λeras λself λname λbind λbody λx $bind=(((Core.to_bits.go bind) dep) hash);$body=(((Core.to_bits.go $svar=(((Core.var String.nil) dep) hash);$nvar=(((Core.var String.nil) (Nat.succ dep)) hash);((body svar) nvar)) (Nat.succ (Nat.succ dep))) hash);(Bits.0 (Bits.1 (Bits.1 (bind (body x)))))) λeras λname λbody λx $nvar=(((Core.var String.nil) dep) hash);$body=(((Core.to_bits.go (body nvar)) (Nat.succ dep)) hash);(Bits.1 (Bits.0 (Bits.0 (body x))))) λeras λfunc λargm λx $func=(((Core.to_bits.go func) dep) hash);$argm=(((Core.to_bits.go argm) dep) hash);(Bits.1 (Bits.0 (Bits.1 (func (argm x)))))) λname λexpr λbody λx $nvar=(((Core.var String.nil) dep) hash);$expr=(((Core.to_bits.go expr) dep) hash);$body=(((Core.to_bits.go (body nvar)) (Nat.succ dep)) hash);(Bits.1 (Bits.1 (Bits.0 (expr (body x)))))) λdone λexpr λtype λx ((<hash λ Bits> ((((Core.to_bits.go expr) dep) hash) x)) $expr=(((Core.to_bits.go expr) dep) hash);$type=(((Core.to_bits.go type) dep) hash);(Bits.1 (Bits.1 (Bits.1 (expr (type x)))))))

