Parser.take_while1: Π(lbl:String) Π(f:Π(:Char) Bool) (Parser String)
  λlbl λf λs1 (<s1 λself (Parser.Reply String)> λpos λstr λerrs (<((String.span f) str) λx (Parser.Reply String)> λtook λrest ((<str λstr.self (Parser.Reply String)> ((<Parser.Reply.err String> (((Parser.State.make ((Nat.add pos) (String.length took))) rest) errs)) (((Parser.Error.new pos) (<Maybe.some Parser.Item> Parser.Item.eof)) (<List.pure Parser.Item> (Parser.Item.label lbl))))) λstr.head λstr.tail ((<(String.length took) λlen.self (Parser.Reply String)> ((<Parser.Reply.err String> (((Parser.State.make ((Nat.add pos) (String.length took))) rest) errs)) (((Parser.Error.new pos) (<Maybe.some Parser.Item> (Parser.Item.tokens (String.pure str.head)))) (<List.pure Parser.Item> (Parser.Item.label lbl))))) λlen.pred ((<Parser.Reply.val String> (((Parser.State.make ((Nat.add pos) (String.length took))) rest) errs)) took)))))

