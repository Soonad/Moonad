Arelin.exec_turn: Π(gm:Arelin.Game) Arelin.Game
  λgm @intr=:Π(:Arelin.Thing) Π(:Arelin.Thing) Arelin.Thing λthat λthis ((Arelin.interact_with this) that);@tick=:Π(:Arelin.Thing) Π(:(List Arelin.Thing)) Π(:(List Arelin.Thing)) (List Arelin.Thing) λthis λothers λres @this=((Arelin.Thing.set_hit this) <List.nil Arelin.Game.Hit>);@rst=(Arelin.Thing.get_rst this);@this=((<rst λself Arelin.Thing> @new_vel=(((F64.V3.new F64.0) F64.0) F64.0);@new_bst=F64.1;@new_box=(Arelin.Game.Hitbox.cbox ((F64.mul (F64.parse ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.1)) String.nil))) (F64.parse ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.0) Bit.0)) String.nil))));@new_act=F64.0;@new_tik=F64.0;@new_lit=<List.nil Arelin.Game.Light>;@new_rst=Bool.false;@this=((Arelin.Thing.set_vel this) new_vel);@this=((Arelin.Thing.set_bst this) new_bst);@this=((Arelin.Thing.set_box this) new_box);@this=((Arelin.Thing.set_act this) new_act);@this=((Arelin.Thing.set_tik this) new_tik);@this=((Arelin.Thing.set_lit this) new_lit);@this=((Arelin.Thing.set_rst this) new_rst);this) this);@boost=(Arelin.Thing.speed_multiplier_of this);@pos=(Arelin.Thing.get_pos this);@mov=(Arelin.Thing.get_mov this);@pad=(Arelin.Thing.get_pad this);@this=((Arelin.Thing.set_pos this) ((F64.V3.add pos) ((F64.V3.scale ((F64.mul mov) boost)) pad)));@this=(Arelin.Thing.update_buff_dur this);@pos=(Arelin.Thing.get_pos this);@knk=(Arelin.Thing.get_knk this);@wei=(Arelin.Thing.get_wei this);@new_pos=((F64.V3.add pos) knk);@knk_len=(F64.V3.len knk);@new_knk=((<((F64.gtn knk_len) F64.0) λself F64.V3> @force=((F64.max ((F64.sub knk_len) wei)) F64.0);((F64.V3.scale force) (F64.V3.norm knk))) knk);@this=((Arelin.Thing.set_pos this) new_pos);@this=((Arelin.Thing.set_knk this) new_knk);@fun=(Arelin.Thing.get_fun this);@this=(fun this);@this=(((<<List.fold Arelin.Thing> Arelin.Thing> this) intr) others);@tik=(Arelin.Thing.get_tik this);@this=((Arelin.Thing.set_tik this) ((F64.add tik) F64.1));@this_chi=(Arelin.Thing.get_chi this);@chi_init=:Π(:Arelin.Thing) Arelin.Thing λchi ((Arelin.Thing.get_fun chi) chi);@chi_list=((<<List.map Arelin.Thing> Arelin.Thing> chi_init) this_chi);@this=((Arelin.Thing.set_chi this) <List.nil Arelin.Thing>);@this_pos=(Arelin.Thing.get_pos this);@pos_x=(F64.V3.get_z this_pos);@pos_y=(F64.V3.get_y this_pos);@pos_z=(F64.V3.get_z this_pos);@new_x=((F64.min ((F64.max (F64.parse ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.0) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.1) Bit.0)) String.nil)))))) pos_x)) (F64.parse ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.0) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.1) Bit.0)) String.nil)))));@new_y=((F64.min ((F64.max (F64.parse ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.1) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) String.nil)))))) pos_y)) (F64.parse ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.1) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) String.nil)))));@new_z=((F64.min ((F64.max F64.0) pos_z)) (F64.parse ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.0) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.1) Bit.0)) String.nil)))));@this=((Arelin.Thing.set_pos this) (((F64.V3.new new_x) new_y) new_z));@dmg=(Arelin.Thing.get_dmg this);@mhp=(Arelin.Thing.get_mhp this);@new_dmg=((F64.max F64.0) ((F64.min mhp) dmg));@this=((Arelin.Thing.set_dmg this) new_dmg);@sid=(Arelin.Thing.get_sid this);@dmg=(Arelin.Thing.get_dmg this);@mhp=(Arelin.Thing.get_mhp this);@no_hp=Bool.false;@die=(Arelin.Thing.get_die this);@xs=((<((Bool.or die) no_hp) λself (List Arelin.Thing)> res) ((<List.cons Arelin.Thing> this) res));((<List.concat Arelin.Thing> chi_list) xs);@things_id=:Π(:(List Arelin.Thing)) (List Arelin.Thing) λx x;(<gm λself Arelin.Game> λstage @stage_nil=<List.nil Arelin.Thing>;@new_stage=((((<<Arelin.fold_with_context Arelin.Thing> (List Arelin.Thing)> stage_nil) tick) stage) things_id);(Arelin.Game.new new_stage))

