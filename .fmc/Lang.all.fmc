Lang.all: (Parser Π(:Core.Ctx) Core)
  $Bnd=Π(:Core.Ctx) Core;$Ret=((Pair Text) Bnd);((<<Parser.bind Text> Bnd> (Lang.nam Bool.true)) λself ((<<Parser.bind ((Pair Bool) Ret)> Bnd> (<Lang.enclose Ret> ((<<Parser.bind Text> Ret> (Lang.nam Bool.true)) λn ((<<Parser.then Unit> Ret> Lang.space) ((<<Parser.then Text> Ret> (Lang.symbol ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.1) Bit.0) Bit.1) Bit.0)) String.nil))) ((<<Parser.bind Bnd> Ret> Lang.trm) λt (<Parser.pure Ret> ((<<Pair.new Text> Bnd> n) t)))))))) λx (<x λ (Parser Bnd)> λeras λp (<p λ (Parser Bnd)> λname λbind ((<<Parser.then Unit> Bnd> Lang.space) ((<<Parser.then Text> Bnd> (Lang.symbol ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.1) Bit.1) Bit.1) Bit.0)) String.nil)))) ((<<Parser.bind Bnd> Bnd> Lang.trm) λbody (<Parser.pure Bnd> λctx @tbind=(bind ctx);@tbody=:Π(:Core) Π(:Core) Core λs λx (body (((Core.Ctx.ext name) x) (((Core.Ctx.ext self) s) ctx)));(((((Core.all eras) self) name) tbind) tbody)))))))))

