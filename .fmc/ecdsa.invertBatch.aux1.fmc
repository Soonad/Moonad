ecdsa.invertBatch.aux1: Π(nums:(List Nat)) Π(modulo:Nat) Π(acc:Nat) Π(scratch:(List Nat)) Π(rest:(List Nat)) ((Pair Nat) ((Pair (List Nat)) (List Nat)))
  λnums λmodulo λacc λscratch λrest ((<nums λnums.self ((Pair Nat) ((Pair (List Nat)) (List Nat)))> ((<<Pair.new Nat> ((Pair (List Nat)) (List Nat))> acc) ((<<Pair.new (List Nat)> (List Nat)> scratch) rest))) λnums.head λnums.tail ((<((Nat.eql nums.head) 0) λself.self ((Pair Nat) ((Pair (List Nat)) (List Nat)))> $scratch=((<List.cons Nat> 0) scratch);$rest=((<List.cons Nat> nums.head) rest);(((((ecdsa.invertBatch.aux1 nums.tail) modulo) acc) scratch) rest)) $scratch=((<List.cons Nat> acc) scratch);$acc=((Nat.mod ((Nat.mul acc) nums.head)) modulo);$rest=((<List.cons Nat> nums.head) rest);(((((ecdsa.invertBatch.aux1 nums.tail) modulo) acc) scratch) rest)))

