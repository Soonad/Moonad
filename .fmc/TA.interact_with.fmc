TA.interact_with: Π(this:TA.Thing) Π(that:TA.Thing) TA.Thing
  λthis λthat @this.pos=(TA.Thing.get_pos this);@this.dir=(TA.Thing.get_dir this);@this.box=(TA.Thing.get_box this);@this.buf=(TA.Thing.get_buf this);@this.sid=(TA.Thing.get_sid this);@that.pos=(TA.Thing.get_pos that);@that.dir=(TA.Thing.get_dir that);@that.box=(TA.Thing.get_box that);@that.hit=(TA.Thing.get_hit that);@that.sid=(TA.Thing.get_sid this);@out_vec=((((((TA.collide_with this.pos) this.dir) this.box) that.pos) that.dir) that.box);@this=((<out_vec λ TA.Thing> this) λout_vec.value @new_pos=((F64.V3.add this.pos) out_vec.value);((TA.Thing.set_pos this) new_pos));@this=@apply_hit=:Π(:TA.Game.Hit) Π(:TA.Thing) TA.Thing λhit λthis (<hit λ TA.Thing> λhit.eff λhit.pos λhit.dir λhit.box @out_vec=((((((TA.collide_with this.pos) this.dir) this.box) hit.pos) hit.dir) hit.box);((<out_vec λ TA.Thing> this) λout_vec.value @compare_sid=((F64.eql this.sid) that.sid);@apply_eff=:Π(:TA.Game.Effect) Π(:TA.Thing) TA.Thing λeff λthis (((((((((((<eff λ TA.Thing> λeff.lif @this.dmg=(TA.Thing.get_dmg this);(((<Bool.if TA.Thing> compare_sid) this) ((TA.Thing.set_dmg this) ((F64.sub this.dmg) eff.lif)))) λeff.dmg (((<Bool.if TA.Thing> compare_sid) this) ((TA.Thing.handle_shields eff.dmg) this))) λeff.mag (((<Bool.if TA.Thing> compare_sid) this) @v3=(((F64.V3.new F64.1) F64.0) F64.0);@dir=(((F64.V3.look_at hit.pos) this.pos) v3);@vec=((F64.V3.scale eff.mag) dir);((TA.Thing.set_knk this) vec))) λeff.mag λeff.dir (((<Bool.if TA.Thing> compare_sid) this) @vec=((F64.V3.scale eff.mag) eff.dir);((TA.Thing.set_knk this) vec))) λeff.dur λeff.val (((<Bool.if TA.Thing> compare_sid) this) @updated_buffs=((<List.cons TA.Game.Buff> ((TA.Game.Buff.slowed eff.dur) eff.val)) this.buf);((TA.Thing.set_buf this) updated_buffs))) λeff.dur λeff.val (((<Bool.if TA.Thing> compare_sid) this) @updated_buffs=((<List.cons TA.Game.Buff> ((TA.Game.Buff.hasted eff.dur) eff.val)) this.buf);((TA.Thing.set_buf this) updated_buffs))) λeff.dur λeff.val (((<Bool.if TA.Thing> compare_sid) this) @updated_buffs=((<List.cons TA.Game.Buff> ((TA.Game.Buff.shielded eff.dur) eff.val)) this.buf);((TA.Thing.set_buf this) updated_buffs))) λeff.dur (((<Bool.if TA.Thing> compare_sid) this) @updated_buffs=((<List.cons TA.Game.Buff> (TA.Game.Buff.silenced eff.dur)) this.buf);((TA.Thing.set_buf this) updated_buffs))) λeff.dur (((<Bool.if TA.Thing> compare_sid) this) @updated_buffs=((<List.cons TA.Game.Buff> (TA.Game.Buff.rooted eff.dur)) this.buf);((TA.Thing.set_buf this) updated_buffs))) λeff.dur (((<Bool.if TA.Thing> compare_sid) this) @updated_buffs=((<List.cons TA.Game.Buff> (TA.Game.Buff.stuned eff.dur)) this.buf);((TA.Thing.set_buf this) updated_buffs))) λeff.to_pos λeff.all (((<Bool.if TA.Thing> ((F64.eql eff.all) F64.1)) ((TA.Thing.set_pos this) eff.to_pos)) this));(((<<List.fold TA.Game.Effect> TA.Thing> this) apply_eff) hit.eff)));(((<<List.fold TA.Game.Hit> TA.Thing> this) apply_hit) that.hit);this

