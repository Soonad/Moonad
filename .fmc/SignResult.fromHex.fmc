SignResult.fromHex: Π(:String) (Maybe SignResult)
  λstr $bind=<<Maybe.bind ((Pair String) String)> SignResult>;$bind2=<<Maybe.bind Nat> SignResult>;((bind ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λstr λcheck1 ((bind ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λlength λstr ((bind2 (Nat.parse_hex_safe length)) λlength ((bind ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λcheck2 λstr (((<Bool.if (Maybe SignResult)> ((((Bool.orVar Nat.3) ((String.eql check1) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) String.nil)))) ((Nat.eql length) ((Nat.sub (String.length str)) Nat.4))) ((String.eql check2) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0)) String.nil))))) <Maybe.none SignResult>) ((bind ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λrLen λstr ((bind2 (Nat.parse_hex_safe rLen)) λrLen ((bind ((String.take_n rLen) str)) λpair (<pair λx (Maybe SignResult)> λr λstr ((bind2 (Nat.parse_hex_safe r)) λr ((bind ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λcheck3 λstr ((<((String.eql check3) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0)) String.nil))) λ (Maybe SignResult)> <Maybe.none SignResult>) ((bind ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λsLen λstr ((bind2 (Nat.parse_hex_safe sLen)) λsLen ((bind ((String.take_n sLen) str)) λpair (<pair λx (Maybe SignResult)> λs λstr ((bind2 (Nat.parse_hex_safe s)) λs (<Maybe.some SignResult> ((SignResult.new r) s)))))))))))))))))))))))))

