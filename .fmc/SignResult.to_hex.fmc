SignResult.to_hex: Π(:SignResult) Π(:Bool) String
  λsig λcompressed (<sig λx String> λsig.r λsig.s @s_hex=(ecdsa.number_to_hex sig.s);(((<Bool.if String> compressed) s_hex) @r_hex=(ecdsa.number_to_hex sig.r);@r_len_nat=((Nat.div (String.length r_hex)) Nat.2);@r_len=(ecdsa.number_to_hex r_len_nat);@s_len_nat=((Nat.div (String.length s_hex)) Nat.2);@s_len=(ecdsa.number_to_hex s_len_nat);@length=(ecdsa.number_to_hex ((((Nat.addVar Nat.3) r_len_nat) s_len_nat) Nat.4));(((((((((String.concatVar Nat.8) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) String.nil))) length) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0)) String.nil))) r_len) r_hex) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0)) String.nil))) s_len) s_hex)))

