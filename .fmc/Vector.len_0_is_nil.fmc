Vector.len_0_is_nil: Π(vec:((Vector Nat) Nat.zero)) (((Equal (:Π(:Nat) * λx ((Vector Nat) x) Nat.zero)) vec) <Vector.nil Nat>)
  λvec (((<vec λvec.len λvec.self Π(e:(((Equal Nat) vec.len) Nat.zero)) @P0=:Π(:Nat) * λx ((Vector Nat) x);@P1=:Π(:Nat) * λx ((Vector Nat) Nat.zero);$x0=((<<<<Equal.rewrite Nat> vec.len> Nat.zero> P0> e) vec.self);$x1=((<<<<Equal.rewrite Nat> vec.len> Nat.zero> P1> e) <Vector.nil Nat>);(((Equal (:Π(:Nat) * λx ((Vector Nat) x) Nat.zero)) x0) x1)> λe @P0=:Π(:Nat) * λx ((Vector Nat) Nat.zero);@x0=((<<<<Equal.rewrite Nat> Nat.zero> Nat.zero> P0> e) <Vector.nil Nat>);<<Equal.to ((Vector Nat) Nat.zero)> x0>) Λvec.len λvec.x λvec.xs λe ((Empty.absurd ((Nat.succ_isnt_zero vec.len) e)) @P0=:Π(:Nat) * λx ((Vector Nat) x);@P1=:Π(:Nat) * λx ((Vector Nat) Nat.zero);$x0=((<<<<Equal.rewrite Nat> (Nat.succ vec.len)> Nat.zero> P0> e) ((<<Vector.ext Nat> vec.len> vec.x) vec.xs));$x1=((<<<<Equal.rewrite Nat> (Nat.succ vec.len)> Nat.zero> P1> e) <Vector.nil Nat>);(((Equal (:Π(:Nat) * λx ((Vector Nat) x) Nat.zero)) x0) x1))) <<Equal.to Nat> Nat.zero>)

