Jacobian.wNAF.aux: Π(precomputes:(List Jacobian)) Π(p:Jacobian) Π(f:Jacobian) Π(n:Nat) Π(W:Nat) Π(window:Nat) Π(windows:Nat) Π(windowSize:Nat) Π(mask:Nat) Π(maxNumber:Nat) ((Pair Jacobian) Jacobian)
  λprecomputes λp λf λn λW λwindow λwindows λwindowSize λmask λmaxNumber ((<((Nat.ltn window) windows) λself.self ((Pair Jacobian) Jacobian)> $offset=((Nat.mul window) windowSize);$wbits=((Nat.bitwise_and n) mask);$n=((Nat.div n) maxNumber);(<(((<Bool.if ((Pair Nat) Nat)> ((Nat.gtn wbits) windowSize)) ((<<Pair.new Nat> Nat> (Nat.succ n)) ((Nat.sub wbits) maxNumber))) ((<<Pair.new Nat> Nat> n) wbits)) λx ((Pair Jacobian) Jacobian)> λn λwbits ((<((Nat.eql wbits) 0) λself.self ((Pair Jacobian) Jacobian)> $q=((<Maybe.extract Jacobian> ((<List.at Jacobian> precomputes) offset)) Jacobian.0);$f=((Jacobian.add f) (((<Bool.if Jacobian> (Nat.odd window)) (Jacobian.negate q)) q));$window=(Nat.succ window);((((((((((Jacobian.wNAF.aux precomputes) p) f) n) W) window) windows) windowSize) mask) maxNumber)) $cached=((<Maybe.extract Jacobian> ((<List.at Jacobian> precomputes) (Nat.pred ((Nat.add offset) wbits)))) Jacobian.0);$p=((Jacobian.add p) cached);$window=(Nat.succ window);((((((((((Jacobian.wNAF.aux precomputes) p) f) n) W) window) windows) windowSize) mask) maxNumber)))) ((<<Pair.new Jacobian> Jacobian> p) f))

