Lang.let: (Parser Π(:Core.Ctx) Core)
  $C=Π(:Core.Ctx) Core;((<<Parser.then String> C> (Lang.symbol ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.1) Bit.0) Bit.1) Bit.0) Bit.0)) String.nil))))) ((<<Parser.bind String> C> (Lang.nam Bool.false)) λname ((<<Parser.then Unit> C> Lang.space) ((<<Parser.then String> C> (Lang.symbol ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.1) Bit.1) Bit.0) Bit.1)) String.nil))) ((<<Parser.bind C> C> Lang.trm) λexpr ((<<Parser.then Unit> C> Lang.space) ((<<Parser.then (Maybe String)> C> (<Parser.optional String> (Lang.symbol ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.1) Bit.0) Bit.1) Bit.1)) String.nil)))) ((<<Parser.bind C> C> Lang.trm) λbody (<Parser.pure C> λctx @tbody=:Π(:Core) Core λx (body (((Core.Ctx.ext name) x) ctx));(((Core.let name) (expr ctx)) tbody))))))))))

