SignResult.from_hex: Π(:String) (Maybe SignResult)
  λstr ((<<Maybe.bind ((Pair String) String)> SignResult> ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λstr λcheck1 ((<<Maybe.bind ((Pair String) String)> SignResult> ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λlength λstr ((<<Maybe.bind Nat> SignResult> (ecdsa.parse_byte length)) λlength ((<<Maybe.bind ((Pair String) String)> SignResult> ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λcheck2 λstr (((<Bool.if (Maybe SignResult)> ((((Bool.orVar Nat.3) ((String.eql check1) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.1)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) String.nil)))) ((Nat.eql length) ((Nat.sub (String.length str)) Nat.4))) ((String.eql check2) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0)) String.nil))))) <Maybe.none SignResult>) ((<<Maybe.bind ((Pair String) String)> SignResult> ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λrLen λstr ((<<Maybe.bind Nat> SignResult> (ecdsa.parse_byte rLen)) λrLen ((<<Maybe.bind ((Pair String) String)> SignResult> ((String.take_n rLen) str)) λpair (<pair λx (Maybe SignResult)> λr λstr ((<<Maybe.bind Nat> SignResult> (Nat.parse_hex_safe r)) λr ((<<Maybe.bind ((Pair String) String)> SignResult> ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λcheck3 λstr ((<((String.eql check3) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.0) Bit.0)) ((String.cons ((((((((((((((((Char.new Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.0) Bit.1) Bit.1) Bit.0) Bit.0) Bit.1) Bit.0)) String.nil))) λ (Maybe SignResult)> <Maybe.none SignResult>) ((<<Maybe.bind ((Pair String) String)> SignResult> ((String.take_n Nat.2) str)) λpair (<pair λx (Maybe SignResult)> λsLen λstr ((<<Maybe.bind Nat> SignResult> (ecdsa.parse_byte sLen)) λsLen ((<<Maybe.bind ((Pair String) String)> SignResult> ((String.take_n sLen) str)) λpair (<pair λx (Maybe SignResult)> λs λstr ((<<Maybe.bind Nat> SignResult> (Nat.parse_hex_safe s)) λs (<Maybe.some SignResult> ((SignResult.new r) s)))))))))))))))))))))))))

