Parsec.take_while1: ∀(S:*) ∀(E:*) Π(:String) Π(:Π(:Char) Bool) (((Parsec S) E) String)
  ΛS ΛE λerr λf ΛX λs1 λempty_value λempty_error λeaten_value λ (<s1 λ X> λinput λindex λerror λstate (<((String.take_while f) input) λ X> λtook λrest $len=(String.length took);$s2=((((<<Parsec.State.make S> E> rest) ((Nat.add index) len)) error) state);((<took λ X> ((<input λ X> ((empty_error s2) (((<Parsec.Error.make_trivial E> index) (<Maybe.some Parsec.Error.Item> Parsec.Error.Item.end_of_input)) (<List.single Parsec.Error.Item> (Parsec.Error.Item.label err))))) λhead λ ((empty_error s2) (((<Parsec.Error.make_trivial E> index) (<Maybe.some Parsec.Error.Item> (Parsec.Error.Item.tokens (String.single head)))) (<List.single Parsec.Error.Item> (Parsec.Error.Item.label err)))))) λ λ ((eaten_value s2) took))))

