Map.lookup: ∀(A:*) Π(bits:Bits) Π(val:A) Π(map:(Map A)) ((Pair A) (Map A))
  ΛA λbits λval λmap (((<bits λbits.self ((Pair A) (Map A))> ((<map λmap.self ((Pair A) (Map A))> $map=(((<Map.tie A> (<Maybe.some A> val)) <Map.new A>) <Map.new A>);((<<Pair.new A> (Map A)> val) map)) λmap.val λmap.lft λmap.rgt $value=((<Maybe.extract A> map.val) val);$map=(((<Map.tie A> (<Maybe.some A> value)) map.lft) map.rgt);((<<Pair.new A> (Map A)> value) map))) λbits.pred ((<map λmap.self ((Pair A) (Map A))> (<(((<Map.lookup A> bits.pred) val) <Map.new A>) λself ((Pair A) (Map A))> λp.fst λp.snd ((<<Pair.new A> (Map A)> p.fst) (((<Map.tie A> <Maybe.none A>) p.snd) <Map.new A>)))) λmap.val λmap.lft λmap.rgt (<(((<Map.lookup A> bits.pred) val) map.lft) λself ((Pair A) (Map A))> λp.fst λp.snd ((<<Pair.new A> (Map A)> p.fst) (((<Map.tie A> map.val) p.snd) map.rgt))))) λbits.pred ((<map λmap.self ((Pair A) (Map A))> (<(((<Map.lookup A> bits.pred) val) <Map.new A>) λself ((Pair A) (Map A))> λp.fst λp.snd ((<<Pair.new A> (Map A)> p.fst) (((<Map.tie A> <Maybe.none A>) <Map.new A>) p.snd)))) λmap.val λmap.lft λmap.rgt (<(((<Map.lookup A> bits.pred) val) map.rgt) λself ((Pair A) (Map A))> λp.fst λp.snd ((<<Pair.new A> (Map A)> p.fst) (((<Map.tie A> map.val) map.lft) p.snd)))))

