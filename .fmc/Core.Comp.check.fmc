Core.Comp.check: Π(:Core) Π(:Core) Π(:Core.Defs) Π(:Nat) (Maybe ((Pair Comp) Core))
  λterm λtype λdefs λctx @Par=((Pair Comp) Core);@par=<<Pair.new Comp> Core>;@bnd=<<Maybe.bind Par> Par>;@err=<Maybe.none Par>;@ret=<Maybe.some Par>;@Ret=(Maybe Par);@cmp=<<Pair.fst Comp> Core>;@typ=<<Pair.snd Comp> Core>;$con=String.concat;((((((((<term λ Ret> λ λ λ ((((Core.Comp.check term) type) defs) ctx)) λ ((((Core.Comp.check term) type) defs) ctx)) ((((Core.Comp.check term) type) defs) ctx)) λ λ λ λ λ ((((Core.Comp.check term) type) defs) ctx)) λterm.eras λterm.name λterm.body $typv=((Core.reduce type) defs);((<(Core.if_all typv) λ Ret> err) λgot (<got Ret> λtypv.eras λtypv.self λtypv.name λtypv.bind λtypv.body $self_var=(((Core.ann Bool.true) term) type);$name_var=(((Core.ann Bool.true) (((Core.var term.name) (Nat.succ ctx)) Bool.false)) typv.bind);$body_typ=((typv.body self_var) name_var);$body_ctx=(Nat.succ ctx);((bnd ((((Core.Comp.check (term.body name_var)) body_typ) defs) body_ctx)) λbody_res $comp=((Comp.lam term.name) (cmp body_res));(ret ((par comp) type)))))) λ λ λ ((((Core.Comp.check term) type) defs) ctx)) λterm.name λterm.expr λterm.body ((bnd (((Core.Comp.infer term.expr) defs) ctx)) λexpr_res $expr_var=(((Core.ann Bool.true) term.expr) (typ expr_res));$body_ctx=(Nat.succ ctx);((bnd ((((Core.Comp.check (term.body expr_var)) type) defs) (Nat.succ ctx))) λbody_res $comp=(((Comp.let term.name) (cmp expr_res)) (cmp body_res));$type=(typ body_res);(ret ((par comp) type))))) λ λ λ ((((Core.Comp.check term) type) defs) ctx))

