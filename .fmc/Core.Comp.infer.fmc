Core.Comp.infer: Π(:Core) Π(:Core.Defs) Π(:Nat) (Maybe ((Pair Comp) Core))
  λterm λdefs λctx @Par=((Pair Comp) Core);@par=<<Pair.new Comp> Core>;@bnd=<<Maybe.bind Par> Par>;@err=<Maybe.none Par>;@ret=<Maybe.some Par>;@Ret=(Maybe Par);@cmp=<<Pair.fst Comp> Core>;@typ=<<Pair.snd Comp> Core>;((((((((<term λ Ret> λterm.name λterm.indx λterm.flip $comp=(Comp.var term.name);$type=(((Core.var term.name) term.indx) term.flip);(ret ((par comp) type))) λterm.name ((<((Core.Defs.get_type defs) term.name) λ Ret> err) λtype $comp=(Comp.var term.name);(ret ((par comp) type)))) $comp=Comp.fal;$type=Core.typ;(ret ((par comp) type))) λterm.eras λterm.self λterm.name λterm.bind λterm.body $comp=Comp.fal;$type=Core.typ;(ret ((par comp) type))) λterm.eras λterm.name λterm.body err) λterm.eras λterm.func λterm.argm ((bnd (((Core.Comp.infer term.func) defs) ctx)) λfunc_res $func_typ=((Core.reduce (typ func_res)) defs);((<(Core.if_all func_typ) λ Ret> err) λgot (<got Ret> λfunc_typ.eras λfunc_typ.self λfunc_typ.name λfunc_typ.bind λfunc_typ.body $self_var=(((Core.ann Bool.true) term.func) func_typ);$name_var=(((Core.ann Bool.true) term.argm) func_typ.bind);((bnd ((((Core.Comp.check term.argm) func_typ.bind) defs) ctx)) λargm_res $term_typ=((func_typ.body self_var) name_var);$comp=((Comp.app (cmp func_res)) (cmp argm_res));$type=term_typ;(ret ((par comp) type))))))) λterm.name λterm.expr λterm.body ((bnd (((Core.Comp.infer term.expr) defs) ctx)) λexpr_res $expr_var=(((Core.ann Bool.true) term.expr) (typ expr_res));((bnd (((Core.Comp.infer (term.body expr_var)) defs) (Nat.succ ctx))) λbody_res $comp=(((Comp.let term.name) (cmp expr_res)) (cmp body_res));$type=(typ body_res);(ret ((par comp) type))))) λterm.done λterm.expr λterm.type ((((Core.Comp.check term.expr) term.type) defs) ctx))

