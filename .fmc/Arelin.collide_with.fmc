Arelin.collide_with: Π(a_pos:F64.V3) Π(a_dir:F64.V3) Π(a_box:Arelin.Game.Hitbox) Π(b_pos:F64.V3) Π(b_dir:F64.V3) Π(b_box:Arelin.Game.Hitbox) (Maybe F64.V3)
  λa_pos λa_dir λa_box λb_pos λb_dir λb_box (((<a_box λa_box.self (Maybe F64.V3)> <Maybe.none F64.V3>) λa_box.rad (((<b_box λb_box.self (Maybe F64.V3)> <Maybe.none F64.V3>) λb_box.rad $dst=((F64.V3.dist a_pos) b_pos);$rad=((F64.add a_box.rad) b_box.rad);((<((Bool.and ((F64.gtn dst) F64.0)) ((F64.ltn dst) rad)) λself.self (Maybe F64.V3)> $out_dir=(F64.V3.norm ((F64.V3.sub a_pos) b_pos));$out_vec=((F64.V3.scale ((F64.sub rad) dst)) out_dir);(<Maybe.some F64.V3> out_vec)) <Maybe.none F64.V3>)) λb_box.pts $nil=<Maybe.none F64.V3>;$cons=:Π(:F64.Segment) Π(:(Maybe F64.V3)) (Maybe F64.V3) λsegment λresult ((<result λresult.self (Maybe F64.V3)> (<segment λsegment.self (Maybe F64.V3)> λsegment.a λsegment.b $dst=((F64.V3.point_segment_dist a_pos) segment);$rad=a_box.rad;((<((F64.ltn dst) rad) λself.self (Maybe F64.V3)> $out_dir=(F64.V3.rot_90 (F64.V3.norm ((F64.V3.sub segment.a) segment.b)));$out_vec=((F64.V3.scale ((F64.sub rad) dst)) out_dir);(<Maybe.some F64.V3> out_vec)) <Maybe.none F64.V3>))) λresult.value (<Maybe.some F64.V3> result.value));$segs=(((F64.V3.polygon_to_segments b_pos) b_dir) b_box.pts);(((<<List.fold F64.Segment> (Maybe F64.V3)> nil) cons) segs))) λa_box.pts <Maybe.none F64.V3>)

