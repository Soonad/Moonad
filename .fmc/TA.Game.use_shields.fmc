TA.Game.use_shields: Π(buff:TA.Game.Buff) Π(acc:((Pair F64) (List TA.Game.Buff))) ((Pair F64) (List TA.Game.Buff))
  λbuff λacc (<acc λ ((Pair F64) (List TA.Game.Buff))> λacc.fst λacc.snd ((((((<buff λ ((Pair F64) (List TA.Game.Buff))> λbuff.dur λbuff.val (((<Bool.if ((Pair F64) (List TA.Game.Buff))> ((F64.eql acc.fst) F64.0)) acc) @compare=((F64.compare_numbers acc.fst) buff.val);(((<compare λ ((Pair F64) (List TA.Game.Buff))> @remaining_shield_val=((F64.sub buff.val) acc.fst);@remaining_buf=((<List.cons TA.Game.Buff> ((TA.Game.Buff.shielded buff.dur) remaining_shield_val)) acc.snd);((<<Pair.new F64> (List TA.Game.Buff)> F64.0) remaining_buf)) ((<<Pair.new F64> (List TA.Game.Buff)> F64.0) acc.snd)) @remaining_dmg=((F64.sub acc.fst) buff.val);((<<Pair.new F64> (List TA.Game.Buff)> remaining_dmg) acc.snd)))) λbuff.dur λbuff.val ((<<Pair.new F64> (List TA.Game.Buff)> acc.fst) ((<List.cons TA.Game.Buff> buff) acc.snd))) λbuff.dur λbuff.val ((<<Pair.new F64> (List TA.Game.Buff)> acc.fst) ((<List.cons TA.Game.Buff> buff) acc.snd))) λbuff.dur ((<<Pair.new F64> (List TA.Game.Buff)> acc.fst) ((<List.cons TA.Game.Buff> buff) acc.snd))) λbuff.dur ((<<Pair.new F64> (List TA.Game.Buff)> acc.fst) ((<List.cons TA.Game.Buff> buff) acc.snd))) λbuff.dur ((<<Pair.new F64> (List TA.Game.Buff)> acc.fst) ((<List.cons TA.Game.Buff> buff) acc.snd))))

