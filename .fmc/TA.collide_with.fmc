TA.collide_with: Π(a_pos:F64.V3) Π(a_dir:F64.V3) Π(a_box:TA.Game.Hitbox) Π(b_pos:F64.V3) Π(b_dir:F64.V3) Π(b_box:TA.Game.Hitbox) (Maybe F64.V3)
  λa_pos λa_dir λa_box λb_pos λb_dir λb_box @none=<Maybe.none F64.V3>;(((<a_box λ (Maybe F64.V3)> none) λa_box.rad (((<b_box λ (Maybe F64.V3)> none) λb_box.rad @dst=((F64.V3.dist a_pos) b_pos);@rad=((F64.add a_box.rad) b_box.rad);@if_condition=((Bool.and ((F64.ltn F64.0) dst)) ((F64.ltn dst) rad));(((<Bool.if (Maybe F64.V3)> if_condition) @out_dir=(F64.V3.norm ((F64.V3.sub a_pos) b_pos));@out_vec=((F64.V3.scale ((F64.sub rad) dst)) out_dir);(<Maybe.some F64.V3> out_vec)) none)) λb_box.pts @cons=:Π(:F64.Segment) Π(:(Maybe F64.V3)) (Maybe F64.V3) λsegment λresult ((<result λ (Maybe F64.V3)> (<segment λ (Maybe F64.V3)> λsegment.a λsegment.b @dst=((F64.V3.point_segment_dist a_pos) segment);@rad=a_box.rad;(((<Bool.if (Maybe F64.V3)> ((F64.ltn dst) rad)) @out_dir=(F64.V3.rot_90 (F64.V3.norm ((F64.V3.sub segment.a) segment.b)));@out_vec=((F64.V3.scale ((F64.sub rad) dst)) out_dir);(<Maybe.some F64.V3> out_vec)) none))) λresult.value (<Maybe.some F64.V3> result.value));@segs=(((F64.V3.polygon_to_segments b_pos) b_dir) b_box.pts);(((<<List.fold F64.Segment> (Maybe F64.V3)> none) cons) segs))) λa_box.pts none)

