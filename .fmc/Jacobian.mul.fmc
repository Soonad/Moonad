Jacobian.mul: Π(scalar:Nat) Π(w:Nat) Π(precomputes:(List Jacobian)) Jacobian
  λscalar λw λprecomputes $n=((Nat.mod scalar) CURVE.n);(<(ecdsa.split_scalar n) λx Jacobian> λk1 λk2 (<(Int.toNat k1) λx Jacobian> λk1neg λk1 (<(Int.toNat k2) λx Jacobian> λk2neg λk2 (<(((Jacobian.wNAF w) precomputes) k1) λx Jacobian> λk1p λf1p (<(((Jacobian.wNAF w) precomputes) k2) λx Jacobian> λk2p λf2p $k1p=(((<Bool.if Jacobian> k1neg) (Jacobian.negate k1p)) k1p);$k2p=(((<Bool.if Jacobian> k2neg) (Jacobian.negate k2p)) k2p);$k2p=(<k2p λself Jacobian> λk2p.x λk2p.y λk2p.z (((Jacobian.new (ecdsa.mod ((Nat.mul k2p.x) CURVE.beta))) k2p.y) k2p.z));$point=((Jacobian.add k1p) k2p);$fake=((Jacobian.add f1p) f2p);(<fake λself Jacobian> λ_ λ_ λ_ (Jacobian.normalizeZ point)))))))

