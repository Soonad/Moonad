query: ∀(A:*) Π(:Π(:A) ((Pair A) A)) Π(:Bits) Π(:(Map A)) ((Pair (Map A)) (Maybe A))
  ΛA λcpy λbits λmap $rec=<query A>;((((((<bits λ Π(:Π(:Π(:A) ((Pair A) A)) Π(:Bits) Π(:(Map A)) ((Pair (Map A)) (Maybe A))) Π(:Π(:A) ((Pair A) A)) Π(:(Map A)) ((Pair (Map A)) (Maybe A))> λrec λcpy λmap ((<map λ ((Pair (Map A)) (Maybe A))> $map=<Map.new A>;$val=<Maybe.none A>;((<<Pair.new (Map A)> (Maybe A)> map) val)) λmap.val λmap.lft λmap.rgt $mval=map.val;((((<mval λ Π(:(Map A)) Π(:(Map A)) ((Pair (Map A)) (Maybe A))> λmap.lft λmap.rgt $map=(((<Map.tie A> <Maybe.none A>) map.lft) map.rgt);$val=<Maybe.none A>;((<<Pair.new (Map A)> (Maybe A)> map) val)) λmval.value λmap.lft λmap.rgt $p=(cpy mval.value);(<p λ ((Pair (Map A)) (Maybe A))> λp.fst λp.snd $map=(((<Map.tie A> (<Maybe.some A> p.fst)) map.lft) map.rgt);$val=(<Maybe.some A> p.snd);((<<Pair.new (Map A)> (Maybe A)> map) val))) map.lft) map.rgt))) λbits.pred λrec λcpy λmap ((<map λ ((Pair (Map A)) (Maybe A))> $map=<Map.new A>;$val=<Maybe.none A>;((<<Pair.new (Map A)> (Maybe A)> map) val)) λmap.val λmap.lft λmap.rgt $p=(((rec cpy) bits.pred) map.lft);(<p λ ((Pair (Map A)) (Maybe A))> λp.fst λp.snd $map=(((<Map.tie A> map.val) p.fst) map.rgt);$val=p.snd;((<<Pair.new (Map A)> (Maybe A)> map) val)))) λbits.pred λrec λcpy λmap ((<map λ ((Pair (Map A)) (Maybe A))> $map=<Map.new A>;$val=<Maybe.none A>;((<<Pair.new (Map A)> (Maybe A)> map) val)) λmap.val λmap.lft λmap.rgt $p=(((rec cpy) bits.pred) map.rgt);(<p λ ((Pair (Map A)) (Maybe A))> λp.fst λp.snd $map=(((<Map.tie A> map.val) map.lft) p.fst);$val=p.snd;((<<Pair.new (Map A)> (Maybe A)> map) val)))) rec) cpy) map)

