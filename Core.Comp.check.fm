Core.Comp.check: Core -> Core -> Core.Defs -> Nat -> Maybe(Pair(Comp)(Core))
  (term) (type) (defs) (ctx)
  let Par = Pair(Comp)(Core)
  let par = Pair.new<Comp><Core>
  let bnd = Maybe.bind<Par><Par>
  let err = Maybe.none<Par>
  let ret = Maybe.some<Par>
  let Ret = Maybe(Par)
  let cmp = Pair.fst<Comp><Core>
  let typ = Pair.snd<Comp><Core>
  let con = String.concat
  term<() Ret>
  |#var# () () ()
    Core.Comp.check(term)(type)(defs)(ctx);
  |#ref# ()
    Core.Comp.check(term)(type)(defs)(ctx);
  |#typ#
    Core.Comp.check(term)(type)(defs)(ctx);
  |#all# () () () () ()
    Core.Comp.check(term)(type)(defs)(ctx);
  |#lam# (term.eras) (term.name) (term.body)
    let typv = Core.reduce(type)(defs)
    Core.if_all(typv)<() Ret>
    |#none# err;
    |#some# (got) got<Ret>
      | (typv.eras) (typv.self) (typv.name) (typv.bind) (typv.body)
      let self_var = Core.ann(Bool.true)(term)(type)
      let name_var = Core.ann(Bool.true)(Core.var(term.name)(Nat.succ(ctx))(Bool.false))(typv.bind)
      let body_typ = typv.body(self_var)(name_var)
      let body_ctx = Nat.succ(ctx)
      use body_res = bnd(Core.Comp.check(term.body(name_var))(body_typ)(defs)(body_ctx))
      let comp     = Comp.lam(term.name)(cmp(body_res))
      ret(par(comp)(type));;;
  |#app# () () ()
    Core.Comp.check(term)(type)(defs)(ctx);
  |#let# (term.name) (term.expr) (term.body)
    use expr_res = bnd(Core.Comp.infer(term.expr)(defs)(ctx))
    let expr_var = Core.ann(Bool.true)(term.expr)(typ(expr_res))
    let body_ctx = Nat.succ(ctx)
    use body_res = bnd(Core.Comp.check(term.body(expr_var))(type)(defs)(Nat.succ(ctx)))
    let comp     = Comp.let(term.name)(cmp(expr_res))(cmp(body_res))
    let type     = typ(body_res)
    ret(par(comp)(type));
  |#ann# () () ()
    Core.Comp.check(term)(type)(defs)(ctx);
