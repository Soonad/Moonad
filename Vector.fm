T Vector <A: Type>                       ~ (len: Nat)
| nil                                    ~ (Nat.zero);
| ext<len: Nat>(x: A, xs: Vector(A,len)) ~ (Nat.succ(len));

Vector.len_0_is_nil(vec: Vector(Nat, Nat.zero)) : Equal()(vec)(Vector.nil<Nat>)
  case vec:
  with e : Equal(Nat, vec.len, Nat.zero) = Equal.to<Nat, Nat.zero>;
  | def P0 = ((x) Vector(Nat)(Nat.zero)) :: Nat -> Type
    def x0 = Equal.rewrite<><><><P0>(e, Vector.nil<Nat>)
    Equal.to<Vector(Nat, Nat.zero)><x0>;
  | Empty.absurd(Nat.succ_isnt_zero(vec.len, e), _);
  : def P0 = ((x) Vector(Nat)(x)) :: Nat -> Type
    def P1 = ((x) Vector(Nat)(Nat.zero)) :: Nat -> Type
    let x0 = Equal.rewrite<><vec.len><Nat.zero><P0>(e, vec.self)
    let x1 = Equal.rewrite<><vec.len><Nat.zero><P1>(e, Vector.nil<Nat>)
    Equal()(x0)(x1);

Vector.len<A: Type, len: Nat>(xs: Vector(A,len)) : Nat
  xs<() () Nat>
  | Nat.zero;
  | <len> (x,xs) Nat.succ(Vector.len<A,len>(xs));
