TaelinArena.Game.use_shields:
  (buff: TaelinArena.Game.Buff) ->
  (acc: Pair(F64)(List(TaelinArena.Game.Buff))) ->
  Pair(F64)(List(TaelinArena.Game.Buff))
  (buff) (acc)
  acc<() Pair(F64)(List(TaelinArena.Game.Buff))> 
  | (acc.fst) (acc.snd)
    buff<() Pair(F64)(List(TaelinArena.Game.Buff))>
    | #shielded# (buff.dur) (buff.val)
      Bool.if<Pair(F64)(List(TaelinArena.Game.Buff))>(F64.eql(acc.fst)(F64.0)) 
      | acc; // no damage
      | let compare = F64.compare_numbers(acc.fst)(buff.val)
        compare<() Pair(F64)(List(TaelinArena.Game.Buff))>
        | // LT
          let remaining_shield_val = F64.sub(buff.val)(acc.fst) 
          let remaining_buf = 
            List.cons<TaelinArena.Game.Buff>
            | TaelinArena.Game.Buff.shielded(buff.dur)(remaining_shield_val);
            | acc.snd;
          Pair.new<F64><List(TaelinArena.Game.Buff)>(F64.0)(remaining_buf);
        | // EQ
          Pair.new<F64><List(TaelinArena.Game.Buff)>(F64.0)(acc.snd);
        | // GT
          let remaining_dmg = F64.sub(acc.fst)(buff.val)
          Pair.new<F64><List(TaelinArena.Game.Buff)>(remaining_dmg)(acc.snd);
      ;
  ;
  | #slowed# (buff.dur) (buff.val) 
    Pair.new<F64><List(TaelinArena.Game.Buff)>
    | acc.fst; 
    | List.cons<TaelinArena.Game.Buff>(buff)(acc.snd);;
  | #hasted# (buff.dur) (buff.val)
    Pair.new<F64><List(TaelinArena.Game.Buff)>
    | acc.fst; 
    | List.cons<TaelinArena.Game.Buff>(buff)(acc.snd);;
  | #silenced# (buff.dur)
    Pair.new<F64><List(TaelinArena.Game.Buff)>
    | acc.fst; 
    | List.cons<TaelinArena.Game.Buff>(buff)(acc.snd);;
  | #rooted# (buff.dur)
    Pair.new<F64><List(TaelinArena.Game.Buff)>
    | acc.fst; 
    | List.cons<TaelinArena.Game.Buff>(buff)(acc.snd);;
  | #stuned# (buff.dur)
    Pair.new<F64><List(TaelinArena.Game.Buff)>
    | acc.fst; 
    | List.cons<TaelinArena.Game.Buff>(buff)(acc.snd);;
  ;

// use_shields(buff: Buff, acc: Pair(Number, List(Buff))) : Pair(Number, List(Buff))
//   case acc |pair 
//   case buff
//   | shielded => 
//     if acc.fst === 0 then // no damage
//       acc 
//     else 
//       case compare_numbers(acc.fst, buff.val) as res  
//       | LT => 
//         let remaining_shield_val = buff.val - acc.fst 
//         let remaining_buf = cons(_ shielded(buff.dur, remaining_shield_val), acc.snd)
//         pair(__ 0, remaining_buf)

//       | EQ => pair(__ 0, acc.snd)
//       | GT => 
//         let remaining_dmg = acc.fst - buff.val 
//         pair(__ remaining_dmg, acc.snd)

//   | slowed   => pair(__ acc.fst, cons(_ buff, acc.snd)) 
//   | hasted   => pair(__ acc.fst, cons(_ buff, acc.snd)) 
//   | silenced => pair(__ acc.fst, cons(_ buff, acc.snd))
//   | rooted   => pair(__ acc.fst, cons(_ buff, acc.snd))
//   | stuned   => pair(__ acc.fst, cons(_ buff, acc.snd))