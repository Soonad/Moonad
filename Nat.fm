T Nat
| zero;
| succ(pred: Nat);

Nat.add(n: Nat, m: Nat): Nat
  case n:
  | m;
  | Nat.succ(Nat.add(n.pred, m));

Nat.apply.go<A: Type>(n: Nat, f: A -> A, x: A): A
  case n:
  | x;
  | Nat.apply.go<A>(n.pred, f, f(x));

Nat.apply: <A: Type> -> (n: Nat, f: A -> A, x: A) -> A
  Nat.apply.go

Nat.cmp(a: Nat, b: Nat): Cmp
  case a:
  | case b:
    | Cmp.eql;
    | Cmp.ltn;;
  | case b:
    | Cmp.gtn;
    | Nat.cmp(a.pred, b.pred);;

Nat.sub(n: Nat, m: Nat): Nat
  case m:
  | n;
  | case n:
    | Nat.zero;
    | Nat.sub(n.pred, m.pred);;

Nat.sub_rem(n: Nat, m: Nat): Either(Nat, Nat)
  case m:
  | Either.left<_,_>(n);
  | case n:
    | Either.right<_,_>(Nat.succ(m.pred));
    | Nat.sub_rem(n.pred, m.pred);;

Nat.div(n: Nat, m: Nat): Nat
  Pair.fst<_,_>(Nat.div_mod(n, m))

Nat.div_mod.aux(n: Nat, m: Nat, d: Nat): Pair(Nat, Nat)
  let p = Nat.sub_rem(n,m)
  case p:
  | Nat.div_mod.aux(p.value,m,Nat.succ(d));
  | Pair.new<_,_>(d,n);

Nat.div_mod(n: Nat, m: Nat): Pair(Nat, Nat)
  Nat.div_mod.aux(n,m,Nat.zero)

Nat.double(n: Nat): Nat
  case n:
  | Nat.zero;
  | Nat.succ(Nat.succ(Nat.double(n.pred)));

Nat.ltn(n: Nat, m: Nat): Bool
  case Nat.cmp(n, m):
  | Bool.true;
  | Bool.false;
  | Bool.false;

Nat.lte(n: Nat, m: Nat): Bool
  case Nat.cmp(n, m):
  | Bool.true;
  | Bool.true;
  | Bool.false;

Nat.eql(n: Nat, m: Nat): Bool
  case Nat.cmp(n, m):
  | Bool.false;
  | Bool.true;
  | Bool.false;

Nat.gte(n: Nat, m: Nat): Bool
  case Nat.cmp(n, m):
  | Bool.false;
  | Bool.true;
  | Bool.true;

Nat.gtn(n: Nat, m: Nat): Bool
  case Nat.cmp(n, m):
  | Bool.false;
  | Bool.false;
  | Bool.true;

Nat.induction(n: Nat): <P: Nat -> Type> -> (z: P(Nat.zero)) -> (s: ((m:Nat) -> P(m) -> P(Nat.succ(m)))) -> P(n)
  <P> (z) (s) n<P>(z, (pred) s(pred, Nat.induction(pred)<P>(z, s)))

Nat.is_zero(n: Nat): Bool
  case n:
  | Bool.true;
  | Bool.false;

Nat.mod(n: Nat, m: Nat): Nat
  Pair.snd<Nat,Nat>(Nat.div_mod(n,m))

Nat.mul(n: Nat, m: Nat): Nat
  case n:
  | Nat.zero;
  | Nat.add(m, Nat.mul(n.pred, m));

//TODO: error on misformatted Nat
Nat.parse_decimal(str: String): Nat
  Nat.parse_decimal.go(str, Nat.zero)

Nat.parse_decimal.go(str: String, res: Nat): Nat
  case str:
  | res;
  | let dig = Nat.sub(U16.to_nat(str.head), 48)
    let res = Nat.add(dig, Nat.mul(10, res))
    Nat.parse_decimal.go(str.tail, res);

Nat.pred(n: Nat): Nat
  case n:
  | Nat.zero;
  | n.pred;

//Nat.solve_for: (x: Nat) -> <E: (x: Nat) -> Type> -> <P: E(x)> -> Nat
  //(x) <E> <P> x

Nat.succ_isnt_zero(n: Nat, e: Equal(Nat, Nat.succ(n), Nat.zero)): Empty
  def P = ((x) case x: | Empty; | Unit;) :: Nat -> Type
  Equal.rewrite<Nat, Nat.succ(n), Nat.zero, P>(e, Unit.new)

Nat.sum(n: Nat): Nat
  Nat.sum.go(n, Nat.zero)

Nat.sum.go(n: Nat , r: Nat): Nat //loop//
  case n:
  | r;
  | Nat.sum.go(n.pred, Nat.add(n, r));

Nat.to_base(base: Nat, nat: Nat): List(Nat)
  Nat.to_base.go(base, nat, List.nil<Nat>)

Nat.to_base.go(base: Nat, nat: Nat, res: List(Nat)): List(Nat) //loop//
  get d m = Nat.div_mod(nat, base)
  case d:
  | List.cons<>(m,res);
  | Nat.to_base.go(base,d,List.cons<>(m,res));

Nat.pow(base: Nat, exp: Nat) : Nat
  case exp:
  | 1;
  | Nat.mul(base,Nat.pow(base,exp.pred));

Nat.from_base(base: Nat, ds: List(Nat)) : Nat
  Nat.from_base.go(base,List.reverse<>(ds),1,0)

Nat.from_base.go(b: Nat, ds: List(Nat), p: Nat, res : Nat) : Nat
  case ds:
  | res;
  | Nat.from_base.go(b,ds.tail,Nat.mul(b,p), Nat.add(Nat.mul(ds.head,p),res));

Nat.to_bits(n: Nat): Bits
  case n:
  | Bits.0(Bits.nil);
  | Bits.1(Nat.to_bits(n.pred));

Nat.to_string(n: Nat): String
  case n:
  | String.cons(Char.parse("z"), String.nil);
  | String.cons(Char.parse("s"), Nat.to_string(n.pred));

Nat.to_string_base(base: Nat, nat: Nat): String
  List.foldr<Nat, String>
  | String.nil;
  | (n) (str) String.cons(Nat.show_digit(base,n), str);
  | Nat.to_base(base, nat);

Nat.show_digit(base: Nat, n: Nat) : Char
  let m = Nat.mod(n,base)
  def base64 =
    ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
    ,'G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V'
    ,'W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l'
    ,'m','n','o','p','q','r','s','t','u','v','w','x','y','z','+','/'
    ]
  if Bool.and(Nat.gtn(base,0),Nat.lte(base,64)) then 
    case List.at<>(base64,m) as c:
    | '#';
    | c.value;
  else '#'

Nat.show(n: Nat): String
  Nat.to_string_base(10,n)
