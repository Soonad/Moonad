Core.to_bits.go: Core -> Nat -> Bool -> Bits -> Bits
  (term) (dep) (hash)
  term<() Bits -> Bits>
  | (name) (indx) (flip) (x) 
    let indx
      = flip<() Bits>
      | Nat.to_bits(Nat.sub(indx)(Nat.succ(dep)));
      | Nat.to_bits(indx);
    Bits.0(Bits.0(Bits.0(Bits.0(Bits.concat(indx)(x)))));
  | (name) (x) Bits.0(Bits.0(Bits.1(Bits.concat(String.to_bits(name))(x))));
  | (x) Bits.0(Bits.1(Bits.0(x)));
  | (eras) (self) (name) (bind) (body) (x)
    let bind = Core.to_bits.go(bind)(dep)(hash)
    let body = Core.to_bits.go
      | let svar = Core.var("")(dep)(hash)
        let nvar = Core.var("")(Nat.succ(dep))(hash)
        body(svar)(nvar);
      | Nat.succ(Nat.succ(dep));
      | hash;
    Bits.0(Bits.1(Bits.1(bind(body(x)))));
  | (eras) (name) (body) (x)
    let nvar = Core.var("")(dep)(hash)
    let body = Core.to_bits.go(body(nvar))(Nat.succ(dep))(hash)
    Bits.1(Bits.0(Bits.0(body(x))));
  | (eras) (func) (argm) (x)
    let func = Core.to_bits.go(func)(dep)(hash)
    let argm = Core.to_bits.go(argm)(dep)(hash)
    Bits.1(Bits.0(Bits.1(func(argm(x)))));
  | (name) (expr) (body) (x)
    let nvar = Core.var("")(dep)(hash)
    let expr = Core.to_bits.go(expr)(dep)(hash)
    let body = Core.to_bits.go(body(nvar))(Nat.succ(dep))(hash)
    Bits.1(Bits.1(Bits.0(expr(body(x)))));
  | (done) (expr) (type) (x)
    hash<() Bits>
    | Core.to_bits.go(expr)(dep)(hash)(x);
    | let expr = Core.to_bits.go(expr)(dep)(hash)
      let type = Core.to_bits.go(type)(dep)(hash)
      Bits.1(Bits.1(Bits.1(expr(type(x)))));;
