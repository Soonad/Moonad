// with dependent types, we can reason that a successful parser returns an A
// and an unsuccessful parser returns a lifted Parsec.Error(E) value
// (`The` lifts the Parsec.Error into a type so we can see it at compile time)

Parsec.parse:
  <S : Type> ->
  <E : Type> ->
  <A: Type> ->
  (p: Parsec(S)(E)(A)) ->
  (s: Parsec.State(S)(E)) ->
  Parsec.type(S)(E)(A)(Parsec.run<S><E><A>(p)(s))

  <S> <E> <A> (p) (s)
  Parsec.run<S><E><A>(p)(s)<(t) Parsec.type(S)(E)(A)(t)>
  | () (x) x;
  | () (e) e;
  | () (x) x;
  | () (e) e;


