F64.V3.polygon_to_segments.cons: 
  F64.V3 -> //pos
  F64.V3 -> //dir
  F64.V3 -> //pt_b
  (Maybe(F64.V3) -> Maybe(F64.V3) -> List(F64.Segment)) -> //segs
  Maybe(F64.V3) -> //pt_a
  Maybe(F64.V3) -> //pt_0
  List(F64.Segment)

  (pos) (dir) (pt_b) (segs) (pt_a) (pt_0)
  pt_a<() List(F64.Segment)>
  | segs(Maybe.some<F64.V3>(pt_b))(Maybe.some<F64.V3>(pt_b));
  | (pt_a.value)
    let pt_0 = 
    pt_0<() Maybe(F64.V3)> 
    | Maybe.some<F64.V3>(pt_b); 
    | (pt_0.value) pt_0;
    let p0 = F64.V3.polygon_to_segments.transform(pos)(dir)(pt_a.value)
    let p1 = F64.V3.polygon_to_segments.transform(pos)(dir)(pt_b)
    let sg = F64.Segment.new(p0)(p1)
    List.cons<F64.Segment>(sg)(segs(Maybe.some<F64.V3>(pt_b))(pt_0));  

//   let cons = (pt_b, segs, pt_a, pt_0) =>
//     case pt_a
//     with pt_b : V3
//     with pt_0 : Maybe(V3)
//     |none =>
//       segs(some(_ pt_b), some(_ pt_b))
//     |some =>
//       let pt_0 = case pt_0 |none some(_ pt_b) |some pt_0
//       let p0 = transform(pt_a.value)
//       let p1 = transform(pt_b)
//       let sg = segment(p0, p1)
//       cons(_ sg, segs(some(_ pt_b), pt_0))
