// An example of optimal reduction asymptotics.
// Applies the `not` function 2^32+1 times to a boolean.
// Returns instantly on inets, takes forever on other runtimes.
// Try with: fmcx A.optimal_reduction
A.optimal_reduction: Bool
  def Nat = <P: Type> -> (P -> P) -> P -> P
  let suc = ((n) <P> (s) (z) s(n<P>(s)(z))) :: Nat -> Nat
  let zer = (<P> (s) (z) z) :: Nat
  let mul = ((a) (b) <P> (s) a<P>(b<P>(s))) :: Nat -> Nat -> Nat
  let n0  = zer
  let n1  = suc(n0)
  let n2  = suc(n1)
  let p0  = n1
  let p1  = mul(p0)(n2)
  let p2  = mul(p1)(n2)
  let p3  = mul(p2)(n2)
  let p4  = mul(p3)(n2)
  let p5  = mul(p4)(n2)
  let p6  = mul(p5)(n2)
  let p7  = mul(p6)(n2)
  let p8  = mul(p7)(n2)
  let p9  = mul(p8)(n2)
  let p10 = mul(p9)(n2)
  let p11 = mul(p10)(n2)
  let p12 = mul(p11)(n2)
  let p13 = mul(p12)(n2)
  let p14 = mul(p13)(n2)
  let p15 = mul(p14)(n2)
  let p16 = mul(p15)(n2)
  let p17 = mul(p16)(n2)
  let p18 = mul(p17)(n2)
  let p19 = mul(p18)(n2)
  let p20 = mul(p19)(n2)
  let p21 = mul(p20)(n2)
  let p22 = mul(p21)(n2)
  let p23 = mul(p22)(n2)
  let p24 = mul(p23)(n2)
  let p25 = mul(p24)(n2)
  let p26 = mul(p25)(n2)
  let p27 = mul(p26)(n2)
  let p28 = mul(p27)(n2)
  let p29 = mul(p28)(n2)
  let p30 = mul(p29)(n2)
  let p31 = mul(p30)(n2)
  let p32 = mul(p31)(n2)
  // Applies the `not` function 2^32+1 times to Bool.true
  suc(p32)<Bool>(Bool.notf)(Bool.true)
