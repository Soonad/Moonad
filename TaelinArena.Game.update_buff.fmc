// Update a stt_key until the value associated to it ends. Used along with will_set_buff
// - self: thing with stt (usually character)
// - stt_key: the key in the stt map
TaelinArena.Game.update_buff
  : TaelinArena.Game.Thing ->
    Bits ->
    TaelinArena.Game.Thing
  (self) (stt_key)
  let stt = TaelinArena.Game.get_thing_stt(self)
  let curr_tik = Map.get<F64>(stt_key)(stt)
  curr_tik<() TaelinArena.Game.Thing>
  | self;
  | (curr_tik.value)
    F64.eql(curr_tik.value)(F64.0)<() TaelinArena.Game.Thing>
    | self;
    | F64.gtn(curr_tik.value)(F64.0)<() TaelinArena.Game.Thing>
      | let new_tik = F64.sub(curr_tik.value)(F64.1)
        let new_stt = Map.set<F64>(stt_key)(new_tik)(stt)
        TaelinArena.Game.set_thing_stt(self)(new_stt);
      | self;;; 

// update_buff(self: Thing, stt_key: Bits) : Thing
//   case self |thing
//     let current_tik = lookup(_ stt_key, self.stt)
//     case current_tik
//     | none => self
//     | some => 
//       if current_tik.value === 0
//       then self <= thing(stt=insert(_ stt_key, 0, self.stt))
//       else 
//         let new_stt = insert(_ stt_key, if current_tik.value > 0 then current_tik.value - 1 else 0, self.stt)
//         self <= thing(stt = new_stt)
