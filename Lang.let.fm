Lang.let: Parser(Core.Ctx -> Core)
  def C = Core.Ctx -> Core
  Parser.then<String><C>(Lang.symbol("let"))   |
  Parser.bind<String><C>(Lang.nam(Bool.false)) | (name)
  Parser.then<Unit  ><C>(Lang.space)           |
  Parser.then<String><C>(Lang.symbol("="))     |
  Parser.bind<C     ><C>(Lang.trm)             | (expr)
  Parser.then<Unit  ><C>(Lang.space)           |
  Parser.then<Maybe(String)><C>
  | Parser.optional<String>(Lang.symbol(";")); |
  Parser.bind<C     ><C>(Lang.trm)             | (body)
  Parser.pure<C>
  | (ctx)
    let tbody = ((x) body(Core.Ctx.ext(name)(x)(ctx))) :: Core -> Core
    Core.let(name)(expr(ctx))(tbody);;;;;;;;;
