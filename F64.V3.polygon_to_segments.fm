F64.V3.polygon_to_segments: 
  F64.V3 -> 
  F64.V3 -> 
  List(F64.V3) -> 
  List(F64.Segment)
  (pos) (dir) (pts)
  List.fold<F64.V3><Maybe(F64.V3) -> Maybe(F64.V3) -> List(F64.Segment)>
  |F64.V3.polygon_to_segments.nil(pos)(dir);
  |F64.V3.polygon_to_segments.cons(pos)(dir);
  |pts;
  |Maybe.none<F64.V3>;
  |Maybe.none<F64.V3>;


// Polygon to segments
// polygon_to_segments(pos: V3, dir: V3, pts: List(V3)) : List(Segment)
//   let transform = (pnt: V3) =>
//     case pnt |v3
//     case dir |v3
//     let a = atan(dir.y, dir.x)
//     let x = (pnt.x * cos(a)) - (pnt.y * sin(a))
//     let y = (pnt.x * sin(a)) + (pnt.y * cos(a))
//     let z = pnt.z
//     add_v3(pos, v3(x,y,z))
//   let nil = (pt_a, pt_0) =>
//     case pt_0
//     |none => nil(_)
//     |some => case pt_a
//       |none => nil(_)
//       |some =>
//         let p0 = transform(pt_a.value)
//         let p1 = transform(pt_0.value)
//         let sg = segment(p0, p1)
//         cons(_ sg, nil(_))
//   let cons = (pt_b, segs, pt_a, pt_0) =>
//     case pt_a
//     with pt_b : V3
//     with pt_0 : Maybe(V3)
//     |none =>
//       segs(some(_ pt_b), some(_ pt_b))
//     |some =>
//       let pt_0 = case pt_0 |none some(_ pt_b) |some pt_0
//       let p0 = transform(pt_a.value)
//       let p1 = transform(pt_b)
//       let sg = segment(p0, p1)
//       cons(_ sg, segs(some(_ pt_b), pt_0))
//   fold(V3; Maybe(V3) -> Maybe(V3) -> List(Segment);
//     nil, cons, pts, none(_), none(_))
