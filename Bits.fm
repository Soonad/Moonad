T Bits
| nil;
| b0(pred: Bits);
| b1(pred: Bits);

Bits.0: Bits -> Bits
  Bits.b0

Bits.1: Bits -> Bits
  Bits.b1

Bits.concat(a: Bits, b: Bits): Bits
  case a:
  | b;
  | Bits.0(Bits.concat(a.pred, b));
  | Bits.1(Bits.concat(a.pred, b));

Bits.eql(a: Bits, b: Bits): Bool
  case a:
  | case b:
    | Bool.true;
    | Bool.false;
    | Bool.false;;
  | case b:
    | Bool.false;
    | Bits.eql(a.pred, b.pred);
    | Bool.false;;
  | case b:
    | Bool.false;
    | Bool.false;
    | Bits.eql(a.pred, b.pred);;
  
Bits.from_string(str: String): Bits
  case str:
  | Bits.nil;
  | case U16.eql(str.head, Char.parse("1")):
    | Bits.1(Bits.from_string(str.tail));
    | Bits.0(Bits.from_string(str.tail));
    | Unit.new;;

Bits.inc(a: Bits): Bits
  case a:
  | Bits.nil;
  | Bits.1(a.pred);
  | Bits.0(Bits.inc(a.pred));

Bits.parse_hex: String -> Bits
  (str) Bits.parse_hex.tco(str)(Bits.nil)

Bits.parse_hex.tco(str: String, res: Bits): Bits
  case str:
  | res;
  | let b0000 = Bits.0(Bits.0(Bits.0(Bits.0(Bits.nil))))
    let bhead = Nat.apply<Bits>(Char.hex_value(str.head), Bits.inc, b0000)
    Bits.parse_hex.tco(str.tail, Bits.concat(bhead, res));

// Reverses a bistring.
Bits.reverse(a: Bits): Bits
  Bits.reverse.tco(a, Bits.nil)

Bits.reverse.tco(a: Bits, r: Bits): Bits
  case a:
  | r;
  | Bits.reverse.tco(a.pred, Bits.0(r));
  | Bits.reverse.tco(a.pred, Bits.1(r));
