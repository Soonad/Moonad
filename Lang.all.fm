Lang.all: Parsec(Core.Ctx -> Core)
  def Bnd = Core.Ctx -> Core
  def Ret = Pair(Text)(Bnd)
  Parsec.bind<Text><Bnd>(Lang.nam(Bool.true)) | (self)
  Parsec.bind<Pair(Bool)(Ret)><Bnd>
  | use   = Lang.enclose<Ret>
    use n = Parsec.bind<Text><Ret>(Lang.nam(Bool.true))
    use   = Parsec.then<Unit><Ret>(Lang.space)
    use   = Parsec.then<Text><Ret>(Lang.symbol(":"))
    use t = Parsec.bind<Bnd ><Ret>(Lang.trm)
    Parsec.pure<Ret>(Pair.new<Text><Bnd>(n)(t));
  | (x)
    use eras p    = x<() Parsec(Bnd)>
    use name bind = p<() Parsec(Bnd)>
    use           = Parsec.then<Unit><Bnd>(Lang.space)
    use           = Parsec.then<Text><Bnd>(Lang.symbol("->"))
    use body      = Parsec.bind<Bnd><Bnd>(Lang.trm)
    use ctx       = Parsec.pure<Bnd>
    let tbind     = bind(ctx)
    let tbody     = ((s) (x) body
                  | Core.Ctx.ext(name)(x)
                  | Core.Ctx.ext(self)(s)(ctx);;)
                  :: Core -> Core -> Core
    Core.all(eras)(self)(name)(tbind)(tbody);;

