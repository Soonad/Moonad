// We compare two states and return the one farthest from the start of the input

Parsec.State.longest_match: Parsec.State -> Parsec.State -> Parsec.State
  (x) (y)
  x<() Parsec.State> | (x.input) (x.index) (x.error)
  y<() Parsec.State> | (y.input) (y.index) (y.error)
  Nat.cmp(x.index)(y.index)<() Parsec.State>(y)(x)(x);;

