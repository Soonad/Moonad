// We compare two states and return the one farthest from the start of the input

Parsec.State.longest_match:
  <S: Type> ->
  <E: Type> ->
  Parsec.State(S)(E) ->
  Parsec.State(S)(E) ->
  Parsec.State(S)(E)

  <S> <E> (x) (y)
  x<() Parsec.State(S)(E)> | (x.input) (x.index) (x.error) (x.state)
  y<() Parsec.State(S)(E)> | (y.input) (y.index) (y.error) (y.state)
  Nat.cmp(x.index)(y.index)<() Parsec.State(S)(E)>
  | y;
  | x;
  | x;;;

