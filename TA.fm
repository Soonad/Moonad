//TA.Constants.ONE_SEC: F64
  //F64.parse("24")

//TA.Constants.POS_X_KEY : Bits
  //// 01011101b
  //(Bits.0(Bits.0(Bits.0(Bits.1(Bits.1(Bits.1(Bits.0(Bits.1(Bits.nil)))))))))
//TA.Constants.POS_Y_KEY : Bits
  //// 01110101b
  //(Bits.0(Bits.1(Bits.1(Bits.1(Bits.0(Bits.1(Bits.0(Bits.1(Bits.nil)))))))))
//TA.Game.ActionId : Type
  //F64

//// Formality
//// ---------
//// T Buff
//// | shielded(dur: Number, val: Number) // shields are hit before hp
//// | slowed(dur: Number, val: Number) // slow down
//// | hasted(dur: Number, val: Number) // speed up
//// | silenced(dur: Number) 
//// | rooted(dur: Number)
//// | stuned(dur: Number)

//TA.Game.Buff : Type
  //buff<P: TA.Game.Buff -> Type > -> 
  //(shielded: 
    //(dur: F64) -> 
    //(val: F64) -> 
    //P(TA.Game.Buff.shielded(dur)(val)) ) -> 
  //(slowed: 
    //(dur: F64) -> 
    //(val: F64) -> 
    //P(TA.Game.Buff.slowed(dur)(val)) ) -> 
  //(hasted: 
    //(dur: F64) ->
    //(val: F64) -> 
    //P(TA.Game.Buff.hasted(dur)(val)) ) -> 
  //(silenced: 
    //(dur: F64) -> 
    //P(TA.Game.Buff.silenced(dur)) ) -> 
  //(rooted: 
    //(dur: F64) -> 
    //P(TA.Game.Buff.rooted(dur)) ) -> 
  //(stuned: 
    //(dur: F64) -> 
    //P(TA.Game.Buff.stuned(dur)) ) -> 
  //P(buff)




//TA.Game.Buff.hasted: F64 -> F64 -> TA.Game.Buff 
  //(dur) (val)
  //<P> (shielded) (slowed) (hasted) (silenced) (rooted) (stuned)
  //hasted(dur)(val)
  
//TA.Game.Buff.rooted: F64 -> TA.Game.Buff 
  //(dur)
  //<P> (shielded) (slowed) (hasted) (silenced) (rooted) (stuned)
  //rooted(dur)

//TA.Game.Buff.shielded: F64 -> F64 -> TA.Game.Buff 
  //(dur) (val)
  //<P> (shielded) (slowed) (hasted) (silenced) (rooted) (stuned)
  //shielded(dur)(val)
  
//TA.Game.Buff.silenced: F64 -> TA.Game.Buff 
  //(dur)
  //<P> (shielded) (slowed) (hasted) (silenced) (rooted) (stuned)
  //silenced(dur)
  
//TA.Game.Buff.slowed: F64 -> F64 -> TA.Game.Buff 
  //(dur) (val)
  //<P> (shielded) (slowed) (hasted) (silenced) (rooted) (stuned)
  //slowed(dur)(val)
  
//TA.Game.Buff.stuned: F64 -> TA.Game.Buff 
  //(dur)
  //<P> (shielded) (slowed) (hasted) (silenced) (rooted) (stuned)
  //stuned(dur)
  

//// Formality
//// ---------
//// T Command
//// | command(pid: PlayerId, inp: Input)

//TA.Game.Command : Type
  //command<P: TA.Game.Command -> Type> ->
  //(new: 
    //(pid: TA.Game.PlayerId) -> 
    //(inp: TA.Game.Input) -> 
    //P(TA.Game.Command.new(pid)(inp)) ) ->
  //P(command)

//TA.Game.Command.new
  //: TA.Game.PlayerId -> 
    //TA.Game.Input    -> 
    //TA.Game.Command
  //(pid) (inp)
  //<P> (new)
  //new(pid)(inp)
  
//TA.Game.Constants.DARTH_VADER_USING_FORCE : Bits 
  //Bits.from_string("0101100001")
//TA.Game.Constants.FORCE_AWAKENS_KEY : Bits 
  //Bits.from_string("01101101")
//TA.Game.Constants.GON_AFTER_ULT : Bits 
  //Bits.from_string("001101111010")
//TA.Game.Constants.MANDO_WEAPON_KEY : Bits 
  //Bits.from_string("001101111010")
//TA.Game.Constants.STEVE_BLOCK_TIMER : Bits 
  //Bits.from_string("000")
//TA.Game.Constants.STEVE_TNT_TIMER : Bits 
  //Bits.from_string("001")
//TA.Game.Constants.ULT_TIME : Bits 
  //Bits.from_string("1001010110")
//TA.Game.Effect.damage: F64 -> TA.Game.Effect
  //(dmg) 
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //damage(dmg)
  
//// Formality
//// ---------
//// T Effect
//// | heal(lif: Number)
//// | damage(dmg: Number)
//// | repulse(mag: Number)
//// | impulse(mag: Number, dir: V3)
//// | slow(dur: Number, val: Number)
//// | haste(dur: Number, val: Number)
//// | shield(dur: Number, val: Number)
//// | silence(dur: Number)
//// | root(dur: Number)
//// | stun(dur: Number)
//// | teleport(to_pos: V3, all: Number)

//TA.Game.Effect : Type 
  //effect<P: TA.Game.Effect -> Type> -> 
  //(heal: 
    //(lif: F64) -> 
    //P(TA.Game.Effect.heal(lif)) ) ->
  //(damage: 
    //(dmg: F64) -> 
    //P(TA.Game.Effect.damage(dmg)) ) ->
  //(repulse: 
    //(mag: F64) -> 
    //P(TA.Game.Effect.repulse(mag)) ) ->
  //(impulse: 
    //(mag: F64)    -> 
    //(dir: F64.V3) -> 
    //P(TA.Game.Effect.impulse(mag)(dir)) ) ->
  //(slow: 
    //(dur: F64) -> 
    //(val: F64) -> 
    //P(TA.Game.Effect.slow(dur)(val)) ) ->
  //(haste: 
    //(dur: F64) -> 
    //(val: F64) -> 
    //P(TA.Game.Effect.haste(dur)(val)) ) ->
  //(shield: 
    //(dur: F64) -> 
    //(val: F64) -> 
    //P(TA.Game.Effect.shield(dur)(val)) ) ->
  //(silence: 
    //(dur: F64) -> 
    //P(TA.Game.Effect.silence(dur)) ) ->
  //(root: 
    //(dur: F64) -> 
    //P(TA.Game.Effect.root(dur)) ) ->
  //(stun: 
    //(dur: F64) -> 
    //P(TA.Game.Effect.stun(dur)) ) ->
  //(teleport: 
    //(to_pos: F64.V3) -> 
    //(all: F64)       -> 
    //P(TA.Game.Effect.teleport(to_pos)(all)) ) ->
  //P(effect)
  




//TA.Game.Effect.haste: F64 -> F64 -> TA.Game.Effect
  //(dur) (val)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //haste(dur)(val)
  
//TA.Game.Effect.heal: F64 -> TA.Game.Effect
  //(lif)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //heal(lif)
  
//TA.Game.Effect.impulse: F64 -> F64.V3 -> TA.Game.Effect
  //(mag) (dir)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //impulse(mag)(dir)
  
//TA.Game.Effect.repulse: F64 -> TA.Game.Effect
  //(mag)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //repulse(mag)
  
//TA.Game.Effect.root: F64 -> TA.Game.Effect
  //(dur)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //root(dur)
  
//TA.Game.Effect.shield: F64 -> F64 -> TA.Game.Effect
  //(dur) (val)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //shield(dur)(val)
  
//TA.Game.Effect.silence: F64 -> TA.Game.Effect
  //(dur)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //silence(dur)
  
//TA.Game.Effect.slow: F64 -> F64 -> TA.Game.Effect
  //(dur) (val)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //slow(dur)(val)
  
//TA.Game.Effect.stun: F64 -> TA.Game.Effect
  //(dur)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //stun(dur)
  
//TA.Game.Effect.teleport: F64.V3 -> F64 -> TA.Game.Effect
  //(to_pos) (all)
  //<P> (heal) (damage) (repulse) (impulse) (slow) (haste) (shield) (silence) (root) (stun) (teleport)
  //teleport(to_pos)(all)
  
//// Formality
//// ---------
//// T Game
//// | game(stage : List(Thing))

//TA.Game.Game : Type
  //game<P: TA.Game.Game -> Type> -> 
  //(new: 
    //(stage: List(TA.Thing)) -> 
    //P(TA.Game.Game.new(stage)) ) ->
  //P(game)

//TA.Game.Game.new: List(TA.Thing) -> TA.Game.Game
  //(stage)
  //<P> (new)
  //new(stage)

//// Formality
//// ---------
//// T Hit
//// | hit(eff: List(Effect), pos: V3, dir: V3, box: Hitbox)

//TA.Game.Hit : Type
  //hit<P: TA.Game.Hit -> Type> ->
  //(new: 
    //(eff: List(TA.Game.Effect)) -> 
    //(pos: F64.V3) -> 
    //(dir: F64.V3) -> 
    //(box: TA.Game.Hitbox) -> 
    //P(TA.Game.Hit.new(eff)(pos)(dir)(box))) ->
  //P(hit) 

//TA.Game.Hit.new
  //: List(TA.Game.Effect) -> 
    //F64.V3 -> 
    //F64.V3 -> 
  //TA.Game.Hitbox -> 
  //TA.Game.Hit
  //(eff) (pos) (dir) (box)
  //<P> (new)
  //new(eff)(pos)(dir)(box)

//TA.Game.Hitbox.cbox: F64 -> TA.Game.Hitbox
  //(rad)
  //<P> (nbox) (cbox) (pbox)
  //cbox(rad)
  
//// Formality
//// ---------
//// T Hitbox
//// | nbox
//// | cbox(rad: Number)
//// | pbox(pts: List(V3))

//TA.Game.Hitbox : Type
  //hitbox<P: TA.Game.Hitbox -> Type> ->
  //(nbox: P(TA.Game.Hitbox.nbox)) -> 
  //(cbox: (rad: F64) -> P(TA.Game.Hitbox.cbox(rad))) -> 
  //(pbox: (pts: List(F64.V3)) -> P(TA.Game.Hitbox.pbox(pts))) -> 
  //P(hitbox)

//TA.Game.Hitbox.nbox: TA.Game.Hitbox
  //<P> (nbox) (cbox) (pbox)
  //nbox
  
//TA.Game.Hitbox.pbox: List(F64.V3) -> TA.Game.Hitbox
  //(pts)
  //<P> (nbox) (cbox) (pbox)
  //pbox(pts)
  
//TA.Game.Input.cmsg: String -> TA.Game.Input
  //(txt)
  //<P> (sdir) (key0) (key1) (key2) (key3) (key4) (key5) (cmsg)
  //cmsg(txt)

//TA.Game.Input : Type
  //input<P: TA.Game.Input -> Type> ->
  //(sdir: (dir: F64.V3) -> P(TA.Game.Input.sdir(dir)) ) ->
  //(key0: (pos: F64.V3) -> P(TA.Game.Input.key0(pos)) ) ->
  //(key1: (pos: F64.V3) -> P(TA.Game.Input.key1(pos)) ) ->
  //(key2: (pos: F64.V3) -> P(TA.Game.Input.key2(pos)) ) ->
  //(key3: (pos: F64.V3) -> P(TA.Game.Input.key3(pos)) ) ->
  //(key4: (pos: F64.V3) -> P(TA.Game.Input.key4(pos)) ) ->
  //(key5: (pos: F64.V3) -> P(TA.Game.Input.key5(pos)) ) ->
  //(cmsg: (txt: String) -> P(TA.Game.Input.cmsg(txt)) ) ->
  //P(input)
  
//// T Input
//// | sdir(dir: V3) // stick direction
//// | key0(pos: V3) // left down
//// | key1(pos: V3) // middle down
//// | key2(pos: V3) // right down
//// | key3(pos: V3) // space down
//// | key4(pos: V3) // extra down
//// | key5(pos: V3) // shift down
//// | cmsg(txt: String) // chat message

//TA.Game.Input.key0: F64.V3 -> TA.Game.Input
  //(pos)
  //<P> (sdir) (key0) (key1) (key2) (key3) (key4) (key5) (cmsg)
  //key0(pos)
  
//TA.Game.Input.key1: F64.V3 -> TA.Game.Input
  //(pos)
  //<P> (sdir) (key0) (key1) (key2) (key3) (key4) (key5) (cmsg)
  //key1(pos)
  
//TA.Game.Input.key2: F64.V3 -> TA.Game.Input
  //(pos)
  //<P> (sdir) (key0) (key1) (key2) (key3) (key4) (key5) (cmsg)
  //key2(pos)
  
//TA.Game.Input.key3: F64.V3 -> TA.Game.Input
  //(pos)
  //<P> (sdir) (key0) (key1) (key2) (key3) (key4) (key5) (cmsg)
  //key3(pos)
  
//TA.Game.Input.key4: F64.V3 -> TA.Game.Input
  //(pos)
  //<P> (sdir) (key0) (key1) (key2) (key3) (key4) (key5) (cmsg)
  //key4(pos)
  
//TA.Game.Input.key5: F64.V3 -> TA.Game.Input
  //(pos)
  //<P> (sdir) (key0) (key1) (key2) (key3) (key4) (key5) (cmsg)
  //key5(pos)
  
//TA.Game.Input.sdir: F64.V3 -> TA.Game.Input
  //(dir)
  //<P> (sdir) (key0) (key1) (key2) (key3) (key4) (key5) (cmsg)
  //sdir(dir)
  
//// Formality
//// ---------
//// T Light
//// | light(pos: V3, rad: Number, rng: Number, sub: V3, add: V3)

//TA.Game.Light : Type
  //light<P: TA.Game.Light -> Type> -> 
  //(new: 
    //(pos: F64.V3) -> 
    //(rad: F64) -> 
    //(rng: F64) -> 
    //(sub: F64.V3) -> 
    //(add: F64.V3) -> 
    //P(TA.Game.Light.new(pos)(rad)(rng)(sub)(add)) ) ->
  //P(light)


//TA.Game.Light.new
  //: F64.V3 -> 
    //F64    -> 
    //F64    -> 
    //F64.V3 -> 
    //F64.V3 -> 
    //TA.Game.Light
  //(pos) (rad) (rng) (sub) (add)
  //<P> (new)
  //new(pos)(rad)(rng)(sub)(add)
  

//TA.Game.ModelId : Type
  //F64
  
//TA.Game.PlayerId : Type
  //F64
  
//TA.Game.SideId : Type
  //F64
  
//TA.Game.TxFunction : Type
  //TA.Thing -> TA.Thing
  
//TA.Game.combine_mov_buffs: TA.Game.Buff -> F64 -> F64
  //(buff) (i)
  //buff<() F64>
  //| #shielded# (buff.dur) (buff.val) i;
  //| #slowed#   (buff.dur) (buff.val) F64.mul(i)(buff.val);
  //| #hasted#   (buff.dur) (buff.val) F64.mul(i)(buff.val);
  //| #silenced# (buff.dur)            i;
  //| #rooted#   (buff.dur)            F64.0;
  //| #stuned#   (buff.dur)            F64.0;

//// combine_mov_buffs(buff: Buff, i: Number) : Number
////   case buff 
////   | shielded => i 
////   | slowed   => i * buff.val
////   | hasted   => i * buff.val
////   | silenced => i 
////   | rooted   => 0 
////   | stuned   => 0

//// Gets the position of an object by its id
//TA.Game.get_position_by_pid:
  //TA.Game.PlayerId ->
  //TA.Game.Game     -> 
  //F64.V3 

  //(pid) (gm) 
  //TA.Thing.get_by_pid(pid)(gm)<() F64.V3>
  //| F64.V3.new(F64.0)(F64.0)(F64.0);
  //| (found)
    //TA.Thing.get_pos(found);

//// get_position_by_pid(pid: PlayerId, gs: Game) : V3
////   case get_thing_by_pid(pid, gs) as found
////   | none => v3(0,0,0)
////   | some => case found.value |thing found.value.pos


//// Sets a thing's act
//// init_act(this: Thing, new_act: Number, new_trg: V3) : Thing
////   this <= thing(
////     act = if act === 0 then new_act else act,
////     trg = if act === 0 then new_trg else trg,
////     tik = if act === 0 then 0 else tik)

//TA.Game.init_act
  //: (self: TA.Thing) ->
    //(new_act: F64) ->
    //(new_trg: F64.V3) ->
    //TA.Thing
  //(self) (new_act) (new_trg)
  //let self.act = TA.Thing.get_act(self)
  //let self.trg = TA.Thing.get_trg(self)
  //let self.tik = TA.Thing.get_tik(self)
  //let act_eql_0 = F64.eql(self.act)(F64.0)
  //// let new_act_aux = 
  //let self =
  //TA.Thing.set_act
  //| self;
  //| Bool.if<TA.Game.ActionId>(act_eql_0)
    //| new_act;
    //| self.act;;
  //let self =
  //TA.Thing.set_trg
  //| self;
  //| Bool.if<F64.V3>(act_eql_0)
    //| new_trg;
    //| self.trg;;
  //let self =
  //TA.Thing.set_tik
  //| self;
  //| Bool.if<F64>(act_eql_0)
    //| F64.0;
    //| self.tik;;
  //self
//TA.Game.map_stage
  //: (TA.Thing -> TA.Thing) ->
    //TA.Game.Game                     -> 
    //TA.Game.Game
  //(fn) (gm)
  //gm<() TA.Game.Game> | (gm.stage)
  //let new_stage = List.map<TA.Thing><TA.Thing>
  //|fn;
  //|gm.stage;
  //TA.Game.Game.new(new_stage);

//TA.Game.use_shields
  //: (buff: TA.Game.Buff)                 ->
    //(acc: Pair(F64)(List(TA.Game.Buff))) ->
    //Pair(F64)(List(TA.Game.Buff))
  //(buff) (acc)
  //acc<() Pair(F64)(List(TA.Game.Buff))> 
  //| (acc.fst) (acc.snd)
    //buff<() Pair(F64)(List(TA.Game.Buff))>
    //| #shielded# (buff.dur) (buff.val)
      //Bool.if<Pair(F64)(List(TA.Game.Buff))>(F64.eql(acc.fst)(F64.0)) 
      //| acc; // no damage
      //| let compare = F64.compare_numbers(acc.fst)(buff.val)
        //compare<() Pair(F64)(List(TA.Game.Buff))>
        //| // LT
          //let remaining_shield_val = F64.sub(buff.val)(acc.fst) 
          //let remaining_buf = 
            //List.cons<TA.Game.Buff>
            //| TA.Game.Buff.shielded(buff.dur)(remaining_shield_val);
            //| acc.snd;
          //Pair.new<F64><List(TA.Game.Buff)>(F64.0)(remaining_buf);
        //| // EQ
          //Pair.new<F64><List(TA.Game.Buff)>(F64.0)(acc.snd);
        //| // GT
          //let remaining_dmg = F64.sub(acc.fst)(buff.val)
          //Pair.new<F64><List(TA.Game.Buff)>(remaining_dmg)(acc.snd);
      //;
  //;
  //| #slowed# (buff.dur) (buff.val) 
    //Pair.new<F64><List(TA.Game.Buff)>
    //| acc.fst; 
    //| List.cons<TA.Game.Buff>(buff)(acc.snd);;
  //| #hasted# (buff.dur) (buff.val)
    //Pair.new<F64><List(TA.Game.Buff)>
    //| acc.fst; 
    //| List.cons<TA.Game.Buff>(buff)(acc.snd);;
  //| #silenced# (buff.dur)
    //Pair.new<F64><List(TA.Game.Buff)>
    //| acc.fst; 
    //| List.cons<TA.Game.Buff>(buff)(acc.snd);;
  //| #rooted# (buff.dur)
    //Pair.new<F64><List(TA.Game.Buff)>
    //| acc.fst; 
    //| List.cons<TA.Game.Buff>(buff)(acc.snd);;
  //| #stuned# (buff.dur)
    //Pair.new<F64><List(TA.Game.Buff)>
    //| acc.fst; 
    //| List.cons<TA.Game.Buff>(buff)(acc.snd);;
  //;

//// use_shields(buff: Buff, acc: Pair(Number, List(Buff))) : Pair(Number, List(Buff))
////   case acc |pair 
////   case buff
////   | shielded => 
////     if acc.fst === 0 then // no damage
////       acc 
////     else 
////       case compare_numbers(acc.fst, buff.val) as res  
////       | LT => 
////         let remaining_shield_val = buff.val - acc.fst 
////         let remaining_buf = cons(_ shielded(buff.dur, remaining_shield_val), acc.snd)
////         pair(__ 0, remaining_buf)

////       | EQ => pair(__ 0, acc.snd)
////       | GT => 
////         let remaining_dmg = acc.fst - buff.val 
////         pair(__ remaining_dmg, acc.snd)

////   | slowed   => pair(__ acc.fst, cons(_ buff, acc.snd)) 
////   | hasted   => pair(__ acc.fst, cons(_ buff, acc.snd)) 
////   | silenced => pair(__ acc.fst, cons(_ buff, acc.snd))
////   | rooted   => pair(__ acc.fst, cons(_ buff, acc.snd))
////   | stuned   => pair(__ acc.fst, cons(_ buff, acc.snd))
//TA.Game.with_thing.effect
  //: TA.Game.PlayerId   ->
    //TA.Game.TxFunction ->
    //TA.Thing           -> 
    //TA.Thing
  //(pid) (fn) (thi)
  //let thi.pid = TA.Thing.get_pid(thi)
  //F64.eql(pid)(thi.pid)<() TA.Thing>
  //| fn(thi);
  //| thi;
  

//// Modifies the object with given id
//TA.Game.with_thing
  //: TA.Game.PlayerId   ->
    //TA.Game.TxFunction -> 
    //TA.Game.Game       -> 
    //TA.Game.Game 
  //(pid) (fn) (gm)
  //TA.Game.map_stage
  //|TA.Game.with_thing.effect(pid)(fn);
  //|gm;
  
//// with_thing(pid:PlayerId, fn: Thing -> Thing, gm:Game) : Game
////   let effect = (thi) =>
////     case thi |thing
////     case number_equal(thi.pid, pid) as e
////     with thi : Thing
////     | true  => fn(thi)
////     | false => thi
////   map_stage(effect, gm)
//BENFIX_BLOCK_000: F64 F64.parse("0")
//BENFIX_DASH_000: F64 F64.parse("1")
//BENFIX_DASH_001: F64 F64.parse("2")
//BENFIX_DASH_002: F64 F64.parse("3")
//BENFIX_DASH_003: F64 F64.parse("4")
//BENFIX_DASH_004: F64 F64.parse("5")
//BENFIX_DASH_005: F64 F64.parse("6")
//BENFIX_DASH_006: F64 F64.parse("7")
//BENFIX_DASH_007: F64 F64.parse("8")
//BENFIX_DASH_008: F64 F64.parse("9")
//BENFIX_GIGA_DASH_000: F64 F64.parse("10")
//BENFIX_GIGA_DASH_001: F64 F64.parse("11")
//BENFIX_GIGA_DASH_002: F64 F64.parse("12")
//BENFIX_GIGA_DASH_003: F64 F64.parse("13")
//BENFIX_GIGA_DASH_004: F64 F64.parse("14")
//BENFIX_GIGA_DASH_005: F64 F64.parse("15")
//BENFIX_GIGA_DASH_006: F64 F64.parse("16")
//BENFIX_GIGA_DASH_007: F64 F64.parse("17")
//BENFIX_GIGA_DASH_008: F64 F64.parse("18")
//BENFIX_GIGA_DASH_009: F64 F64.parse("19")
//BENFIX_GIGA_DASH_010: F64 F64.parse("20")
//BENFIX_GIGA_DASH_011: F64 F64.parse("21")
//BENFIX_GIGA_DASH_012: F64 F64.parse("22")
//BENFIX_GIGA_DASH_013: F64 F64.parse("23")
//BENFIX_GIGA_DASH_014: F64 F64.parse("24")
//BENFIX_GIGA_DASH_015: F64 F64.parse("25")
//BENFIX_GIGA_DASH_016: F64 F64.parse("26")
//BENFIX_GIGA_DASH_017: F64 F64.parse("27")
//BENFIX_GIGA_DASH_018: F64 F64.parse("28")
//BENFIX_GIGA_DASH_019: F64 F64.parse("29")
//BENFIX_GIGA_DASH_020: F64 F64.parse("30")
//BENFIX_GIGA_DASH_021: F64 F64.parse("31")
//BENFIX_HURT_000: F64 F64.parse("32")
//BENFIX_IDLE_000: F64 F64.parse("33")
//BENFIX_IDLE_001: F64 F64.parse("34")
//BENFIX_IDLE_002: F64 F64.parse("35")
//BENFIX_IDLE_003: F64 F64.parse("36")
//BENFIX_IDLE_004: F64 F64.parse("37")
//BENFIX_IDLE_005: F64 F64.parse("38")
//BENFIX_IDLE_006: F64 F64.parse("39")
//BENFIX_IDLE_007: F64 F64.parse("40")
//BENFIX_IDLE_008: F64 F64.parse("41")
//BENFIX_IDLE_009: F64 F64.parse("42")
//BENFIX_IDLE_010: F64 F64.parse("43")
//BENFIX_IDLE_011: F64 F64.parse("44")
//BENFIX_SEISMIC_JUMP_CASTING_000: F64 F64.parse("45")
//BENFIX_SEISMIC_JUMP_CASTING_001: F64 F64.parse("46")
//BENFIX_SEISMIC_JUMP_000: F64 F64.parse("47")
//BENFIX_SEISMIC_JUMP_001: F64 F64.parse("48")
//BENFIX_SEISMIC_JUMP_002: F64 F64.parse("49")
//BENFIX_SEISMIC_JUMP_003: F64 F64.parse("50")
//BENFIX_SEISMIC_JUMP_004: F64 F64.parse("51")
//BENFIX_SEISMIC_JUMP_005: F64 F64.parse("52")
//BENFIX_SEISMIC_JUMP_006: F64 F64.parse("53")
//BENFIX_SEISMIC_JUMP_007: F64 F64.parse("54")
//BENFIX_SEISMIC_JUMP_008: F64 F64.parse("55")
//BENFIX_SEISMIC_JUMP_009: F64 F64.parse("56")
//BENFIX_STEEL_TORNADO_000: F64 F64.parse("57")
//BENFIX_STEEL_TORNADO_001: F64 F64.parse("58")
//BENFIX_STEEL_TORNADO_002: F64 F64.parse("59")
//BENFIX_STEEL_TORNADO_003: F64 F64.parse("60")
//BENFIX_TAUNT_000: F64 F64.parse("61")
//BENFIX_TAUNT_001: F64 F64.parse("62")
//BENFIX_TAUNT_002: F64 F64.parse("63")
//BENFIX_TAUNT_003: F64 F64.parse("64")
//BENFIX_TAUNT_004: F64 F64.parse("65")
//BENFIX_TAUNT_005: F64 F64.parse("66")
//BENFIX_TAUNT_006: F64 F64.parse("67")
//BENFIX_TAUNT_007: F64 F64.parse("68")
//BENFIX_TAUNT_008: F64 F64.parse("69")
//BENFIX_TAUNT_009: F64 F64.parse("70")
//BENFIX_TAUNT_010: F64 F64.parse("71")
//BENFIX_TAUNT_011: F64 F64.parse("72")
//BENFIX_TAUNT_012: F64 F64.parse("73")
//BENFIX_TAUNT_013: F64 F64.parse("74")
//BENFIX_TAUNT_014: F64 F64.parse("75")
//BENFIX_TAUNT_015: F64 F64.parse("76")
//BENFIX_TRIPLE_ATTACK_1_000: F64 F64.parse("77")
//BENFIX_TRIPLE_ATTACK_1_001: F64 F64.parse("78")
//BENFIX_TRIPLE_ATTACK_1_002: F64 F64.parse("79")
//BENFIX_TRIPLE_ATTACK_1_003: F64 F64.parse("80")
//BENFIX_TRIPLE_ATTACK_1_004: F64 F64.parse("81")
//BENFIX_TRIPLE_ATTACK_1_005: F64 F64.parse("82")
//BENFIX_TRIPLE_ATTACK_1_006: F64 F64.parse("83")
//BENFIX_TRIPLE_ATTACK_1_007: F64 F64.parse("84")
//BENFIX_TRIPLE_ATTACK_1_008: F64 F64.parse("85")
//BENFIX_TRIPLE_ATTACK_1_009: F64 F64.parse("86")
//BENFIX_TRIPLE_ATTACK_1_010: F64 F64.parse("87")
//BENFIX_TRIPLE_ATTACK_1_011: F64 F64.parse("88")
//BENFIX_TRIPLE_ATTACK_1_012: F64 F64.parse("89")
//BENFIX_TRIPLE_ATTACK_1_013: F64 F64.parse("90")
//BENFIX_TRIPLE_ATTACK_1_014: F64 F64.parse("91")
//BENFIX_TRIPLE_ATTACK_1_015: F64 F64.parse("92")
//BENFIX_TRIPLE_ATTACK_2_000: F64 F64.parse("93")
//BENFIX_TRIPLE_ATTACK_2_001: F64 F64.parse("94")
//BENFIX_TRIPLE_ATTACK_2_002: F64 F64.parse("95")
//BENFIX_TRIPLE_ATTACK_2_003: F64 F64.parse("96")
//BENFIX_TRIPLE_ATTACK_2_004: F64 F64.parse("97")
//BENFIX_TRIPLE_ATTACK_2_005: F64 F64.parse("98")
//BENFIX_TRIPLE_ATTACK_2_006: F64 F64.parse("99")
//BENFIX_TRIPLE_ATTACK_2_007: F64 F64.parse("100")
//BENFIX_TRIPLE_ATTACK_2_008: F64 F64.parse("101")
//BENFIX_TRIPLE_ATTACK_2_009: F64 F64.parse("102")
//BENFIX_TRIPLE_ATTACK_2_010: F64 F64.parse("103")
//BENFIX_WALK_000: F64 F64.parse("104")
//BENFIX_WALK_001: F64 F64.parse("105")
//BENFIX_WALK_002: F64 F64.parse("106")
//BENFIX_WALK_003: F64 F64.parse("107")
//BENFIX_WALK_004: F64 F64.parse("108")
//BENFIX_WALK_005: F64 F64.parse("109")
//BENFIX_WALK_006: F64 F64.parse("110")
//BLESKAPE_BASE_ATTACK_1_000: F64 F64.parse("111")
//BLESKAPE_BASE_ATTACK_1_001: F64 F64.parse("112")
//BLESKAPE_BASE_ATTACK_1_002: F64 F64.parse("113")
//BLESKAPE_BASE_ATTACK_1_003: F64 F64.parse("114")
//BLESKAPE_BASE_ATTACK_1_004: F64 F64.parse("115")
//BLESKAPE_BASE_ATTACK_1_005: F64 F64.parse("116")
//BLESKAPE_BASE_ATTACK_2_000: F64 F64.parse("117")
//BLESKAPE_BASE_ATTACK_2_001: F64 F64.parse("118")
//BLESKAPE_BASE_ATTACK_2_002: F64 F64.parse("119")
//BLESKAPE_BASE_ATTACK_2_003: F64 F64.parse("120")
//BLESKAPE_BASE_ATTACK_2_004: F64 F64.parse("121")
//BLESKAPE_BASE_ATTACK_2_005: F64 F64.parse("122")
//BLESKAPE_BASE_ATTACK_2_006: F64 F64.parse("123")
//BLESKAPE_DASH_000: F64 F64.parse("124")
//BLESKAPE_DASH_001: F64 F64.parse("125")
//BLESKAPE_DASH_002: F64 F64.parse("126")
//BLESKAPE_DASH_003: F64 F64.parse("127")
//BLESKAPE_DASH_004: F64 F64.parse("128")
//BLESKAPE_DASH_005: F64 F64.parse("129")
//BLESKAPE_DASH_006: F64 F64.parse("130")
//BLESKAPE_DASH_007: F64 F64.parse("131")
//BLESKAPE_DASH_008: F64 F64.parse("132")
//BLESKAPE_DASH_009: F64 F64.parse("133")
//BLESKAPE_DASH_010: F64 F64.parse("134")
//BLESKAPE_DASH_011: F64 F64.parse("135")
//BLESKAPE_DASH_012: F64 F64.parse("136")
//BLESKAPE_DASH_013: F64 F64.parse("137")
//BLESKAPE_DASH_014: F64 F64.parse("138")
//BLESKAPE_DEFENSE_MODE_000: F64 F64.parse("139")
//BLESKAPE_DEFENSE_MODE_001: F64 F64.parse("140")
//BLESKAPE_DEFENSE_MODE_002: F64 F64.parse("141")
//BLESKAPE_HURT_000: F64 F64.parse("142")
//BLESKAPE_IDLE_000: F64 F64.parse("143")
//BLESKAPE_IDLE_001: F64 F64.parse("144")
//BLESKAPE_IDLE_002: F64 F64.parse("145")
//BLESKAPE_IDLE_003: F64 F64.parse("146")
//BLESKAPE_SHOCK_BALL_000: F64 F64.parse("147")
//BLESKAPE_SHOCK_BALL_001: F64 F64.parse("148")
//BLESKAPE_SHOCK_BALL_002: F64 F64.parse("149")
//BLESKAPE_SHOCK_BALL_003: F64 F64.parse("150")
//BLESKAPE_SHOCK_BALL_004: F64 F64.parse("151")
//BLESKAPE_SHOCK_BALL_005: F64 F64.parse("152")
//BLESKAPE_SHOCK_BALL_006: F64 F64.parse("153")
//BLESKAPE_SHOCK_BALL_007: F64 F64.parse("154")
//BLESKAPE_SHOCK_BALL_008: F64 F64.parse("155")
//BLESKAPE_SHOCK_BALL_009: F64 F64.parse("156")
//BLESKAPE_SHOCK_BALL_010: F64 F64.parse("157")
//BLESKAPE_SHOCK_BALL_011: F64 F64.parse("158")
//BLESKAPE_SHOCK_BALL_012: F64 F64.parse("159")
//BLESKAPE_SHOCK_BALL_013: F64 F64.parse("160")
//BLESKAPE_SHOCK_BALL_014: F64 F64.parse("161")
//BLESKAPE_SHOCK_GROUND_WAVE_000: F64 F64.parse("162")
//BLESKAPE_SHOCK_GROUND_WAVE_001: F64 F64.parse("163")
//BLESKAPE_SHOCK_GROUND_WAVE_002: F64 F64.parse("164")
//BLESKAPE_SHOCK_GROUND_WAVE_003: F64 F64.parse("165")
//BLESKAPE_SHOCK_GROUND_WAVE_004: F64 F64.parse("166")
//BLESKAPE_SHOCK_GROUND_WAVE_005: F64 F64.parse("167")
//BLESKAPE_SHOCK_GROUND_WAVE_006: F64 F64.parse("168")
//BLESKAPE_SHOCK_GROUND_WAVE_007: F64 F64.parse("169")
//BLESKAPE_SHOCK_GROUND_WAVE_008: F64 F64.parse("170")
//BLESKAPE_SHOCK_GROUND_WAVE_009: F64 F64.parse("171")
//BLESKAPE_SHOCK_GROUND_WAVE_010: F64 F64.parse("172")
//BLESKAPE_SHOCK_GROUND_WAVE_011: F64 F64.parse("173")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_000: F64 F64.parse("174")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_001: F64 F64.parse("175")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_002: F64 F64.parse("176")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_003: F64 F64.parse("177")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_004: F64 F64.parse("178")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_005: F64 F64.parse("179")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_006: F64 F64.parse("180")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_007: F64 F64.parse("181")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_008: F64 F64.parse("182")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_009: F64 F64.parse("183")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_010: F64 F64.parse("184")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_011: F64 F64.parse("185")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_012: F64 F64.parse("186")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_013: F64 F64.parse("187")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_014: F64 F64.parse("188")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_015: F64 F64.parse("189")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_016: F64 F64.parse("190")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_017: F64 F64.parse("191")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_018: F64 F64.parse("192")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_019: F64 F64.parse("193")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_020: F64 F64.parse("194")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_021: F64 F64.parse("195")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_022: F64 F64.parse("196")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_023: F64 F64.parse("197")
//BLESKAPE_SUPREME_PUNCH_SEQUENCE_024: F64 F64.parse("198")
//BLESKAPE_TAUNT_000: F64 F64.parse("199")
//BLESKAPE_TAUNT_001: F64 F64.parse("200")
//BLESKAPE_TAUNT_002: F64 F64.parse("201")
//BLESKAPE_TAUNT_003: F64 F64.parse("202")
//BLESKAPE_TAUNT_004: F64 F64.parse("203")
//BLESKAPE_TAUNT_005: F64 F64.parse("204")
//BLESKAPE_TAUNT_006: F64 F64.parse("205")
//BLESKAPE_TAUNT_007: F64 F64.parse("206")
//BLESKAPE_TAUNT_008: F64 F64.parse("207")
//BLESKAPE_TAUNT_009: F64 F64.parse("208")
//BLESKAPE_WALK_000: F64 F64.parse("209")
//BLESKAPE_WALK_001: F64 F64.parse("210")
//BLESKAPE_WALK_002: F64 F64.parse("211")
//BLESKAPE_WALK_003: F64 F64.parse("212")
//DARTH_VADER_HURT_WITHOUT_SABER_000: F64 F64.parse("213")
//DARTH_VADER_HURT_000: F64 F64.parse("214")
//DARTH_VADER_IDLE_WITHOUT_SABER_000: F64 F64.parse("215")
//DARTH_VADER_IDLE_WITHOUT_SABER_001: F64 F64.parse("216")
//DARTH_VADER_IDLE_WITHOUT_SABER_002: F64 F64.parse("217")
//DARTH_VADER_IDLE_WITHOUT_SABER_003: F64 F64.parse("218")
//DARTH_VADER_IDLE_WITHOUT_SABER_004: F64 F64.parse("219")
//DARTH_VADER_IDLE_000: F64 F64.parse("220")
//DARTH_VADER_IDLE_001: F64 F64.parse("221")
//DARTH_VADER_IDLE_002: F64 F64.parse("222")
//DARTH_VADER_IDLE_003: F64 F64.parse("223")
//DARTH_VADER_IDLE_004: F64 F64.parse("224")
//DARTH_VADER_ROGUE_ONE_000: F64 F64.parse("225")
//DARTH_VADER_ROGUE_ONE_001: F64 F64.parse("226")
//DARTH_VADER_ROGUE_ONE_002: F64 F64.parse("227")
//DARTH_VADER_ROGUE_ONE_003: F64 F64.parse("228")
//DARTH_VADER_ROGUE_ONE_004: F64 F64.parse("229")
//DARTH_VADER_ROGUE_ONE_005: F64 F64.parse("230")
//DARTH_VADER_ROGUE_ONE_006: F64 F64.parse("231")
//DARTH_VADER_ROGUE_ONE_007: F64 F64.parse("232")
//DARTH_VADER_ROGUE_ONE_008: F64 F64.parse("233")
//DARTH_VADER_ROGUE_ONE_009: F64 F64.parse("234")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_000: F64 F64.parse("235")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_001: F64 F64.parse("236")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_002: F64 F64.parse("237")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_003: F64 F64.parse("238")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_004: F64 F64.parse("239")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_005: F64 F64.parse("240")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_006: F64 F64.parse("241")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_WITHOUT_SABER_007: F64 F64.parse("242")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_000: F64 F64.parse("243")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_001: F64 F64.parse("244")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_002: F64 F64.parse("245")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_003: F64 F64.parse("246")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_004: F64 F64.parse("247")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_005: F64 F64.parse("248")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_006: F64 F64.parse("249")
//DARTH_VADER_THE_EMPIRE_STRICKES_BACK_007: F64 F64.parse("250")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_000: F64 F64.parse("251")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_001: F64 F64.parse("252")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_002: F64 F64.parse("253")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_003: F64 F64.parse("254")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_004: F64 F64.parse("255")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_005: F64 F64.parse("256")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_006: F64 F64.parse("257")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_1_007: F64 F64.parse("258")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_000: F64 F64.parse("259")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_001: F64 F64.parse("260")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_002: F64 F64.parse("261")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_003: F64 F64.parse("262")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_004: F64 F64.parse("263")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_005: F64 F64.parse("264")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_006: F64 F64.parse("265")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_2_007: F64 F64.parse("266")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_000: F64 F64.parse("267")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_001: F64 F64.parse("268")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_002: F64 F64.parse("269")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_003: F64 F64.parse("270")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_004: F64 F64.parse("271")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_005: F64 F64.parse("272")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_006: F64 F64.parse("273")
//DARTH_VADER_THE_FORCE_AWAKENS_VAR_3_007: F64 F64.parse("274")
//DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_000: F64 F64.parse("275")
//DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_001: F64 F64.parse("276")
//DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_002: F64 F64.parse("277")
//DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_003: F64 F64.parse("278")
//DARTH_VADER_THE_PHANTOM_MENACE_CAST_ANIMATION_004: F64 F64.parse("279")
//DARTH_VADER_THE_PHANTOM_MENACE_RETURN_000: F64 F64.parse("280")
//DARTH_VADER_THE_PHANTOM_MENACE_RETURN_001: F64 F64.parse("281")
//DARTH_VADER_THE_PHANTOM_MENACE_RETURN_002: F64 F64.parse("282")
//DARTH_VADER_THE_PHANTOM_MENACE_RETURN_003: F64 F64.parse("283")
//DARTH_VADER_THE_PHANTOM_MENACE_RETURN_004: F64 F64.parse("284")
//DARTH_VADER_THE_PHANTOM_MENACE_RETURN_005: F64 F64.parse("285")
//DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_000: F64 F64.parse("286")
//DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_001: F64 F64.parse("287")
//DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_002: F64 F64.parse("288")
//DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_003: F64 F64.parse("289")
//DARTH_VADER_THE_PHANTOM_MENACE_SABER_TWISTING_004: F64 F64.parse("290")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_000: F64 F64.parse("291")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_001: F64 F64.parse("292")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_WITHOUT_SABER_002: F64 F64.parse("293")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_000: F64 F64.parse("294")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_001: F64 F64.parse("295")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_CAST_ANIMATION_002: F64 F64.parse("296")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_000: F64 F64.parse("297")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_001: F64 F64.parse("298")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_002: F64 F64.parse("299")
//DARTH_VADER_THE_RISE_OF_SKYWALKER_EFFECT_ANIMATION_003: F64 F64.parse("300")

//DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_000: F64 F64.parse("301")
//DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_001: F64 F64.parse("302")
//DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_002: F64 F64.parse("303")
//DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_003: F64 F64.parse("304")
//DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_004: F64 F64.parse("305")
//DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_005: F64 F64.parse("306")
//DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_006: F64 F64.parse("307")
//DARTH_VADER_WALK_CYCLE_WITHOUT_SABER_007: F64 F64.parse("308")
//DARTH_VADER_WALK_CYCLE_000: F64 F64.parse("309")
//DARTH_VADER_WALK_CYCLE_001: F64 F64.parse("310")
//DARTH_VADER_WALK_CYCLE_002: F64 F64.parse("311")
//DARTH_VADER_WALK_CYCLE_003: F64 F64.parse("312")
//DARTH_VADER_WALK_CYCLE_004: F64 F64.parse("313")
//DARTH_VADER_WALK_CYCLE_005: F64 F64.parse("314")
//DARTH_VADER_WALK_CYCLE_006: F64 F64.parse("315")
//DARTH_VADER_WALK_CYCLE_007: F64 F64.parse("316")
//DILMA_CONFUSION_ANIM_000: F64 F64.parse("317")
//DILMA_CONFUSION_ANIM_001: F64 F64.parse("318")
//DILMA_CONFUSION_ANIM_002: F64 F64.parse("319")
//DILMA_CONFUSION_ANIM_003: F64 F64.parse("320")
//DILMA_CONFUSION_CASTING_000: F64 F64.parse("321")
//DILMA_CONFUSION_CASTING_001: F64 F64.parse("322")
//DILMA_CONFUSION_CASTING_002: F64 F64.parse("323")
//DILMA_CONFUSION_CASTING_003: F64 F64.parse("324")
//DILMA_CONFUSION_CASTING_004: F64 F64.parse("325")
//DILMA_CONFUSION_CASTING_005: F64 F64.parse("326")
//DILMA_CONFUSION_CASTING_006: F64 F64.parse("327")
//DILMA_CONFUSION_CASTING_007: F64 F64.parse("328")
//DILMA_CONFUSION_CASTING_008: F64 F64.parse("329")
//DILMA_CONFUSION_CASTING_009: F64 F64.parse("330")
//DILMA_CONFUSION_CASTING_010: F64 F64.parse("331")
//DILMA_CONFUSION_CASTING_011: F64 F64.parse("332")
//DILMA_CONFUSION_CASTING_012: F64 F64.parse("333")
//DILMA_CONFUSION_CASTING_013: F64 F64.parse("334")
//DILMA_CONFUSION_CASTING_014: F64 F64.parse("335")
//DILMA_CONFUSION_CASTING_015: F64 F64.parse("336")
//DILMA_CONFUSION_CASTING_016: F64 F64.parse("337")
//DILMA_CONFUSION_CASTING_017: F64 F64.parse("338")
//DILMA_CONFUSION_CASTING_018: F64 F64.parse("339")
//DILMA_IDLE_000: F64 F64.parse("340")
//DILMA_IDLE_001: F64 F64.parse("341")
//DILMA_IDLE_002: F64 F64.parse("342")
//DILMA_IDLE_003: F64 F64.parse("343")
//DILMA_PROTECTION_000: F64 F64.parse("344")
//DILMA_PROTECTION_001: F64 F64.parse("345")
//DILMA_PROTECTION_002: F64 F64.parse("346")
//DILMA_PROTECTION_003: F64 F64.parse("347")
//DILMA_PROTECTION_004: F64 F64.parse("348")
//DILMA_PROTECTION_005: F64 F64.parse("349")
//DILMA_PROTECTION_006: F64 F64.parse("350")
//DILMA_PROTECTION_007: F64 F64.parse("351")
//DILMA_PROTECTION_008: F64 F64.parse("352")
//DILMA_PROTECTION_009: F64 F64.parse("353")
//DILMA_PROTECTION_010: F64 F64.parse("354")
//DILMA_PROTECTION_011: F64 F64.parse("355")
//DILMA_PROTECTION_012: F64 F64.parse("356")
//DILMA_PROTECTION_013: F64 F64.parse("357")
//DILMA_SALUTING_THE_CASSAVA_000: F64 F64.parse("358")
//DILMA_SALUTING_THE_CASSAVA_001: F64 F64.parse("359")
//DILMA_SALUTING_THE_CASSAVA_002: F64 F64.parse("360")
//DILMA_SALUTING_THE_CASSAVA_003: F64 F64.parse("361")
//DILMA_SALUTING_THE_CASSAVA_004: F64 F64.parse("362")
//DILMA_SALUTING_THE_CASSAVA_005: F64 F64.parse("363")
//DILMA_SALUTING_THE_CASSAVA_006: F64 F64.parse("364")
//DILMA_SALUTING_THE_CASSAVA_007: F64 F64.parse("365")
//DILMA_SALUTING_THE_CASSAVA_008: F64 F64.parse("366")
//DILMA_SALUTING_THE_CASSAVA_009: F64 F64.parse("367")
//DILMA_SALUTING_THE_CASSAVA_010: F64 F64.parse("368")
//DILMA_SALUTING_THE_CASSAVA_011: F64 F64.parse("369")
//DILMA_SALUTING_THE_CASSAVA_012: F64 F64.parse("370")
//DILMA_SALUTING_THE_CASSAVA_013: F64 F64.parse("371")
//DILMA_SALUTING_THE_CASSAVA_014: F64 F64.parse("372")
//DILMA_SALUTING_THE_CASSAVA_015: F64 F64.parse("373")
//DILMA_SALUTING_THE_CASSAVA_016: F64 F64.parse("374")
//DILMA_SALUTING_THE_CASSAVA_017: F64 F64.parse("375")
//DILMA_STOCKING_WIND_ANIM_000: F64 F64.parse("376")
//DILMA_STOCKING_WIND_ANIM_001: F64 F64.parse("377")
//DILMA_STOCKING_WIND_ANIM_002: F64 F64.parse("378")
//DILMA_STOCKING_WIND_CASTING_000: F64 F64.parse("379")
//DILMA_STOCKING_WIND_CASTING_001: F64 F64.parse("380")
//DILMA_STOCKING_WIND_CASTING_002: F64 F64.parse("381")
//DILMA_STOCKING_WIND_CASTING_003: F64 F64.parse("382")
//DILMA_STOCKING_WIND_CASTING_004: F64 F64.parse("383")
//DILMA_STOCKING_WIND_CASTING_005: F64 F64.parse("384")
//DILMA_STOCKING_WIND_CASTING_006: F64 F64.parse("385")
//DILMA_STOCKING_WIND_CASTING_007: F64 F64.parse("386")
//DILMA_STOCKING_WIND_CASTING_008: F64 F64.parse("387")
//DILMA_STOCKING_WIND_CASTING_009: F64 F64.parse("388")
//DILMA_TAUNT_000: F64 F64.parse("389")
//DILMA_TAUNT_001: F64 F64.parse("390")
//DILMA_TAUNT_002: F64 F64.parse("391")
//DILMA_TAUNT_003: F64 F64.parse("392")
//DILMA_TAUNT_004: F64 F64.parse("393")
//DILMA_TAUNT_005: F64 F64.parse("394")
//DILMA_WALK_000: F64 F64.parse("395")
//DILMA_WALK_001: F64 F64.parse("396")
//DILMA_WALK_002: F64 F64.parse("397")
//DILMA_WALK_003: F64 F64.parse("398")
//DILMA_WALK_004: F64 F64.parse("399")
//DILMA_WALK_005: F64 F64.parse("400")
//DILMA_WALK_006: F64 F64.parse("401")
//DILMA_WALK_007: F64 F64.parse("402")
//DORIME_BLESS_CASTANIMATION_000: F64 F64.parse("403")
//DORIME_BLESS_CASTANIMATION_001: F64 F64.parse("404")
//DORIME_BLESS_CASTANIMATION_002: F64 F64.parse("405")
//DORIME_BLESS_CASTANIMATION_003: F64 F64.parse("406")
//DORIME_BLESS_CASTANIMATION_004: F64 F64.parse("407")
//DORIME_BLESS_CASTANIMATION_005: F64 F64.parse("408")
//DORIME_BLESS_HALO_000: F64 F64.parse("409")
//DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000: F64 F64.parse("410")
//DORIME_BLESSING_FOR_WHO_DESERVE_000: F64 F64.parse("411")
//DORIME_BLESSING_FOR_WHO_DESERVE_001: F64 F64.parse("412")
//DORIME_BLESSING_FOR_WHO_DESERVE_002: F64 F64.parse("413")
//DORIME_BLESSING_FOR_WHO_DESERVE_003: F64 F64.parse("414")
//DORIME_BLESSING_FOR_WHO_DESERVE_004: F64 F64.parse("415")
//DORIME_BLESSING_FOR_WHO_DESERVE_005: F64 F64.parse("416")
//DORIME_BLESSING_FOR_WHO_DESERVE_006: F64 F64.parse("417")
//DORIME_BLESSING_FOR_WHO_DESERVE_007: F64 F64.parse("418")
//DORIME_BLESSING_FOR_WHO_DESERVE_008: F64 F64.parse("419")
//DORIME_BLESSING_FOR_WHO_DESERVE_009: F64 F64.parse("420")
//DORIME_BLESSING_FOR_WHO_DESERVE_010: F64 F64.parse("421")
//DORIME_BLESSING_FOR_WHO_DESERVE_011: F64 F64.parse("422")
//DORIME_BLESSING_FOR_WHO_DESERVE_012: F64 F64.parse("423")
//DORIME_BLESSING_FOR_WHO_DESERVE_013: F64 F64.parse("424")
//DORIME_GODS_CHAMBER_CAST_ANIMATION_000: F64 F64.parse("425")
//DORIME_GODS_CHAMBER_CAST_ANIMATION_001: F64 F64.parse("426")
//DORIME_GODS_CHAMBER_CAST_ANIMATION_002: F64 F64.parse("427")
//DORIME_GODS_CHAMBER_CAST_ANIMATION_003: F64 F64.parse("428")
//DORIME_GODS_CHAMBER_CAST_ANIMATION_004: F64 F64.parse("429")
//DORIME_GODS_CHAMBER_CAST_ANIMATION_005: F64 F64.parse("430")
//DORIME_GODS_CHAMBER_CAST_ANIMATION_006: F64 F64.parse("431")
//DORIME_GODS_CHAMBER_CAST_ANIMATION_007: F64 F64.parse("432")
//DORIME_GODS_CHAMBER_CAST_ANIMATION_008: F64 F64.parse("433")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000: F64 F64.parse("434")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_001: F64 F64.parse("435")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_002: F64 F64.parse("436")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_003: F64 F64.parse("437")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_004: F64 F64.parse("438")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_005: F64 F64.parse("439")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_006: F64 F64.parse("440")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_007: F64 F64.parse("441")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_008: F64 F64.parse("442")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_009: F64 F64.parse("443")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_010: F64 F64.parse("444")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_011: F64 F64.parse("445")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_012: F64 F64.parse("446")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_013: F64 F64.parse("447")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_014: F64 F64.parse("448")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015: F64 F64.parse("449")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_016: F64 F64.parse("450")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_017: F64 F64.parse("451")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_018: F64 F64.parse("452")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_019: F64 F64.parse("453")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_020: F64 F64.parse("454")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_021: F64 F64.parse("455")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_022: F64 F64.parse("456")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_023: F64 F64.parse("457")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_024: F64 F64.parse("458")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_025: F64 F64.parse("459")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_026: F64 F64.parse("460")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_027: F64 F64.parse("461")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_028: F64 F64.parse("462")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_000: F64 F64.parse("463")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_001: F64 F64.parse("464")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_002: F64 F64.parse("465")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_003: F64 F64.parse("466")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_004: F64 F64.parse("467")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_005: F64 F64.parse("468")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_006: F64 F64.parse("469")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_007: F64 F64.parse("470")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_008: F64 F64.parse("471")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_009: F64 F64.parse("472")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_010: F64 F64.parse("473")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_011: F64 F64.parse("474")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_012: F64 F64.parse("475")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_013: F64 F64.parse("476")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_014: F64 F64.parse("477")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_015: F64 F64.parse("478")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_016: F64 F64.parse("479")
//DORIME_GODS_CHAMBER_HEAL_CIRCLE_017: F64 F64.parse("480")
//DORIME_HOLY_FLAME_CAST_ANIMATION_000: F64 F64.parse("481")
//DORIME_HOLY_FLAME_CAST_ANIMATION_001: F64 F64.parse("482")
//DORIME_HOLY_FLAME_CAST_ANIMATION_002: F64 F64.parse("483")
//DORIME_HOLY_FLAME_CAST_ANIMATION_003: F64 F64.parse("484")
//DORIME_HOLY_FLAME_CAST_ANIMATION_004: F64 F64.parse("485")
//DORIME_HOLY_FLAME_CAST_ANIMATION_005: F64 F64.parse("486")
//DORIME_HOLY_FLAME_CAST_ANIMATION_006: F64 F64.parse("487")
//DORIME_HOLY_FLAME_CAST_ANIMATION_007: F64 F64.parse("488")
//DORIME_HOLY_FLAME_PILLAR_000: F64 F64.parse("489")
//DORIME_HOLY_FLAME_PILLAR_001: F64 F64.parse("490")
//DORIME_HOLY_FLAME_PILLAR_002: F64 F64.parse("491")
//DORIME_HOLY_FLAME_PILLAR_003: F64 F64.parse("492")
//DORIME_HOLY_FLAME_PILLAR_004: F64 F64.parse("493")
//DORIME_HURT_000: F64 F64.parse("494")
//DORIME_IDLE_000: F64 F64.parse("495")
//DORIME_IDLE_001: F64 F64.parse("496")
//DORIME_IDLE_002: F64 F64.parse("497")
//DORIME_IDLE_003: F64 F64.parse("498")
//DORIME_IDLE_004: F64 F64.parse("499")
//DORIME_JESUS_POWER_000: F64 F64.parse("500")
//DORIME_JESUS_POWER_001: F64 F64.parse("501")
//DORIME_JESUS_POWER_002: F64 F64.parse("502")
//DORIME_JESUS_POWER_003: F64 F64.parse("503")
//DORIME_JESUS_POWER_004: F64 F64.parse("504")
//DORIME_JESUS_POWER_005: F64 F64.parse("505")
//DORIME_JESUS_POWER_006: F64 F64.parse("506")
//DORIME_JESUS_POWER_007: F64 F64.parse("507")
//DORIME_JESUS_POWER_008: F64 F64.parse("508")
//DORIME_JESUS_POWER_009: F64 F64.parse("509")
//DORIME_JESUS_POWER_010: F64 F64.parse("510")
//DORIME_JESUS_POWER_011: F64 F64.parse("511")
//DORIME_JESUS_POWER_012: F64 F64.parse("512")
//DORIME_JESUS_POWER_013: F64 F64.parse("513")
//DORIME_JESUS_POWER_014: F64 F64.parse("514")
//DORIME_JESUS_POWER_015: F64 F64.parse("515")
//DORIME_JESUS_POWER_016: F64 F64.parse("516")
//DORIME_JESUS_POWER_017: F64 F64.parse("517")
//DORIME_JESUS_POWER_018: F64 F64.parse("518")
//DORIME_JESUS_POWER_019: F64 F64.parse("519")
//DORIME_JESUS_POWER_020: F64 F64.parse("520")
//DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000: F64 F64.parse("521")
//DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_001: F64 F64.parse("522")
//DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_002: F64 F64.parse("523")
//DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_003: F64 F64.parse("524")
//DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_004: F64 F64.parse("525")
//DORIME_LEPTOSPIROSE_CURSE_POT_000: F64 F64.parse("526")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000: F64 F64.parse("527")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_001: F64 F64.parse("528")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_002: F64 F64.parse("529")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_003: F64 F64.parse("530")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_004: F64 F64.parse("531")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_005: F64 F64.parse("532")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_006: F64 F64.parse("533")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_007: F64 F64.parse("534")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_008: F64 F64.parse("535")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_009: F64 F64.parse("536")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_010: F64 F64.parse("537")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_011: F64 F64.parse("538")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_012: F64 F64.parse("539")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_013: F64 F64.parse("540")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_014: F64 F64.parse("541")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_015: F64 F64.parse("542")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_016: F64 F64.parse("543")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_017: F64 F64.parse("544")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_018: F64 F64.parse("545")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_019: F64 F64.parse("546")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_020: F64 F64.parse("547")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_021: F64 F64.parse("548")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_022: F64 F64.parse("549")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_023: F64 F64.parse("550")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_024: F64 F64.parse("551")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_025: F64 F64.parse("552")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_026: F64 F64.parse("553")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_027: F64 F64.parse("554")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_028: F64 F64.parse("555")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000: F64 F64.parse("556")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_001: F64 F64.parse("557")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_002: F64 F64.parse("558")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_003: F64 F64.parse("559")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_004: F64 F64.parse("560")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_005: F64 F64.parse("561")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_006: F64 F64.parse("562")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_007: F64 F64.parse("563")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_008: F64 F64.parse("564")
//DORIME_LEPTOSPIROSE_CURSE_PUDDLE_009: F64 F64.parse("565")
//DORIME_POSED_BACKUP: F64 F64.parse("566")
//DORIME_TAUNT_IDLE_000: F64 F64.parse("567")
//DORIME_TAUNT_IDLE_001: F64 F64.parse("568")
//DORIME_TAUNT_IDLE_002: F64 F64.parse("569")
//DORIME_TAUNT_000: F64 F64.parse("570")
//DORIME_TAUNT_001: F64 F64.parse("571")
//DORIME_TAUNT_002: F64 F64.parse("572")
//DORIME_WALK_CYCLE_000: F64 F64.parse("573")
//DORIME_WALK_CYCLE_001: F64 F64.parse("574")
//DORIME_WALK_CYCLE_002: F64 F64.parse("575")
//DORIME_WALK_CYCLE_003: F64 F64.parse("576")
//DORIME_WALK_CYCLE_004: F64 F64.parse("577")
//DORIME_WALK_CYCLE_005: F64 F64.parse("578")
//DORIME_WALK_CYCLE_006: F64 F64.parse("579")
//DORIME_WALK_CYCLE_007: F64 F64.parse("580")
//DR_STRANGE_CHRONOSTASIS_CAST_000: F64 F64.parse("581")
//DR_STRANGE_CHRONOSTASIS_CAST_001: F64 F64.parse("582")
//DR_STRANGE_CHRONOSTASIS_CAST_002: F64 F64.parse("583")
//DR_STRANGE_CHRONOSTASIS_CAST_003: F64 F64.parse("584")
//DR_STRANGE_CHRONOSTASIS_CAST_004: F64 F64.parse("585")
//DR_STRANGE_CHRONOSTASIS_CAST_005: F64 F64.parse("586")
//DR_STRANGE_CHRONOSTASIS_CAST_006: F64 F64.parse("587")
//DR_STRANGE_CHRONOSTASIS_CAST_007: F64 F64.parse("588")
//DR_STRANGE_CHRONOSTASIS_CAST_008: F64 F64.parse("589")
//DR_STRANGE_CHRONOSTASIS_CAST_009: F64 F64.parse("590")
//DR_STRANGE_CHRONOSTASIS_EFFECT_000: F64 F64.parse("591")
//DR_STRANGE_CHRONOSTASIS_EFFECT_001: F64 F64.parse("592")
//DR_STRANGE_CHRONOSTASIS_EFFECT_002: F64 F64.parse("593")
//DR_STRANGE_CHRONOSTASIS_EFFECT_003: F64 F64.parse("594")
//DR_STRANGE_CHRONOSTASIS_EFFECT_004: F64 F64.parse("595")
//DR_STRANGE_CHRONOSTASIS_EFFECT_005: F64 F64.parse("596")
//DR_STRANGE_CHRONOSTASIS_EFFECT_006: F64 F64.parse("597")
//DR_STRANGE_CHRONOSTASIS_EFFECT_007: F64 F64.parse("598")
//DR_STRANGE_CHRONOSTASIS_EFFECT_008: F64 F64.parse("599")
//DR_STRANGE_CHRONOSTASIS_EFFECT_009: F64 F64.parse("600")

//DR_STRANGE_CHRONOSTASIS_EFFECT_010: F64 F64.parse("601")
//DR_STRANGE_CHRONOSTASIS_EFFECT_011: F64 F64.parse("602")
//DR_STRANGE_CHRONOSTASIS_EFFECT_012: F64 F64.parse("603")
//DR_STRANGE_CHRONOSTASIS_EFFECT_013: F64 F64.parse("604")
//DR_STRANGE_CHRONOSTASIS_EFFECT_014: F64 F64.parse("605")
//DR_STRANGE_CHRONOSTASIS_EFFECT_015: F64 F64.parse("606")
//DR_STRANGE_CHRONOSTASIS_EFFECT_016: F64 F64.parse("607")
//DR_STRANGE_CHRONOSTASIS_EFFECT_017: F64 F64.parse("608")
//DR_STRANGE_CHRONOSTASIS_EFFECT_018: F64 F64.parse("609")
//DR_STRANGE_CHRONOSTASIS_EFFECT_019: F64 F64.parse("610")
//DR_STRANGE_CHRONOSTASIS_EFFECT_020: F64 F64.parse("611")
//DR_STRANGE_CHRONOSTASIS_EFFECT_021: F64 F64.parse("612")
//DR_STRANGE_CHRONOSTASIS_EFFECT_022: F64 F64.parse("613")
//DR_STRANGE_CHRONOSTASIS_EFFECT_023: F64 F64.parse("614")
//DR_STRANGE_CHRONOSTASIS_EFFECT_024: F64 F64.parse("615")
//DR_STRANGE_CHRONOSTASIS_EFFECT_025: F64 F64.parse("616")
//DR_STRANGE_HURT_000: F64 F64.parse("617")
//DR_STRANGE_IDLE_000: F64 F64.parse("618")
//DR_STRANGE_IDLE_001: F64 F64.parse("619")
//DR_STRANGE_IDLE_002: F64 F64.parse("620")
//DR_STRANGE_IDLE_003: F64 F64.parse("621")
//DR_STRANGE_IDLE_004: F64 F64.parse("622")
//DR_STRANGE_MYSTIC_BEAM_CAST_000: F64 F64.parse("623")
//DR_STRANGE_MYSTIC_BEAM_CAST_001: F64 F64.parse("624")
//DR_STRANGE_MYSTIC_BEAM_CAST_002: F64 F64.parse("625")
//DR_STRANGE_MYSTIC_BEAM_CAST_003: F64 F64.parse("626")
//DR_STRANGE_MYSTIC_BEAM_CAST_004: F64 F64.parse("627")
//DR_STRANGE_MYSTIC_BEAM_CAST_005: F64 F64.parse("628")
//DR_STRANGE_MYSTIC_BEAM_CAST_006: F64 F64.parse("629")
//DR_STRANGE_MYSTIC_BEAM_CAST_007: F64 F64.parse("630")
//DR_STRANGE_MYSTIC_BEAM_CAST_008: F64 F64.parse("631")
//DR_STRANGE_MYSTIC_BEAM_CAST_009: F64 F64.parse("632")
//DR_STRANGE_MYSTIC_BEAM_EFFECT_000: F64 F64.parse("633")
//DR_STRANGE_MYSTIC_BEAM_EFFECT_001: F64 F64.parse("634")
//DR_STRANGE_MYSTIC_BEAM_EFFECT_002: F64 F64.parse("635")
//DR_STRANGE_MYSTIC_BEAM_EFFECT_003: F64 F64.parse("636")
//DR_STRANGE_MYSTIC_BEAM_EFFECT_004: F64 F64.parse("637")
//DR_STRANGE_MYSTIC_BEAM_EFFECT_005: F64 F64.parse("638")
//DR_STRANGE_MYSTIC_BEAM_EFFECT_006: F64 F64.parse("639")
//DR_STRANGE_MYSTIC_BEAM_EFFECT_007: F64 F64.parse("640")
//DR_STRANGE_MYSTIC_BEAM_EFFECT_008: F64 F64.parse("641")
//DR_STRANGE_PORTAL_CAST_000: F64 F64.parse("642")
//DR_STRANGE_PORTAL_CAST_001: F64 F64.parse("643")
//DR_STRANGE_PORTAL_CAST_002: F64 F64.parse("644")
//DR_STRANGE_PORTAL_CAST_003: F64 F64.parse("645")
//DR_STRANGE_PORTAL_CAST_004: F64 F64.parse("646")
//DR_STRANGE_PORTAL_CAST_005: F64 F64.parse("647")
//DR_STRANGE_PORTAL_EFFECT_000: F64 F64.parse("648")
//DR_STRANGE_PORTAL_EFFECT_001: F64 F64.parse("649")
//DR_STRANGE_PORTAL_EFFECT_002: F64 F64.parse("650")
//DR_STRANGE_PORTAL_EFFECT_003: F64 F64.parse("651")
//DR_STRANGE_PORTAL_EFFECT_004: F64 F64.parse("652")
//DR_STRANGE_PORTAL_EFFECT_005: F64 F64.parse("653")
//DR_STRANGE_PORTAL_EFFECT_006: F64 F64.parse("654")
//DR_STRANGE_PORTAL_EFFECT_007: F64 F64.parse("655")
//DR_STRANGE_PORTAL_EFFECT_008: F64 F64.parse("656")
//DR_STRANGE_PORTAL_EFFECT_009: F64 F64.parse("657")
//DR_STRANGE_PORTAL_EFFECT_010: F64 F64.parse("658")
//DR_STRANGE_PORTAL_EFFECT_011: F64 F64.parse("659")
//DR_STRANGE_PORTAL_EFFECT_012: F64 F64.parse("660")
//DR_STRANGE_PORTAL_EFFECT_013: F64 F64.parse("661")
//DR_STRANGE_PORTAL_EFFECT_014: F64 F64.parse("662")
//DR_STRANGE_PORTAL_EFFECT_015: F64 F64.parse("663")
//DR_STRANGE_PORTAL_EFFECT_016: F64 F64.parse("664")
//DR_STRANGE_PORTAL_EFFECT_017: F64 F64.parse("665")
//DR_STRANGE_PORTAL_EFFECT_018: F64 F64.parse("666")
//DR_STRANGE_PORTAL_EFFECT_019: F64 F64.parse("667")
//DR_STRANGE_PORTAL_EFFECT_020: F64 F64.parse("668")
//DR_STRANGE_PORTAL_EFFECT_021: F64 F64.parse("669")
//DR_STRANGE_PORTAL_EFFECT_022: F64 F64.parse("670")
//DR_STRANGE_PORTAL_EFFECT_023: F64 F64.parse("671")
//DR_STRANGE_PORTAL_EFFECT_024: F64 F64.parse("672")
//DR_STRANGE_PORTAL_EFFECT_025: F64 F64.parse("673")
//DR_STRANGE_PORTAL_EFFECT_026: F64 F64.parse("674")
//DR_STRANGE_PORTAL_EFFECT_027: F64 F64.parse("675")
//DR_STRANGE_PORTAL_EFFECT_028: F64 F64.parse("676")
//DR_STRANGE_PORTAL_EFFECT_029: F64 F64.parse("677")
//DR_STRANGE_PORTAL_EFFECT_030: F64 F64.parse("678")
//DR_STRANGE_TIME_STONE_POWER_CAST_000: F64 F64.parse("679")
//DR_STRANGE_TIME_STONE_POWER_CAST_001: F64 F64.parse("680")
//DR_STRANGE_TIME_STONE_POWER_CAST_002: F64 F64.parse("681")
//DR_STRANGE_TIME_STONE_POWER_CAST_003: F64 F64.parse("682")
//DR_STRANGE_TIME_STONE_POWER_CAST_004: F64 F64.parse("683")
//DR_STRANGE_TIME_STONE_POWER_CAST_005: F64 F64.parse("684")
//DR_STRANGE_TIME_STONE_POWER_CAST_006: F64 F64.parse("685")
//DR_STRANGE_TIME_STONE_POWER_CAST_007: F64 F64.parse("686")
//DR_STRANGE_TIME_STONE_POWER_CAST_008: F64 F64.parse("687")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_000: F64 F64.parse("688")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_001: F64 F64.parse("689")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_002: F64 F64.parse("690")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_003: F64 F64.parse("691")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_004: F64 F64.parse("692")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_005: F64 F64.parse("693")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_006: F64 F64.parse("694")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_007: F64 F64.parse("695")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_008: F64 F64.parse("696")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_009: F64 F64.parse("697")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_010: F64 F64.parse("698")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_011: F64 F64.parse("699")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_012: F64 F64.parse("700")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_013: F64 F64.parse("701")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_014: F64 F64.parse("702")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_015: F64 F64.parse("703")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_016: F64 F64.parse("704")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_017: F64 F64.parse("705")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_018: F64 F64.parse("706")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_019: F64 F64.parse("707")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_020: F64 F64.parse("708")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_021: F64 F64.parse("709")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_022: F64 F64.parse("710")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_023: F64 F64.parse("711")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_024: F64 F64.parse("712")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_025: F64 F64.parse("713")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_026: F64 F64.parse("714")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_027: F64 F64.parse("715")
//DR_STRANGE_TIME_STONE_POWER_EFFECT_028: F64 F64.parse("716")
//DR_STRANGE_WALK_000: F64 F64.parse("717")
//DR_STRANGE_WALK_001: F64 F64.parse("718")
//DR_STRANGE_WALK_002: F64 F64.parse("719")
//DR_STRANGE_WALK_003: F64 F64.parse("720")
//ERIC_JACQUIN_DASH_000: F64 F64.parse("721")
//ERIC_JACQUIN_DASH_001: F64 F64.parse("722")
//ERIC_JACQUIN_DASH_002: F64 F64.parse("723")
//ERIC_JACQUIN_DASH_003: F64 F64.parse("724")
//ERIC_JACQUIN_DASH_004: F64 F64.parse("725")
//ERIC_JACQUIN_DASH_005: F64 F64.parse("726")
//ERIC_JACQUIN_DASH_006: F64 F64.parse("727")
//ERIC_JACQUIN_DASH_007: F64 F64.parse("728")
//ERIC_JACQUIN_DASH_008: F64 F64.parse("729")
//ERIC_JACQUIN_DASH_009: F64 F64.parse("730")
//ERIC_JACQUIN_DASH_010: F64 F64.parse("731")
//ERIC_JACQUIN_DASH_011: F64 F64.parse("732")
//ERIC_JACQUIN_DASH_012: F64 F64.parse("733")
//ERIC_JACQUIN_DASH_013: F64 F64.parse("734")
//ERIC_JACQUIN_DASH_014: F64 F64.parse("735")
//ERIC_JACQUIN_DASH_015: F64 F64.parse("736")
//ERIC_JACQUIN_DASH_016: F64 F64.parse("737")
//ERIC_JACQUIN_DASH_017: F64 F64.parse("738")
//ERIC_JACQUIN_IDLE_000: F64 F64.parse("739")
//ERIC_JACQUIN_IDLE_001: F64 F64.parse("740")
//ERIC_JACQUIN_IDLE_002: F64 F64.parse("741")
//ERIC_JACQUIN_IDLE_003: F64 F64.parse("742")
//ERIC_JACQUIN_IDLE_004: F64 F64.parse("743")
//ERIC_JACQUIN_IDLE_005: F64 F64.parse("744")
//ERIC_JACQUIN_IDLE_006: F64 F64.parse("745")
//ERIC_JACQUIN_IDLE_007: F64 F64.parse("746")
//ERIC_JACQUIN_IDLE_008: F64 F64.parse("747")
//ERIC_JACQUIN_IDLE_009: F64 F64.parse("748")
//ERIC_JACQUIN_IDLE_010: F64 F64.parse("749")
//ERIC_JACQUIN_IDLE_011: F64 F64.parse("750")
//ERIC_JACQUIN_IDLE_012: F64 F64.parse("751")
//ERIC_JACQUIN_IDLE_013: F64 F64.parse("752")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_000: F64 F64.parse("753")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_001: F64 F64.parse("754")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_002: F64 F64.parse("755")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_003: F64 F64.parse("756")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_004: F64 F64.parse("757")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_005: F64 F64.parse("758")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_006: F64 F64.parse("759")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_007: F64 F64.parse("760")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_008: F64 F64.parse("761")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_009: F64 F64.parse("762")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_010: F64 F64.parse("763")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_011: F64 F64.parse("764")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_012: F64 F64.parse("765")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_013: F64 F64.parse("766")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_014: F64 F64.parse("767")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_015: F64 F64.parse("768")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_016: F64 F64.parse("769")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_017: F64 F64.parse("770")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_018: F64 F64.parse("771")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_019: F64 F64.parse("772")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_020: F64 F64.parse("773")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_021: F64 F64.parse("774")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_022: F64 F64.parse("775")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_023: F64 F64.parse("776")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_024: F64 F64.parse("777")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_025: F64 F64.parse("778")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_026: F64 F64.parse("779")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_027: F64 F64.parse("780")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_028: F64 F64.parse("781")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_ONE_029: F64 F64.parse("782")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_000: F64 F64.parse("783")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_001: F64 F64.parse("784")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_002: F64 F64.parse("785")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_003: F64 F64.parse("786")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_004: F64 F64.parse("787")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_005: F64 F64.parse("788")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_006: F64 F64.parse("789")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_007: F64 F64.parse("790")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_008: F64 F64.parse("791")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_009: F64 F64.parse("792")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_010: F64 F64.parse("793")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_011: F64 F64.parse("794")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_012: F64 F64.parse("795")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_013: F64 F64.parse("796")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_014: F64 F64.parse("797")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_015: F64 F64.parse("798")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_016: F64 F64.parse("799")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_017: F64 F64.parse("800")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_018: F64 F64.parse("801")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_019: F64 F64.parse("802")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_020: F64 F64.parse("803")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_021: F64 F64.parse("804")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_022: F64 F64.parse("805")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_023: F64 F64.parse("806")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_024: F64 F64.parse("807")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_025: F64 F64.parse("808")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_026: F64 F64.parse("809")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_027: F64 F64.parse("810")
//ERIC_JACQUIN_JACQUIN_WRATH_CASTING_TWO_028: F64 F64.parse("811")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_000: F64 F64.parse("812")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_001: F64 F64.parse("813")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_002: F64 F64.parse("814")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_003: F64 F64.parse("815")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_004: F64 F64.parse("816")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_005: F64 F64.parse("817")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_006: F64 F64.parse("818")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_007: F64 F64.parse("819")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_008: F64 F64.parse("820")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_009: F64 F64.parse("821")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_010: F64 F64.parse("822")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_011: F64 F64.parse("823")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_012: F64 F64.parse("824")
//ERIC_JACQUIN_JACQUIN_WRATH_IDLE_013: F64 F64.parse("825")
//ERIC_JACQUIN_JACQUIN_WRATH_WALK_000: F64 F64.parse("826")
//ERIC_JACQUIN_JACQUIN_WRATH_WALK_001: F64 F64.parse("827")
//ERIC_JACQUIN_JACQUIN_WRATH_WALK_002: F64 F64.parse("828")
//ERIC_JACQUIN_JACQUIN_WRATH_WALK_003: F64 F64.parse("829")
//ERIC_JACQUIN_JACQUIN_WRATH_WALK_004: F64 F64.parse("830")
//ERIC_JACQUIN_JACQUIN_WRATH_WALK_005: F64 F64.parse("831")
//ERIC_JACQUIN_JACQUIN_WRATH_WALK_006: F64 F64.parse("832")
//ERIC_JACQUIN_JACQUIN_WRATH_WALK_007: F64 F64.parse("833")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_000: F64 F64.parse("834")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_001: F64 F64.parse("835")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_002: F64 F64.parse("836")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_003: F64 F64.parse("837")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_004: F64 F64.parse("838")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_005: F64 F64.parse("839")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_006: F64 F64.parse("840")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_007: F64 F64.parse("841")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_008: F64 F64.parse("842")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_009: F64 F64.parse("843")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_010: F64 F64.parse("844")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_011: F64 F64.parse("845")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_012: F64 F64.parse("846")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_013: F64 F64.parse("847")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_014: F64 F64.parse("848")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_015: F64 F64.parse("849")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_016: F64 F64.parse("850")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_017: F64 F64.parse("851")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_018: F64 F64.parse("852")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_019: F64 F64.parse("853")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_020: F64 F64.parse("854")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_CASTING_021: F64 F64.parse("855")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_EFFECT_000: F64 F64.parse("856")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_EFFECT_001: F64 F64.parse("857")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_EFFECT_002: F64 F64.parse("858")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_EFFECT_003: F64 F64.parse("859")
//ERIC_JACQUIN_SHAME_OF_THE_PROFESSION_EFFECT_004: F64 F64.parse("860")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_000: F64 F64.parse("861")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_001: F64 F64.parse("862")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_002: F64 F64.parse("863")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_003: F64 F64.parse("864")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_004: F64 F64.parse("865")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_005: F64 F64.parse("866")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_006: F64 F64.parse("867")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_007: F64 F64.parse("868")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_008: F64 F64.parse("869")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_009: F64 F64.parse("870")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_010: F64 F64.parse("871")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_011: F64 F64.parse("872")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_012: F64 F64.parse("873")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_013: F64 F64.parse("874")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_014: F64 F64.parse("875")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_015: F64 F64.parse("876")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_016: F64 F64.parse("877")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_017: F64 F64.parse("878")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_018: F64 F64.parse("879")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_019: F64 F64.parse("880")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_020: F64 F64.parse("881")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_021: F64 F64.parse("882")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_022: F64 F64.parse("883")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_023: F64 F64.parse("884")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_024: F64 F64.parse("885")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_025: F64 F64.parse("886")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_026: F64 F64.parse("887")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_027: F64 F64.parse("888")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_028: F64 F64.parse("889")
//ERIC_JACQUIN_SHUT_YOUR_MOUTH_CASTING_029: F64 F64.parse("890")
//ERIC_JACQUIN_TAUNT_000: F64 F64.parse("891")
//ERIC_JACQUIN_TAUNT_001: F64 F64.parse("892")
//ERIC_JACQUIN_TAUNT_002: F64 F64.parse("893")
//ERIC_JACQUIN_TAUNT_003: F64 F64.parse("894")
//ERIC_JACQUIN_TAUNT_004: F64 F64.parse("895")
//ERIC_JACQUIN_TAUNT_005: F64 F64.parse("896")
//ERIC_JACQUIN_TAUNT_006: F64 F64.parse("897")
//ERIC_JACQUIN_TAUNT_007: F64 F64.parse("898")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_000: F64 F64.parse("899")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_001: F64 F64.parse("900")

//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_002: F64 F64.parse("901")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_003: F64 F64.parse("902")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_004: F64 F64.parse("903")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_005: F64 F64.parse("904")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_006: F64 F64.parse("905")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_007: F64 F64.parse("906")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_008: F64 F64.parse("907")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_009: F64 F64.parse("908")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_010: F64 F64.parse("909")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_011: F64 F64.parse("910")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_012: F64 F64.parse("911")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_013: F64 F64.parse("912")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_014: F64 F64.parse("913")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_015: F64 F64.parse("914")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_016: F64 F64.parse("915")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_017: F64 F64.parse("916")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_018: F64 F64.parse("917")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_019: F64 F64.parse("918")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_020: F64 F64.parse("919")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_021: F64 F64.parse("920")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_022: F64 F64.parse("921")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_023: F64 F64.parse("922")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_024: F64 F64.parse("923")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_025: F64 F64.parse("924")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_026: F64 F64.parse("925")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_027: F64 F64.parse("926")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_CASTING_028: F64 F64.parse("927")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_EFFECT_000: F64 F64.parse("928")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_EFFECT_001: F64 F64.parse("929")
//ERIC_JACQUIN_TURN_OFF_THE_NIGHT_FREEZER_EFFECT_002: F64 F64.parse("930")
//ERIC_JACQUIN_WALK_000: F64 F64.parse("931")
//ERIC_JACQUIN_WALK_001: F64 F64.parse("932")
//ERIC_JACQUIN_WALK_002: F64 F64.parse("933")
//ERIC_JACQUIN_WALK_003: F64 F64.parse("934")
//ERIC_JACQUIN_WALK_004: F64 F64.parse("935")
//ERIC_JACQUIN_WALK_005: F64 F64.parse("936")
//ERIC_JACQUIN_WALK_006: F64 F64.parse("937")
//FINN_BMO_S_FLASH_000: F64 F64.parse("938")
//FINN_BMO_S_FLASH_001: F64 F64.parse("939")
//FINN_BMO_S_FLASH_002: F64 F64.parse("940")
//FINN_BMO_S_FLASH_003: F64 F64.parse("941")
//FINN_BMO_S_FLASH_004: F64 F64.parse("942")
//FINN_BMO_S_FLASH_005: F64 F64.parse("943")
//FINN_BMO_S_FLASH_006: F64 F64.parse("944")
//FINN_BMO_S_FLASH_007: F64 F64.parse("945")
//FINN_BMO_S_FLASH_008: F64 F64.parse("946")
//FINN_BMO_S_FLASH_009: F64 F64.parse("947")
//FINN_BMO_S_FLASH_010: F64 F64.parse("948")
//FINN_BMO_S_FLASH_011: F64 F64.parse("949")
//FINN_BMO_S_FLASH_012: F64 F64.parse("950")
//FINN_BOW_CAST_ANIMATION_000: F64 F64.parse("951")
//FINN_BOW_CAST_ANIMATION_001: F64 F64.parse("952")
//FINN_BOW_CAST_ANIMATION_002: F64 F64.parse("953")
//FINN_BOW_CAST_ANIMATION_003: F64 F64.parse("954")
//FINN_BOW_CAST_ANIMATION_004: F64 F64.parse("955")
//FINN_BOW_CAST_ANIMATION_005: F64 F64.parse("956")
//FINN_BOW_CAST_ANIMATION_006: F64 F64.parse("957")
//FINN_BOW_PROJECTILE_000: F64 F64.parse("958")
//FINN_CONTAINMENT_CAST_ANIMATION_000: F64 F64.parse("959")
//FINN_CONTAINMENT_CAST_ANIMATION_001: F64 F64.parse("960")
//FINN_CONTAINMENT_CAST_ANIMATION_002: F64 F64.parse("961")
//FINN_CONTAINMENT_IDLE_000: F64 F64.parse("962")
//FINN_CONTAINMENT_IDLE_001: F64 F64.parse("963")
//FINN_CONTAINMENT_IDLE_002: F64 F64.parse("964")
//FINN_CONTAINMENT_IDLE_003: F64 F64.parse("965")
//FINN_CONTAINMENT_IDLE_004: F64 F64.parse("966")
//FINN_EVADE_000: F64 F64.parse("967")
//FINN_EVADE_001: F64 F64.parse("968")
//FINN_EVADE_002: F64 F64.parse("969")
//FINN_EVADE_003: F64 F64.parse("970")
//FINN_EVADE_004: F64 F64.parse("971")
//FINN_EVADE_005: F64 F64.parse("972")
//FINN_HURT_000: F64 F64.parse("973")
//FINN_IDLE_000: F64 F64.parse("974")
//FINN_IDLE_001: F64 F64.parse("975")
//FINN_IDLE_002: F64 F64.parse("976")
//FINN_IDLE_003: F64 F64.parse("977")
//FINN_IDLE_004: F64 F64.parse("978")
//FINN_JAKE_S_FURY_000: F64 F64.parse("979")
//FINN_JAKE_S_FURY_001: F64 F64.parse("980")
//FINN_JAKE_S_FURY_002: F64 F64.parse("981")
//FINN_JAKE_S_FURY_003: F64 F64.parse("982")
//FINN_JAKE_S_FURY_004: F64 F64.parse("983")
//FINN_JAKE_S_FURY_005: F64 F64.parse("984")
//FINN_JAKE_S_FURY_006: F64 F64.parse("985")
//FINN_JAKE_S_FURY_007: F64 F64.parse("986")
//FINN_JAKE_S_FURY_008: F64 F64.parse("987")
//FINN_JAKE_S_FURY_009: F64 F64.parse("988")
//FINN_JAKE_S_FURY_010: F64 F64.parse("989")
//FINN_JAKE_S_FURY_011: F64 F64.parse("990")
//FINN_JAKE_S_FURY_012: F64 F64.parse("991")
//FINN_JAKE_S_FURY_013: F64 F64.parse("992")
//FINN_JAKE_S_FURY_014: F64 F64.parse("993")
//FINN_JAKE_S_FURY_015: F64 F64.parse("994")
//FINN_JAKE_S_FURY_016: F64 F64.parse("995")
//FINN_JAKE_S_FURY_017: F64 F64.parse("996")
//FINN_JAKE_S_FURY_018: F64 F64.parse("997")
//FINN_JAKE_S_FURY_019: F64 F64.parse("998")
//FINN_JAKE_S_FURY_020: F64 F64.parse("999")
//FINN_JAKE_S_FURY_021: F64 F64.parse("1000")
//FINN_JAKE_S_FURY_022: F64 F64.parse("1001")
//FINN_JAKE_S_FURY_023: F64 F64.parse("1002")
//FINN_JAKE_S_FURY_024: F64 F64.parse("1003")
//FINN_JAKE_S_FURY_025: F64 F64.parse("1004")
//FINN_TAUNT_000: F64 F64.parse("1005")
//FINN_TAUNT_001: F64 F64.parse("1006")
//FINN_TAUNT_002: F64 F64.parse("1007")
//FINN_TAUNT_003: F64 F64.parse("1008")
//FINN_TAUNT_004: F64 F64.parse("1009")
//FINN_TAUNT_005: F64 F64.parse("1010")
//FINN_TAUNT_006: F64 F64.parse("1011")
//FINN_TAUNT_007: F64 F64.parse("1012")
//FINN_TAUNT_008: F64 F64.parse("1013")
//FINN_TAUNT_009: F64 F64.parse("1014")
//FINN_TAUNT_010: F64 F64.parse("1015")
//FINN_TAUNT_011: F64 F64.parse("1016")
//FINN_TAUNT_012: F64 F64.parse("1017")
//FINN_TAUNT_013: F64 F64.parse("1018")
//FINN_TAUNT_014: F64 F64.parse("1019")
//FINN_TAUNT_015: F64 F64.parse("1020")
//FINN_TAUNT_016: F64 F64.parse("1021")
//FINN_TRIPLE_TAKE_AUX_000: F64 F64.parse("1022")
//FINN_TRIPLE_TAKE_000: F64 F64.parse("1023")
//FINN_TRIPLE_TAKE_001: F64 F64.parse("1024")
//FINN_TRIPLE_TAKE_002: F64 F64.parse("1025")
//FINN_TRIPLE_TAKE_003: F64 F64.parse("1026")
//FINN_TRIPLE_TAKE_004: F64 F64.parse("1027")
//FINN_TRIPLE_TAKE_005: F64 F64.parse("1028")
//FINN_TRIPLE_TAKE_006: F64 F64.parse("1029")
//FINN_TRIPLE_TAKE_007: F64 F64.parse("1030")
//FINN_TRIPLE_TAKE_008: F64 F64.parse("1031")
//FINN_TRIPLE_TAKE_009: F64 F64.parse("1032")
//FINN_TRIPLE_TAKE_010: F64 F64.parse("1033")
//FINN_TRIPLE_TAKE_011: F64 F64.parse("1034")
//FINN_TRIPLE_TAKE_012: F64 F64.parse("1035")
//FINN_TRIPLE_TAKE_013: F64 F64.parse("1036")
//FINN_TRIPLE_TAKE_014: F64 F64.parse("1037")
//FINN_TRIPLE_TAKE_015: F64 F64.parse("1038")
//FINN_TRIPLE_TAKE_016: F64 F64.parse("1039")
//FINN_WALK_CYCLE_000: F64 F64.parse("1040")
//FINN_WALK_CYCLE_001: F64 F64.parse("1041")
//FINN_WALK_CYCLE_002: F64 F64.parse("1042")
//FINN_WALK_CYCLE_003: F64 F64.parse("1043")
//FINN_WALK_CYCLE_004: F64 F64.parse("1044")
//FINN_WALK_CYCLE_005: F64 F64.parse("1045")
//FINN_WALK_CYCLE_006: F64 F64.parse("1046")
//FINN_WALK_CYCLE_007: F64 F64.parse("1047")
//GON_FREECS_AFTER_ULTIMATE_IDLE_000: F64 F64.parse("1048")
//GON_FREECS_AFTER_ULTIMATE_IDLE_001: F64 F64.parse("1049")
//GON_FREECS_AFTER_ULTIMATE_IDLE_002: F64 F64.parse("1050")
//GON_FREECS_AFTER_ULTIMATE_IDLE_003: F64 F64.parse("1051")
//GON_FREECS_AFTER_ULTIMATE_IDLE_004: F64 F64.parse("1052")
//GON_FREECS_AFTER_ULTIMATE_IDLE_005: F64 F64.parse("1053")
//GON_FREECS_AFTER_ULTIMATE_IDLE_006: F64 F64.parse("1054")
//GON_FREECS_AFTER_ULTIMATE_IDLE_007: F64 F64.parse("1055")
//GON_FREECS_AFTER_ULTIMATE_WALK_000: F64 F64.parse("1056")
//GON_FREECS_AFTER_ULTIMATE_WALK_001: F64 F64.parse("1057")
//GON_FREECS_AFTER_ULTIMATE_WALK_002: F64 F64.parse("1058")
//GON_FREECS_AFTER_ULTIMATE_WALK_003: F64 F64.parse("1059")
//GON_FREECS_AFTER_ULTIMATE_WALK_004: F64 F64.parse("1060")
//GON_FREECS_AFTER_ULTIMATE_WALK_005: F64 F64.parse("1061")
//GON_FREECS_AFTER_ULTIMATE_WALK_006: F64 F64.parse("1062")
//GON_FREECS_AFTER_ULTIMATE_WALK_007: F64 F64.parse("1063")
//GON_FREECS_AFTER_ULTIMATE_WALK_008: F64 F64.parse("1064")
//GON_FREECS_AFTER_ULTIMATE_WALK_009: F64 F64.parse("1065")
//GON_FREECS_AFTER_ULTIMATE_WALK_010: F64 F64.parse("1066")
//GON_FREECS_AFTER_ULTIMATE_WALK_011: F64 F64.parse("1067")
//GON_FREECS_DESABLED_NEM_FX_000: F64 F64.parse("1068")
//GON_FREECS_DESABLED_NEM_FX_001: F64 F64.parse("1069")
//GON_FREECS_DESABLED_NEM_FX_002: F64 F64.parse("1070")
//GON_FREECS_DESABLED_NEM_FX_003: F64 F64.parse("1071")
//GON_FREECS_DESABLED_NEM_FX_004: F64 F64.parse("1072")
//GON_FREECS_DESABLED_NEM_FX_005: F64 F64.parse("1073")
//GON_FREECS_DESABLED_NEM_FX_006: F64 F64.parse("1074")
//GON_FREECS_DESABLED_NEM_FX_007: F64 F64.parse("1075")
//GON_FREECS_DESABLED_NEM_FX_008: F64 F64.parse("1076")
//GON_FREECS_IDLE_000: F64 F64.parse("1077")
//GON_FREECS_IDLE_001: F64 F64.parse("1078")
//GON_FREECS_IDLE_002: F64 F64.parse("1079")
//GON_FREECS_IDLE_003: F64 F64.parse("1080")
//GON_FREECS_IDLE_004: F64 F64.parse("1081")
//GON_FREECS_IDLE_005: F64 F64.parse("1082")
//GON_FREECS_IDLE_006: F64 F64.parse("1083")
//GON_FREECS_IDLE_007: F64 F64.parse("1084")
//GON_FREECS_IDLE_008: F64 F64.parse("1085")
//GON_FREECS_IDLE_009: F64 F64.parse("1086")
//GON_FREECS_IDLE_010: F64 F64.parse("1087")
//GON_FREECS_IDLE_011: F64 F64.parse("1088")
//GON_FREECS_IDLE_012: F64 F64.parse("1089")
//GON_FREECS_IDLE_013: F64 F64.parse("1090")
//GON_FREECS_IDLE_014: F64 F64.parse("1091")
//GON_FREECS_IDLE_015: F64 F64.parse("1092")
//GON_FREECS_INTENSIFICATION_FX_000: F64 F64.parse("1093")
//GON_FREECS_INTENSIFICATION_FX_001: F64 F64.parse("1094")
//GON_FREECS_INTENSIFICATION_FX_002: F64 F64.parse("1095")
//GON_FREECS_INTENSIFICATION_FX_003: F64 F64.parse("1096")
//GON_FREECS_INTENSIFICATION_FX_004: F64 F64.parse("1097")
//GON_FREECS_INTENSIFICATION_FX_005: F64 F64.parse("1098")
//GON_FREECS_INTENSIFICATION_FX_006: F64 F64.parse("1099")
//GON_FREECS_INTENSIFICATION_FX_007: F64 F64.parse("1100")
//GON_FREECS_INTENSIFICATION_FX_008: F64 F64.parse("1101")
//GON_FREECS_INTENSIFICATION_000: F64 F64.parse("1102")
//GON_FREECS_INTENSIFICATION_001: F64 F64.parse("1103")
//GON_FREECS_INTENSIFICATION_002: F64 F64.parse("1104")
//GON_FREECS_INTENSIFICATION_003: F64 F64.parse("1105")
//GON_FREECS_INTENSIFICATION_004: F64 F64.parse("1106")
//GON_FREECS_INTENSIFICATION_005: F64 F64.parse("1107")
//GON_FREECS_INTENSIFICATION_006: F64 F64.parse("1108")
//GON_FREECS_INTENSIFICATION_007: F64 F64.parse("1109")
//GON_FREECS_INTENSIFICATION_008: F64 F64.parse("1110")
//GON_FREECS_INTENSIFICATION_009: F64 F64.parse("1111")
//GON_FREECS_JAJANKEN_PAPER_CASTING_000: F64 F64.parse("1112")
//GON_FREECS_JAJANKEN_PAPER_CASTING_001: F64 F64.parse("1113")
//GON_FREECS_JAJANKEN_PAPER_CASTING_002: F64 F64.parse("1114")
//GON_FREECS_JAJANKEN_PAPER_CASTING_003: F64 F64.parse("1115")
//GON_FREECS_JAJANKEN_PAPER_CASTING_004: F64 F64.parse("1116")
//GON_FREECS_JAJANKEN_PAPER_CASTING_005: F64 F64.parse("1117")
//GON_FREECS_JAJANKEN_PAPER_CASTING_006: F64 F64.parse("1118")
//GON_FREECS_JAJANKEN_PAPER_CASTING_007: F64 F64.parse("1119")
//GON_FREECS_JAJANKEN_PAPER_CASTING_008: F64 F64.parse("1120")
//GON_FREECS_JAJANKEN_PAPER_CASTING_009: F64 F64.parse("1121")
//GON_FREECS_JAJANKEN_PAPER_CASTING_010: F64 F64.parse("1122")
//GON_FREECS_JAJANKEN_PAPER_CASTING_011: F64 F64.parse("1123")
//GON_FREECS_JAJANKEN_PAPER_CASTING_012: F64 F64.parse("1124")
//GON_FREECS_JAJANKEN_PAPER_CASTING_013: F64 F64.parse("1125")
//GON_FREECS_JAJANKEN_PAPER_CASTING_014: F64 F64.parse("1126")
//GON_FREECS_JAJANKEN_PAPER_CASTING_015: F64 F64.parse("1127")
//GON_FREECS_JAJANKEN_PAPER_CASTING_016: F64 F64.parse("1128")
//GON_FREECS_JAJANKEN_PAPER_PROJECTILE_000: F64 F64.parse("1129")
//GON_FREECS_JAJANKEN_PAPER_PROJECTILE_001: F64 F64.parse("1130")
//GON_FREECS_JAJANKEN_PAPER_PROJECTILE_002: F64 F64.parse("1131")
//GON_FREECS_JAJANKEN_PAPER_PROJECTILE_003: F64 F64.parse("1132")
//GON_FREECS_JAJANKEN_PAPER_PROJECTILE_004: F64 F64.parse("1133")
//GON_FREECS_JAJANKEN_PAPER_PROJECTILE_005: F64 F64.parse("1134")
//GON_FREECS_JAJANKEN_PAPER_PROJECTILE_006: F64 F64.parse("1135")
//GON_FREECS_JAJANKEN_PAPER_PROJECTILE_007: F64 F64.parse("1136")
//GON_FREECS_JAJANKEN_SCISSORS_000: F64 F64.parse("1137")
//GON_FREECS_JAJANKEN_SCISSORS_001: F64 F64.parse("1138")
//GON_FREECS_JAJANKEN_SCISSORS_002: F64 F64.parse("1139")
//GON_FREECS_JAJANKEN_SCISSORS_003: F64 F64.parse("1140")
//GON_FREECS_JAJANKEN_SCISSORS_004: F64 F64.parse("1141")
//GON_FREECS_JAJANKEN_SCISSORS_005: F64 F64.parse("1142")
//GON_FREECS_JAJANKEN_SCISSORS_006: F64 F64.parse("1143")
//GON_FREECS_JAJANKEN_SCISSORS_007: F64 F64.parse("1144")
//GON_FREECS_JAJANKEN_SCISSORS_008: F64 F64.parse("1145")
//GON_FREECS_JAJANKEN_SCISSORS_009: F64 F64.parse("1146")
//GON_FREECS_JAJANKEN_SCISSORS_010: F64 F64.parse("1147")
//GON_FREECS_JAJANKEN_SCISSORS_011: F64 F64.parse("1148")
//GON_FREECS_JAJANKEN_SCISSORS_012: F64 F64.parse("1149")
//GON_FREECS_JAJANKEN_SCISSORS_013: F64 F64.parse("1150")
//GON_FREECS_JAJANKEN_SCISSORS_014: F64 F64.parse("1151")
//GON_FREECS_JAJANKEN_SCISSORS_015: F64 F64.parse("1152")
//GON_FREECS_JAJANKEN_SCISSORS_016: F64 F64.parse("1153")
//GON_FREECS_JAJANKEN_SCISSORS_017: F64 F64.parse("1154")
//GON_FREECS_JAJANKEN_STONE_000: F64 F64.parse("1155")
//GON_FREECS_JAJANKEN_STONE_001: F64 F64.parse("1156")
//GON_FREECS_JAJANKEN_STONE_002: F64 F64.parse("1157")
//GON_FREECS_JAJANKEN_STONE_003: F64 F64.parse("1158")
//GON_FREECS_JAJANKEN_STONE_004: F64 F64.parse("1159")
//GON_FREECS_JAJANKEN_STONE_005: F64 F64.parse("1160")
//GON_FREECS_JAJANKEN_STONE_006: F64 F64.parse("1161")
//GON_FREECS_JAJANKEN_STONE_007: F64 F64.parse("1162")
//GON_FREECS_JAJANKEN_STONE_008: F64 F64.parse("1163")
//GON_FREECS_JAJANKEN_STONE_009: F64 F64.parse("1164")
//GON_FREECS_JAJANKEN_STONE_010: F64 F64.parse("1165")
//GON_FREECS_JAJANKEN_STONE_011: F64 F64.parse("1166")
//GON_FREECS_JAJANKEN_STONE_012: F64 F64.parse("1167")
//GON_FREECS_JAJANKEN_STONE_013: F64 F64.parse("1168")
//GON_FREECS_JAJANKEN_STONE_014: F64 F64.parse("1169")
//GON_FREECS_JAJANKEN_STONE_015: F64 F64.parse("1170")
//GON_FREECS_JAJANKEN_STONE_016: F64 F64.parse("1171")
//GON_FREECS_JAJANKEN_STONE_017: F64 F64.parse("1172")
//GON_FREECS_JAJANKEN_STONE_018: F64 F64.parse("1173")
//GON_FREECS_JAJANKEN_STONE_019: F64 F64.parse("1174")
//GON_FREECS_JAJANKEN_STONE_020: F64 F64.parse("1175")
//GON_FREECS_JAJANKEN_STONE_021: F64 F64.parse("1176")
//GON_FREECS_JAJANKEN_STONE_022: F64 F64.parse("1177")
//GON_FREECS_TAUNT_TEXT_000: F64 F64.parse("1178")
//GON_FREECS_TAUNT_000: F64 F64.parse("1179")
//GON_FREECS_TAUNT_001: F64 F64.parse("1180")
//GON_FREECS_TAUNT_002: F64 F64.parse("1181")
//GON_FREECS_TAUNT_003: F64 F64.parse("1182")
//GON_FREECS_TAUNT_004: F64 F64.parse("1183")
//GON_FREECS_TAUNT_005: F64 F64.parse("1184")
//GON_FREECS_TAUNT_006: F64 F64.parse("1185")
//GON_FREECS_TAUNT_007: F64 F64.parse("1186")
//GON_FREECS_TAUNT_008: F64 F64.parse("1187")
//GON_FREECS_TAUNT_009: F64 F64.parse("1188")
//GON_FREECS_TAUNT_010: F64 F64.parse("1189")
//GON_FREECS_TAUNT_011: F64 F64.parse("1190")
//GON_FREECS_TAUNT_012: F64 F64.parse("1191")
//GON_FREECS_TAUNT_013: F64 F64.parse("1192")
//GON_FREECS_TAUNT_014: F64 F64.parse("1193")
//GON_FREECS_TAUNT_015: F64 F64.parse("1194")
//GON_FREECS_TAUNT_016: F64 F64.parse("1195")
//GON_FREECS_TRANFORMED_IDLE_000: F64 F64.parse("1196")
//GON_FREECS_TRANFORMED_IDLE_001: F64 F64.parse("1197")
//GON_FREECS_TRANFORMED_IDLE_002: F64 F64.parse("1198")
//GON_FREECS_TRANFORMED_IDLE_003: F64 F64.parse("1199")
//GON_FREECS_TRANFORMED_IDLE_004: F64 F64.parse("1200")

//GON_FREECS_TRANFORMED_IDLE_005: F64 F64.parse("1201")
//GON_FREECS_TRANFORMED_IDLE_006: F64 F64.parse("1202")
//GON_FREECS_TRANFORMED_IDLE_007: F64 F64.parse("1203")
//GON_FREECS_TRANFORMED_IDLE_008: F64 F64.parse("1204")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_000: F64 F64.parse("1205")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_001: F64 F64.parse("1206")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_002: F64 F64.parse("1207")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_003: F64 F64.parse("1208")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_004: F64 F64.parse("1209")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_005: F64 F64.parse("1210")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_006: F64 F64.parse("1211")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_007: F64 F64.parse("1212")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_008: F64 F64.parse("1213")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_009: F64 F64.parse("1214")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_010: F64 F64.parse("1215")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_011: F64 F64.parse("1216")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_012: F64 F64.parse("1217")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_013: F64 F64.parse("1218")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_014: F64 F64.parse("1219")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_015: F64 F64.parse("1220")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_016: F64 F64.parse("1221")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_017: F64 F64.parse("1222")
//GON_FREECS_TRANFORMED_JAJANKEN_SCISSOR_018: F64 F64.parse("1223")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_PROJETIL_000: F64 F64.parse("1224")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_PROJETIL_001: F64 F64.parse("1225")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_PROJETIL_002: F64 F64.parse("1226")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_PROJETIL_003: F64 F64.parse("1227")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_PROJETIL_004: F64 F64.parse("1228")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_PROJETIL_005: F64 F64.parse("1229")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_PROJETIL_006: F64 F64.parse("1230")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_PROJETIL_007: F64 F64.parse("1231")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_000: F64 F64.parse("1232")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_001: F64 F64.parse("1233")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_002: F64 F64.parse("1234")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_003: F64 F64.parse("1235")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_004: F64 F64.parse("1236")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_005: F64 F64.parse("1237")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_006: F64 F64.parse("1238")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_007: F64 F64.parse("1239")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_008: F64 F64.parse("1240")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_009: F64 F64.parse("1241")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_010: F64 F64.parse("1242")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_011: F64 F64.parse("1243")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_012: F64 F64.parse("1244")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_013: F64 F64.parse("1245")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_014: F64 F64.parse("1246")
//GON_FREECS_TRANSFORMED_JAJANKEN_PAPER_015: F64 F64.parse("1247")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_000: F64 F64.parse("1248")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_001: F64 F64.parse("1249")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_002: F64 F64.parse("1250")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_003: F64 F64.parse("1251")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_004: F64 F64.parse("1252")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_005: F64 F64.parse("1253")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_006: F64 F64.parse("1254")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_007: F64 F64.parse("1255")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_008: F64 F64.parse("1256")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_009: F64 F64.parse("1257")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_010: F64 F64.parse("1258")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_011: F64 F64.parse("1259")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_012: F64 F64.parse("1260")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_013: F64 F64.parse("1261")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_014: F64 F64.parse("1262")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_015: F64 F64.parse("1263")
//GON_FREECS_TRANSFORMED_JAJANKEN_STONE_016: F64 F64.parse("1264")
//GON_FREECS_TRANSFORMED_WALK_000: F64 F64.parse("1265")
//GON_FREECS_TRANSFORMED_WALK_001: F64 F64.parse("1266")
//GON_FREECS_TRANSFORMED_WALK_002: F64 F64.parse("1267")
//GON_FREECS_TRANSFORMED_WALK_003: F64 F64.parse("1268")
//GON_FREECS_TRANSFORMED_WALK_004: F64 F64.parse("1269")
//GON_FREECS_TRANSFORMED_WALK_005: F64 F64.parse("1270")
//GON_FREECS_TRANSFORMED_WALK_006: F64 F64.parse("1271")
//GON_FREECS_TRANSFORMED_WALK_007: F64 F64.parse("1272")
//GON_FREECS_ULTIMATE_TRANSFORMATION_000: F64 F64.parse("1273")
//GON_FREECS_ULTIMATE_TRANSFORMATION_001: F64 F64.parse("1274")
//GON_FREECS_ULTIMATE_TRANSFORMATION_002: F64 F64.parse("1275")
//GON_FREECS_ULTIMATE_TRANSFORMATION_003: F64 F64.parse("1276")
//GON_FREECS_ULTIMATE_TRANSFORMATION_004: F64 F64.parse("1277")
//GON_FREECS_ULTIMATE_TRANSFORMATION_005: F64 F64.parse("1278")
//GON_FREECS_ULTIMATE_TRANSFORMATION_006: F64 F64.parse("1279")
//GON_FREECS_ULTIMATE_TRANSFORMATION_007: F64 F64.parse("1280")
//GON_FREECS_ULTIMATE_TRANSFORMATION_008: F64 F64.parse("1281")
//GON_FREECS_ULTIMATE_TRANSFORMATION_009: F64 F64.parse("1282")
//GON_FREECS_ULTIMATE_TRANSFORMATION_010: F64 F64.parse("1283")
//GON_FREECS_ULTIMATE_TRANSFORMATION_011: F64 F64.parse("1284")
//GON_FREECS_ULTIMATE_TRANSFORMATION_012: F64 F64.parse("1285")
//GON_FREECS_ULTIMATE_TRANSFORMATION_013: F64 F64.parse("1286")
//GON_FREECS_ULTIMATE_TRANSFORMATION_014: F64 F64.parse("1287")
//GON_FREECS_ULTIMATE_TRANSFORMATION_015: F64 F64.parse("1288")
//GON_FREECS_WALK_000: F64 F64.parse("1289")
//GON_FREECS_WALK_001: F64 F64.parse("1290")
//GON_FREECS_WALK_002: F64 F64.parse("1291")
//GON_FREECS_WALK_003: F64 F64.parse("1292")
//GON_FREECS_WALK_004: F64 F64.parse("1293")
//GON_FREECS_WALK_005: F64 F64.parse("1294")
//POSTE_IDLE_000: F64 F64.parse("1295")
//PUNCHINGBAG_IDLE_000: F64 F64.parse("1296")
//PUNCHINGBAG_IDLE_001: F64 F64.parse("1297")
//PUNCHINGBAG_IDLE_002: F64 F64.parse("1298")
//PUNCHINGBAG_IDLE_003: F64 F64.parse("1299")
//PUNCHINGBAG_IDLE_004: F64 F64.parse("1300")
//PUNCHINGBAG_IDLE_005: F64 F64.parse("1301")
//PUNCHINGBAG_IDLE_006: F64 F64.parse("1302")
//PUNCHINGBAG_IDLE_007: F64 F64.parse("1303")
//PUNCHINGBAG_IDLE_008: F64 F64.parse("1304")
//PUNCHINGBAG_IDLE_009: F64 F64.parse("1305")
//PUNCHINGBAG_IDLE_010: F64 F64.parse("1306")
//PUNCHINGBAG_IDLE_011: F64 F64.parse("1307")
//PUNCHINGBAG_IDLE_012: F64 F64.parse("1308")
//PUNCHINGBAG_IDLE_013: F64 F64.parse("1309")
//PUNCHINGBAG_IDLE_014: F64 F64.parse("1310")
//PUNCHINGBAG_IDLE_015: F64 F64.parse("1311")
//PUNCHINGBAG_IDLE_016: F64 F64.parse("1312")
//PUNCHINGBAG_IDLE_017: F64 F64.parse("1313")
//PUNCHINGBAG_IDLE_018: F64 F64.parse("1314")
//PUNCHINGBAG_IDLE_019: F64 F64.parse("1315")
//PUNCHINGBAG_IDLE_020: F64 F64.parse("1316")
//PUNCHINGBAG_IDLE_021: F64 F64.parse("1317")
//PUNCHINGBAG_IDLE_022: F64 F64.parse("1318")
//PUNCHINGBAG_IDLE_023: F64 F64.parse("1319")
//WALL_IDLE_000: F64 F64.parse("1320")

//// Performs an animation, reseting to idle when it ends
//// - self: thing to be animated
//// - boost: speed multiplier (0 = no move, 1 = normal spd)
//// - model: id of the first model of the animation
//// - count: total count of models on the animation
//// - durat: duration of the animation

//TA.Thing.animate
  //: (self: TA.Thing) ->
    //(boost: F64)          ->
    //(model: F64)          ->
    //(count: F64)          ->
    //(durat: F64)          ->
    //TA.Thing
  //(self) (boost) (model) (count) (durat)
  //let self = 
    //TA.Thing.animate_between
    //| self;
    //| boost;
    //| model;
    //| count;
    //| F64.0;
    //| durat;
  //let self = TA.Thing.reset(self)(F64.sub(durat)(F64.1))
  //self
  
//// animate(
////   self  : Thing,
////   boost : Number,
////   model : Number,
////   count : Number,
////   durat : Number
////   ) : Thing
////   let self = animate_between(self,boost,model,count,0,durat)
////   let self = reset(self, durat - 1)
////   self
//// Performs an animation, reseting to idle when it ends
//// - self: thing to be animated
//// - boost: speed multiplier (0 = no move, 1 = normal spd)
//// - model: id of the first model of the animation
//// - count: total count of models on the animation
//// - from: frame to start animating
//// - til: last frame to animate

//TA.Thing.animate_between
  //: (self: TA.Thing) -> 
    //(boost: F64)          -> 
    //(model: F64)          -> 
    //(count: F64)          -> 
    //(from: F64)           -> 
    //(til: F64)            -> 
    //TA.Thing
  //(self) (boost) (model) (count) (from) (til)
  //let self.tik = TA.Thing.get_tik(self)
  //let self.pad = TA.Thing.get_pad(self)
  //let self.act = TA.Thing.get_act(self)
  //let self.dir = TA.Thing.get_dir(self)
  //Bool.if<TA.Thing>(F64.is_between(from)(til)(self.tik))
  //| let set_bst = TA.Thing.set_bst(self)(boost)
    //let set_dir = 
      //TA.Thing.set_dir(self)
      //| let pad_len = F64.V3.len(self.pad)
        //Bool.if<F64.V3>(Bool.and(F64.ltn(F64.0)(self.act))(F64.eql(pad_len)(F64.0)))
        //| TA.Thing.targ_dir(self);
        //| Bool.if<F64.V3>(F64.ltn(F64.0)(pad_len))
          //| F64.V3.norm(self.pad);
          //| self.dir;;
      //;
    //let set_mid = TA.Thing.set_mid(self)
    //| let duration = F64.sub(til)(from)
      //let curr_tik = F64.sub(self.tik)(from)
      //let curr_tim = F64.div(curr_tik)(duration)
      //F64.add(model)(F64.mod(F64.floor(F64.mul(curr_tim)(count)))(count))
    //;
    //self;
  //| self;
  
//// animate_between(
////   self  : Thing,
////   boost : Number,
////   model : Number,
////   count : Number,
////   from  : Number,
////   til   : Number
////   ) : Thing
////   case self |thing
////   if is_between(from, til, self.tik) then
////     self <= thing(
////       bst = boost,
////       dir =
////         let pad_len = len_v3(pad)
////         if (act > 0) && (pad_len === 0) then
////           targ_dir(self)
////         else if pad_len > 0 then
////           norm_v3(pad)
////         else
////           dir,
////       mid =
////         let duration = til - from
////         let curr_tik = tik - from
////         let curr_tim = curr_tik \ duration
////         model + (floor(curr_tim * count) % count))
////   else
////     self
//// Performs an animation, dying when it ends
//// - self: thing to be animated
//// - boost: speed multiplier (0 = no move, 1 = normal spd)
//// - model: id of the first model of the animation
//// - count: total count of models on the animation
//// - durat: duration of the animation

//TA.Thing.animate_die
  //: (self: TA.Thing) ->
    //(boost: F64)          ->
    //(model: F64)          ->
    //(count: F64)          ->
    //(durat: F64)          ->
    //TA.Thing
  //(self) (boost) (model) (count) (durat)
  //let self = 
    //TA.Thing.animate_between
    //| self;
    //| boost;
    //| model;
    //| count;
    //| F64.0;
    //| durat;
  //let self = TA.Thing.die(self)(F64.sub(durat)(F64.1))
  //self

//// animate_die(
////   self  : Thing,
////   boost : Number,
////   model : Number,
////   count : Number,
////   durat : Number
////   ) : Thing
////   let self = animate_between(self,boost,model,count,0,durat)
////   let self = die(self, durat - 1)
////   self
//// Avoid problems with "ghost frame after blink"
//// - self: thing to be animated
//// - boost: speed multiplier (0 = no move, 1 = normal spd)
//// - model_atk: id of the main model of the animation
//// - model_idle: idle000 of the character
//// - count: total count of models on the animation
//// - from: frame to start animating
//// - til: last frame to animate

//TA.Thing.animate_with_blink  
  //: (self: TA.Thing) -> 
    //(boost: F64)          -> 
    //(model_atk: F64)      -> 
    //(model_idle: F64)     -> 
    //(count: F64)          -> 
    //(from: F64)           -> 
    //(til: F64)            -> 
    //TA.Thing
  //(self) (boost) (model_atk) (model_idle) (count) (from) (til)
  //let self = TA.Thing.animate_between
    //| self;
    //| boost;
    //| model_atk;
    //| count;
    //| from;
    //| til;
  //let self = TA.Thing.animate_between
    //| self;
    //| boost;
    //| model_idle;
    //| F64.1;
    //| til;
    //| F64.add(til)(F64.1);
  //let self = TA.Thing.reset(self)(til)
  //self

//// animate_with_blink(
////   self       : Thing,
////   boost      : Number,
////   model_atk  : Number,
////   model_idle : Number,
////   count      : Number,
////   from       : Number,
////   til        : Number
////   ) : Thing
////   case self | thing
////     let self = animate_between(self, boost, model_atk, count, from, til)
////     let self = animate_between(self, boost, model_idle, 1, til, til + 1)
////     let self = reset(self, til)
////     self

//// Returns the position at a given distance towards targ_dir
//// at_dist(self: Thing, dist: Number)
////   case self |thing
////   let dir = targ_dir(self)
////   let pos = add_v3(self.pos, scale_v3(dist, dir))
////   pos
//TA.Thing.at_dist: TA.Thing -> F64 -> F64.V3
  //(self) (dist)
  //let dir = TA.Thing.targ_dir(self)
  //let pos = TA.Thing.get_pos(self)
  //F64.V3.add(pos)(F64.V3.scale(dist)(dir)) 
  
//// Return the position within a maximum range towards targ_dir
//// at_max_dist(self: Thing, max_range: Number)
////   case self |thing
////   let dist_max = dist_v3(self.pos, at_dist(self, max_range))
////   let dist_trg = dist_v3(self.pos, self.trg)
////   if dist_trg < dist_max
////     then at_dist(self, dist_trg)
////     else at_dist(self, max_range)

//TA.Thing.at_max_dist: TA.Thing -> F64 -> F64.V3
  //(self) (max_range)
  //let self_pos  = TA.Thing.get_pos(self)
  //let self_trg  = TA.Thing.get_trg(self)
  //let dist_max  = F64.V3.dist(self_pos)(TA.Thing.at_dist(self)(max_range))
  //let dist_trg  = F64.V3.dist(self_pos)(self_trg)
  //let less_than = F64.ltn(dist_trg)(dist_max)
  //F64.if<F64.V3>(F64.from_bool(less_than))
  //| TA.Thing.at_dist(self)(dist_trg);
  //| TA.Thing.at_dist(self)(max_range);

//// Return the position within a mininum range towards targ_dir
//// at_min_dist(self: Thing, min_range: Number)
////   case self |thing
////   let dist_min = dist_v3(self.pos, at_dist(self, min_range))
////   let dist_trg = dist_v3(self.pos, self.trg)
////   if dist_trg > dist_min
////     then at_dist(self, dist_trg)
////     else at_dist(self, min_range)

//TA.Thing.at_min_dist: TA.Thing -> F64 -> F64.V3
  //(self) (min_range)
  //let self_pos  = TA.Thing.get_pos(self)
  //let self_trg  = TA.Thing.get_trg(self)
  //let dist_min  = F64.V3.dist(self_pos)(TA.Thing.at_dist(self)(min_range))
  //let dist_trg  = F64.V3.dist(self_pos)(self_trg)
  //let less_than = F64.ltn(dist_min)(dist_trg)
  //F64.if<F64.V3>(F64.from_bool(less_than))
  //| TA.Thing.at_dist(self)(dist_trg);
  //| TA.Thing.at_dist(self)(min_range);

//// Return the position within a mininum and maximun range towards look_dir
//// between_dist(self: Thing, min_range: Number, max_range: Number)
////   case self |thing
////   let dist_trg = dist_v3(self.pos, self.trg)
////   at_dist(self, max(min_range, min(max_range, dist_trg)))

//TA.Thing.between_dist: TA.Thing -> F64 -> F64 -> F64.V3
  //(self) (min_range) (max_range)
  //let self_pos = TA.Thing.get_pos(self)
  //let self_trg = TA.Thing.get_trg(self) 
  //let dist_trg = F64.V3.dist(self_pos)(self_trg)
  //let min = F64.min(max_range)(dist_trg)
  //let max = F64.max(min_range)(min)
  //TA.Thing.at_dist(self)(max)


//TA.Thing.bleskape_fun: (self: TA.Thing) -> TA.Thing
  //(self)
  //let self = TA.Thing.set_mov(self)(F64.parse("2"))
  //let self = TA.Thing.set_mhp(self)(F64.parse("24"))
  //let self.act = TA.Thing.get_act(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let self.pos = TA.Thing.get_pos(self)

  //Bool.if<>(F64.eql(self.act)(F64.0))
  //| #BLESKAPE_IDLE#
    //F64.if<>(TA.Thing.is_walking(self))
    //| TA.Thing.animate(self)(F64.1)(BLESKAPE_WALK_000)
      //| F64.parse("4");
      //| F64.parse("16");;
    //| TA.Thing.animate(self)(F64.1)(BLESKAPE_IDLE_000)
      //| F64.parse("4");
      //| F64.parse("16");;
  //;

  //| Bool.if<>(F64.eql(self.act)(F64.1))
  //| #BLESKAPE_SHOCK_BALL#
    //let self = TA.Thing.animate(self)(F64.0)(BLESKAPE_SHOCK_BALL_000)
      //| F64.parse("15");
      //| F64.parse("30");
    //let effs = [
      //TA.Game.Effect; 
      //TA.Game.Effect.damage(F64.parse("3")),
      //TA.Game.Effect.impulse(F64.parse("12"))(self.dir)
    //]
    //let hits = [
      //TA.Game.Hit;
      //TA.Game.Hit.new
      //| effs;
      //| TA.Thing.at_dist(self)(F64.parse("40"));
      //| self.dir;
      //| TA.Game.Hitbox.cbox(F64.parse("20"));,
      //TA.Game.Hit.new
      //| effs;
      //| TA.Thing.at_dist(self)(F64.parse("40"));
      //| self.dir;
      //| TA.Game.Hitbox.cbox(F64.parse("20"));
    //]  

    //let self = TA.Thing.cast(self)(F64.parse("18"))(hits)
    //self
  //;

  //| Bool.if<TA.Thing>(F64.eql(self.act)(F64.2))
    //| #BLESKAPE_DEFENSE_MODE#
      //let self = 
        //TA.Thing.animate_between(self)(F64.1)
        //| BLESKAPE_DEFENSE_MODE_000;
        //| F64.parse("3");
        //| F64.0;
        //| F64.parse("3");
      //let self = 
        //TA.Thing.animate_between(self)(F64.1)
        //| BLESKAPE_DEFENSE_MODE_002;
        //| F64.1;
        //| F64.parse("3");
        //| F64.parse("12");
      //let self = TA.Thing.reset(self)(F64.parse("12"))
      //self
    //;

  //| Bool.if<TA.Thing>(F64.eql(self.act)(F64.parse("3")))
    //| #BLESKAPE_SHOCK_GROUND_WAVE# 
      //let self = 
        //TA.Thing.animate(self)(F64.0)(BLESKAPE_SHOCK_GROUND_WAVE_000)
        //| F64.parse("12");
        //| F64.parse("24");
      //let effs = [
        //TA.Game.Effect; 
        //TA.Game.Effect.damage(F64.parse("5"))
      //]
      //let hits = [
        //TA.Game.Hit;
        //TA.Game.Hit.new
        //| effs;
        //| self.pos;
        //| self.dir;
        //| TA.Game.Hitbox.cbox(F64.parse("58"));
      //]

      //let self = TA.Thing.cast(self)(F64.parse("20"))(hits)
      //self
    //;

  //| Bool.if<TA.Thing>(F64.eql(self.act)(F64.parse("4")))
    //| #BLESKAPE_SUPREME_PUNCH_SEQUENCE#  
      //let self = 
        //TA.Thing.animate(self)(F64.0)(BLESKAPE_SUPREME_PUNCH_SEQUENCE_000)
        //| F64.parse("25");
        //| F64.parse("50");
      //let effs = [
        //TA.Game.Effect;
        //TA.Game.Effect.damage(F64.parse("1"))
      //]
      //let hits = [
        //TA.Game.Hit;
        //TA.Game.Hit.new
        //| effs;
        //| TA.Thing.at_dist(self)(F64.parse("32"));
        //| self.dir;
        //| TA.Game.Hitbox.cbox(F64.parse("32"));
      //]
      //let self = TA.Thing.cast(self)(F64.parse("26"))(hits)
      //let self = TA.Thing.cast(self)(F64.parse("30"))(hits)
      //let self = TA.Thing.cast(self)(F64.parse("34"))(hits)
      //let self = TA.Thing.cast(self)(F64.parse("38"))(hits)
      //let self = TA.Thing.cast(self)(F64.parse("42"))(hits)
      //let effes = [
        //TA.Game.Effect;
        //TA.Game.Effect.impulse(F64.parse("18"))(self.dir),
        //TA.Game.Effect.impulse(F64.parse("18"))(self.dir)
      //]
      //let hits = [
        //TA.Game.Hit;
        //TA.Game.Hit.new
        //| effs;
        //| TA.Thing.at_dist(self)(F64.parse("32"));
        //| self.dir;
        //| TA.Game.Hitbox.cbox(F64.parse("32"));
      //]
      //let self = TA.Thing.cast(self)(F64.parse("46"))(hits)
      //self
    //;

    //| Bool.if<TA.Thing>(F64.eql(self.act)(F64.parse("5")))
    //| #BLESKAPE_DASH# 
      //let self = 
        //TA.Thing.animate(self)(F64.0)(BLESKAPE_DASH_000)
        //| F64.parse("15");
        //| F64.parse("30");
      //let self = TA.Thing.dash(self)(F64.parse("8"))
        //| F64.parse("15");
        //| F64.parse("25");
      //let effs = [
        //TA.Game.Effect;
        //TA.Game.Effect.damage(F64.parse("1")),
        //TA.Game.Effect.repulse(F64.parse("8"))
      //]
      //let hits = [
        //TA.Game.Hit;
        //TA.Game.Hit.new(effs)
        //| TA.Thing.at_dist(self)(F64.parse("32"));
        //| self.dir;
        //| TA.Game.Hitbox.cbox(F64.parse("32"));
      //]
      //let self = TA.Thing.cast(self)(F64.parse("17"))(hits)
      //let self = TA.Thing.cast(self)(F64.parse("20"))(hits)
      //let self = TA.Thing.cast(self)(F64.parse("23"))(hits)
      //self
    //;

    //| #BLESKAPE_TAUNT#  
      //TA.Thing.animate(self)(F64.0)(BLESKAPE_TAUNT_000)
      //| F64.parse("10");
      //| F64.parse("20");
    //;;;;;;
//// Blinks (teleports) to another position
//// - self: thing that will blink
//// - at_tik: number of the tik on which the blink happens
//// - to_pos: position where the thing will blink to

//TA.Thing.blink
  //: (self: TA.Thing) ->
    //(at_tik: F64)         ->
    //(to_pos: F64.V3)      ->
    //TA.Thing
  //(self) (at_tik) (to_pos)
  //let rooted = TA.Thing.is_rooted(self)
  //let self.tik = TA.Thing.get_tik(self)
  //let self.pos = TA.Thing.get_pos(self)
  //rooted<() TA.Thing>
  //| self;
  //| let new_pos = Bool.if<F64.V3>(F64.eql(self.tik)(at_tik))
    //| to_pos;
    //| self.pos;
    //TA.Thing.set_pos(self)(new_pos); 

//// blink(
////   self   : Thing,
////   at_tik : Number,
////   to_pos : V3)
////   case self |thing 
////   let rooted = is_rooted(self)
////   case rooted 
////   | true => self 
////   | false => self <= thing(
////     pos = if tik === at_tik then to_pos else pos)
//TA.Thing.cast
  //: TA.Thing     ->
    //F64               ->
    //List(TA.Game.Hit) ->  
    //TA.Thing
  //(self) (at_tik) (do_hit)
  //let curr_tik = TA.Thing.get_tik(self)
  //F64.eql(curr_tik)(at_tik)<() TA.Thing>
  //| TA.Thing.set_hit(self)(do_hit);
  //| self;
  
//// cast(
////   self   : Thing,
////   at_tik : Number,
////   do_hit : List(Hit))
////   case self |thing
////   if self.tik === at_tik then
////     self <= thing(hit = do_hit)
////   else
////     self

//// Spawns another thing
//// - self: thing that will create another thing
//// - at_tik: number of the tik when thing will be created
//// - at_pos: position on which thing will be created
//// - thing: thing that will be created

//TA.Thing.create_at
  //: (self: TA.Thing)           ->
    //(at_tik: F64)                   ->
    //(new_thing: TA.Game.TxFunction) ->
    //TA.Thing
  //(self) (at_tik) (new_thing)
  //let self.tik = TA.Thing.get_tik(self)
  //let self.pid = TA.Thing.get_pid(self)
  //let self.pos = TA.Thing.get_pos(self)
  //Bool.if<TA.Thing>(F64.eql(self.tik)(at_tik))
  //| let self = TA.Thing.set_fun(self)(new_thing)
    //let self = TA.Thing.set_pid(self)(self.pid)
    //let self = TA.Thing.set_pos(self)(self.pos)
    //self;
  //| self;

//// create_at(
////   self   : Thing,
////   at_tik : Number
////   new_thing: TxFunction)
////   case self |thing
////   if self.tik === at_tik then
////     self <= thing(fun=new_thing, pid=self.pid, pos=self.pos)
////   else 
////     self
//// Performs a dash between certain frames
//// - self: thing that will dash
//// - speed: dash speed in voxels/frame
//// - from_tik: number of the tik it will start the dash
//// - til_tik: number of the tik it will stop the dash
////  dash(
////   self     : Thing,
////   speed    : Number,
////   from_tik : Number,
////   til_tik  : Number)
////   case self |thing 
////   let  rooted = is_rooted(self)
////   case rooted 
////   | true =>  self  
////   | false => self <= thing(vel =
////       if is_between(from_tik, til_tik, tik) then 
////         scale_v3(speed, lookat_v3(pos, trg, dir))
////       else
////         v3(0,0,0))

//TA.Thing.dash
  //: (self: TA.Thing) ->
    //(speed: F64)          ->
    //(from_tik: F64)       ->
    //(til_tik: F64)        ->
    //TA.Thing
  //(self) (speed) (from_tik) (til_tik)
  //let rooted   = TA.Thing.is_rooted(self)
  //let self.tik = TA.Thing.get_tik(self)
  //Bool.if<TA.Thing>(rooted)
  //| self;
  //| let is_between_tik = 
      //F64.is_between
      //| from_tik;
      //| til_tik;
      //| self.tik;
    //let new_vel = 
      //Bool.if<F64.V3>(is_between_tik)
      //| let self.pos = TA.Thing.get_pos(self)
        //let self.trg = TA.Thing.get_trg(self)
        //let self.dir = TA.Thing.get_dir(self)
        //F64.V3.scale(speed)(F64.V3.look_at(self.pos)(self.trg)(self.dir));
      //| F64.V3.new(F64.0)(F64.0)(F64.0);
    //TA.Thing.set_vel(self)(new_vel);



//// Dies at given tick
//// die(
////   self   : Thing,
////   at_tik : Number)
////     case self |thing
////     if self.tik > (at_tik - 1) then
////       self <= thing(die = true)
////     else
////       self
//TA.Thing.die: TA.Thing -> F64 -> TA.Thing 
  //(self) (at_tik)
  //let curr_tik   = TA.Thing.get_tik(self)
  //let should_die = F64.gtn(curr_tik)(F64.sub(at_tik)(F64.1))
  //should_die<() TA.Thing>
  //| TA.Thing.set_die(self)(Bool.true);
  //| self;  
  
//TA.Thing.dilma_fun
  //: TA.Game.TxFunction
  //(self)
  //let self = TA.Thing.set_mov(self)(F64.parse("2"))
  //let self.act = TA.Thing.get_act(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let self.pos = TA.Thing.get_pos(self)

  //Bool.if<>(F64.eql(self.act)(F64.0)) 
  //| #DILMA_IDLE# 
    //F64.if<>(TA.Thing.is_walking(self))
    //| TA.Thing.animate(self)(F64.1)(DILMA_WALK_000)
      //| F64.parse("8");
      //| F64.parse("16");
    //;
    //| TA.Thing.animate(self)(F64.1)(DILMA_IDLE_000)
      //| F64.parse("4");
      //| F64.parse("16");
    //;
  //;

  //| Bool.if<>(F64.eql(self.act)(F64.1)) // Left
    //| #DILMA_PROTECTION# 
      //let self = 
        //TA.Thing.animate_between(self)(F64.0)
        //| DILMA_PROTECTION_000;
        //| F64.parse("6");
        //| F64.parse("3");
        //| F64.parse("7");
      //let self = 
        //TA.Thing.animate_between(self)(F64.0)
        //| DILMA_PROTECTION_007;
        //| F64.parse("5");
        //| F64.parse("28");
        //| F64.parse("14");
      //let self = TA.Thing.reset(self)(F64.parse("27"))
      //self
    //;

  //| Bool.if<>(F64.eql(self.act)(F64.2)) // Middle
    //| #DILMA_CONFUSION#  
      //let self = 
        //TA.Thing.animate_between(self)(F64.0)
        //| DILMA_CONFUSION_CASTING_000;
        //| F64.parse("17");
        //| F64.parse("0");
        //| F64.parse("34");
      //let self = 
        //TA.Thing.animate_between(self)(F64.0)
        //| DILMA_CONFUSION_CASTING_016;
        //| F64.parse("3");
        //| F64.parse("34");
        //| F64.parse("64");
      //let self = TA.Thing.reset(self)(F64.parse("63"))
      //let speech = TA.Thing.new_thing
      //let speech = TA.Thing.set_fun(speech)
        //| TA.Thing.dilma.confusion_fun;
      //let speech = TA.Thing.set_dir(speech)
        //| TA.Thing.targ_dir(self);
      //let self = TA.Thing.spawn(self)(F64.parse("34"))
        //| [TA.Thing; 
           //TA.Thing.move(speech)
           //| TA.Thing.at_max_dist(self)(F64.parse("100"));
          //];
      //self
    //;

  //| Bool.if<>(F64.eql(self.act)(F64.parse("3"))) // Right
    //| #DILMA_SALUTING_THE_CASSAVA#  
      //let self = 
        //TA.Thing.animate(self)(F64.0)(DILMA_SALUTING_THE_CASSAVA_000)
        //| F64.parse("18");
        //| F64.parse("54");
      //self
    //;

    //| Bool.if<>(F64.eql(self.act)(F64.parse("4"))) // Q
      //| #DILMA_STOCKING_WIND#
        //let self =  
          //TA.Thing.animate(self)(F64.0)(DILMA_STOCKING_WIND_CASTING_000)
          //| F64.parse("10");
          //| F64.parse("30");
        //let wind = TA.Thing.new_thing
        //let wind = TA.Thing.set_fun(wind)
          //| TA.Thing.dilma.stocking_wind_fun;
        //let wind = TA.Thing.set_pos(wind)(self.pos)
        //let wind = TA.Thing.set_dir(wind)
          //| TA.Thing.targ_dir(self);
        //let wind = TA.Thing.set_vel(wind)
          //| F64.V3.scale(F64.parse("6"))(TA.Thing.targ_dir(self));
        //let wind = TA.Thing.set_box(wind)
          //| TA.Game.Hitbox.nbox;
        //let self = TA.Thing.spawn(self)(F64.parse("8"))
          //| [TA.Thing; wind];
        //self
      //;

    //| Bool.if<>(F64.eql(self.act)(F64.parse("5"))) // Space
      //| #DILMA_EXTRA#  
        //TA.Thing.animate(self)(F64.1)(DILMA_IDLE_000)
        //| F64.parse("4");
        //| F64.parse("16");
      //;

      //| #DILMA_TAUNT# 
        //TA.Thing.animate(self)(F64.0)(DILMA_TAUNT_000)
        //| F64.parse("6");
        //| F64.parse("18");
      //;
    //;
    //;
  //;
  //;
  //;

//TA.Thing.dilma.stocking_wind_fun
  //: TA.Thing ->
    //TA.Thing
  //(self)
  //TA.Thing.animate_die(self)(F64.0)(DILMA_STOCKING_WIND_ANIM_000)
  //| F64.parse("3");
  //| F64.parse("15");
  
//TA.Thing.dilma.confusion_fun
  //: TA.Thing ->
    //TA.Thing
  //(self)
  //TA.Thing.animate_die(self)(F64.0)(DILMA_CONFUSION_ANIM_000)
  //| F64.parse("4");
  //| F64.parse("40");
//TA.Thing.dorime.blessing_fun
  //: TA.Game.TxFunction
  //(self)
  //let self.pos = TA.Thing.get_pos(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let self = TA.Thing.animate_die(self)(F64.0)
    //| DORIME_BLESSING_FOR_WHO_DESERVE_PROJECTILE_000;
    //| F64.1;
    //| F64.parse("16");
  //let self = TA.Thing.set_box(self)(TA.Game.Hitbox.nbox)
  //let effs = [
      //TA.Game.Effect; 
      //TA.Game.Effect.damage(F64.1)
  //]
  //let hits = [
    //TA.Game.Hit;
    //TA.Game.Hit.new
    //| effs;
    //| self.pos;
    //| self.dir;
    //| TA.Game.Hitbox.cbox(F64.parse("4"));
  //]  
  //let self = TA.Thing.cast(self)(F64.0)(hits)
  //let self = TA.Thing.cast(self)(F64.parse("2"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("4"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("6"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("8"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("10"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("12"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("14"))(hits)
  //self
//TA.Thing.dorime.gods_chamber_fun
  //: TA.Game.TxFunction
  //(self)
  //let self.pos = TA.Thing.get_pos(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let self = 
    //TA.Thing.animate_between(self)(F64.0)
    //| DORIME_GODS_CHAMBER_HEAL_CIRCLE_000;
    //| F64.parse("17");
    //| F64.parse("0");
    //| F64.parse("34");
  //let self = 
    //TA.Thing.animate_between(self)(F64.0)
    //| DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_000;
    //| F64.parse("29");
    //| F64.parse("34");
    //| F64.parse("92");
  //let effs = [TA.Game.Effect; TA.Game.Effect.heal(F64.1)]
  //let hits = [
    //TA.Game.Hit;
    //TA.Game.Hit.new
    //| effs;
    //| self.pos;
    //| self.dir;
    //| TA.Game.Hitbox.cbox(F64.parse("52"));
  //]  
  //let self = TA.Thing.cast(self)(F64.parse("34"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("38"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("42"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("46"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("50"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("54"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("62"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("66"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("70"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("74"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("78"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("82"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("86"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("90"))(hits)
  //let self = TA.Thing.die(self)(F64.parse("92"))
  //self
//TA.Thing.dorime.holy_flame_fun
  //: TA.Game.TxFunction
  //(self)
  //let self.pos = TA.Thing.get_pos(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let self = 
    //TA.Thing.animate_die(self)(F64.0)(DORIME_HOLY_FLAME_PILLAR_000)
    //| F64.parse("5");
    //| F64.parse("15");
  //let self = TA.Thing.set_box(self)
    //| TA.Game.Hitbox.nbox;
  //let effs = [
    //TA.Game.Effect; 
    //TA.Game.Effect.damage(F64.parse("3"))
  //]
  //let hits = [
    //TA.Game.Hit;
    //TA.Game.Hit.new
    //| effs;
    //| self.pos;
    //| self.dir;
    //| TA.Game.Hitbox.cbox(F64.parse("20"));
  //]  
  //let self = TA.Thing.cast(self)(F64.0)(hits)
  //self
//TA.Thing.dorime.jesus_power
  //: TA.Game.TxFunction
  //(self)
  //let self.pos = TA.Thing.get_pos(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let self = TA.Thing.set_box(self)
    //| TA.Game.Hitbox.nbox;
  //let effs = [TA.Game.Effect; TA.Game.Effect.heal(F64.parse("5"))]
  //let hits = [
    //TA.Game.Hit;
    //TA.Game.Hit.new
    //| effs;
    //| self.pos;
    //| self.dir;
    //| TA.Game.Hitbox.cbox(F64.parse("20"));
  //]  
  //let self = TA.Thing.cast(self)(F64.0)(hits)
  //let self = TA.Thing.die(self)(F64.parse("6"))
  //self
//TA.Thing.dorime.leptospirose_puddle_pot_fun
  //: TA.Game.TxFunction
  //(self)
  //let self.sid = TA.Thing.get_sid(self)
  //let self.pos = TA.Thing.get_pos(self)
  //let self = TA.Thing.animate_die(self)(F64.0)
    //| DORIME_LEPTOSPIROSE_CURSE_POT_000;
    //| F64.1;
    //| F64.parse("10");
  //let self = TA.Thing.set_box(self)
    //| TA.Game.Hitbox.cbox(F64.parse("10"));
  //let pudd = TA.Thing.new_thing
  //let pudd = TA.Thing.set_sid(pudd)(self.sid)
  //let pudd = TA.Thing.set_fun(pudd)
    //| TA.Thing.dorime.leptospirose_puddle_fun;
  //let pudd = TA.Thing.set_pos(pudd)(self.pos)
  //let self = TA.Thing.spawn(self)(F64.parse("9"))
    //| [TA.Thing; pudd];
  //self
//TA.Thing.dorime.leptospirose_puddle_fun
  //: TA.Game.TxFunction
  //(self)
  //let self.pos = TA.Thing.get_pos(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let self = TA.Thing.set_box(self)
    //| TA.Game.Hitbox.nbox;
  //let self = 
    //TA.Thing.animate_between(self)(F64.0)
    //| DORIME_LEPTOSPIROSE_CURSE_PUDDLE_000;
    //| F64.parse("10");
    //| F64.parse("0");
    //| F64.parse("10");
  //let self = 
    //TA.Thing.animate_between(self)(F64.0)
    //| DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000;
    //| F64.parse("29");
    //| F64.parse("10");
    //| F64.parse("39");
  //let effs = [
    //TA.Game.Effect; 
    //TA.Game.Effect.damage(F64.parse("1"))
  //]
  //let hits = [
    //TA.Game.Hit;
    //TA.Game.Hit.new
    //| effs;
    //| self.pos;
    //| self.dir;
    //| TA.Game.Hitbox.cbox(F64.parse("48"));
  //]  
  //let self = TA.Thing.cast(self)(F64.parse("10"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("14"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("18"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("22"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("26"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("30"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("34"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("38"))(hits)
  //let self = TA.Thing.die(self)(F64.parse("39"))
  //self
//TA.Thing.dorime_fun
  //: TA.Game.TxFunction
  //(self)
  //let self.pos = TA.Thing.get_pos(self)
  //let self.sid = TA.Thing.get_sid(self)
  //let self = TA.Thing.set_mov(self)(F64.parse("2.2"))
  //let self = TA.Thing.set_box(self)
    //| TA.Game.Hitbox.cbox(F64.parse("8"));
  //let self = TA.Thing.set_mhp(self)(F64.parse("32"))
  //let self.act = TA.Thing.get_act(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let self.sid = TA.Thing.get_sid(self)

  //Bool.if<>(F64.eql(self.act)(F64.0)) 
  //| #DORIME_IDLE# // Walk
    //F64.if<>(TA.Thing.is_walking(self))
    //| TA.Thing.animate(self)(F64.1)(DORIME_WALK_CYCLE_000)
      //| F64.parse("8");
      //| F64.parse("16");
    //;
    //| TA.Thing.animate(self)(F64.1)(DORIME_IDLE_000)
      //| F64.parse("5");
      //| F64.parse("15");
    //;
  //;

  //| Bool.if<>(F64.eql(self.act)(F64.1))
    //| #DORIME_BLESSING_FOR_WHO_DESERVE# // Left
      //let self = 
        //TA.Thing.animate(self)(F64.0)(DORIME_BLESSING_FOR_WHO_DESERVE_000)
        //| F64.parse("14");
        //| F64.parse("28");
      //let fire = TA.Thing.new_thing
      //let fire = TA.Thing.set_sid(fire)(self.sid)
      //let fire = TA.Thing.set_fun(fire)
        //| TA.Thing.dorime.blessing_fun;
      //let fire = TA.Thing.set_vel(fire)
        //| F64.V3.scale(F64.parse("8"))(TA.Thing.targ_dir(self));
      //let fire = TA.Thing.set_dir(fire)
        //| TA.Thing.targ_dir(self);
      //let fire = TA.Thing.set_pos(fire)(self.pos)
      //let self = TA.Thing.spawn(self)(F64.parse("8"))
        //| [TA.Thing; fire];
      //let self = TA.Thing.spawn(self)(F64.parse("16"))
        //| [TA.Thing; fire];
      //let self = TA.Thing.spawn(self)(F64.parse("22"))
        //| [TA.Thing; fire];
      //self
    //;
    
  //| Bool.if<>(F64.eql(self.act)(F64.2)) 
    //| #DORIME_LEPTOSPIROSE_CURSE# // Middle
      //let self = 
        //TA.Thing.animate(self)(F64.0)
        //| DORIME_LEPTOSPIROSE_CURSE_CAST_ANIMATION_000;
        //| F64.parse("5");
        //| F64.parse("15"); 
      //let pot = TA.Thing.new_thing
      //let pot = TA.Thing.set_sid(pot)(self.sid)
      //let pot = TA.Thing.set_fun(pot)
        //| TA.Thing.dorime.leptospirose_puddle_pot_fun;
      //let pot = TA.Thing.set_pos(pot)(self.pos)
      //let pot = TA.Thing.set_vel(pot)
        //| F64.V3.scale(F64.parse("14"))(TA.Thing.targ_dir(self));
      //let self = TA.Thing.spawn(self)(F64.parse("14"))
      //| [TA.Thing; pot];
      //self
    //;

  //| Bool.if<>(F64.eql(self.act)(F64.parse("3")))
    //| #DORIME_HOLY_FLAME# // Right
      //let self = 
        //TA.Thing.animate(self)(F64.0)
        //| DORIME_HOLY_FLAME_CAST_ANIMATION_000;
        //| F64.parse("8");
        //| F64.parse("16"); 
      //let flame = TA.Thing.new_thing
      //let flame = TA.Thing.set_sid(flame)(self.sid)
      //let flame = TA.Thing.set_fun(flame)
        //| TA.Thing.dorime.holy_flame_fun;
      //let self = TA.Thing.spawn(self)(F64.parse("5"))
        //| [TA.Thing;
           //TA.Thing.move(flame)
           //| TA.Thing.at_max_dist(self)(F64.parse("128"));];
      //self
    //;

  //| Bool.if<>(F64.eql(self.act)(F64.parse("4"))) 
    //| #DORIME_JESUS_POWER# // Q
      //let self = 
        //TA.Thing.animate(self)(F64.0)
        //| DORIME_JESUS_POWER_000;
        //| F64.parse("21");
        //| F64.parse("21");
      //let hit = TA.Thing.new_thing
      //let hit = TA.Thing.set_sid(hit)(self.sid)
      //let hit = TA.Thing.set_fun(hit)
        //| TA.Thing.dorime.jesus_power;
      //let self = TA.Thing.spawn(self)(F64.parse("18"))
        //| [TA.Thing;
           //TA.Thing.move(hit)
           //| TA.Thing.at_dist(self)(F64.parse("30"));];
      //self
    //;
    
  //| Bool.if<>(F64.eql(self.act)(F64.parse("5"))) 
    //| #DORIME_GODS_CHAMBER# // Space
      //let self = 
        //TA.Thing.animate(self)(F64.0)
        //| DORIME_GODS_CHAMBER_CAST_ANIMATION_000;
        //| F64.parse("9");
        //| F64.parse("27");
      //let heal = TA.Thing.new_thing
      //let heal = TA.Thing.set_sid(heal)(self.sid)
      //let heal = TA.Thing.set_fun(heal)
        //| TA.Thing.dorime.gods_chamber_fun;
      //let self = TA.Thing.spawn(self)(F64.parse("9"))
        //| [TA.Thing;
           //TA.Thing.move(heal)
           //| TA.Thing.at_max_dist(self)(F64.parse("128"));];
      //self
    //;

    //| #DORIME_TAUNT# // E
     //let self = 
        //TA.Thing.animate_between(self)(F64.0)
        //| DORIME_TAUNT_000;
        //| F64.parse("3");
        //| F64.parse("0");
        //| F64.parse("6");
      //let self = 
        //TA.Thing.animate_between(self)(F64.0)
        //| DORIME_TAUNT_002;
        //| F64.parse("1");
        //| F64.parse("6");
        //| F64.parse("36");
      //let self = TA.Thing.reset(self)(F64.parse("36"))
      //self 
    //;
  //;;;;;
  
//// Ends an animation/transformation/thing after some ticks
//// - self: thing that will end after a while
//// - tx: the new animation to use when it ends
//// - after_tiks: numbers of ticks passed until the end
//// - stt_key: the key in the stt map

//TA.Thing.end_thing
  //: (self: TA.Thing)    ->
    //(tx: TA.Game.TxFunction) ->
    //(after_tiks: F64)        ->
    //(stt_key: Bits)          ->
    //TA.Thing
  //(self) (tx) (after_tiks) (stt_key)
  //let self.stt    = TA.Thing.get_stt(self)
  //let current_tik = Map.get<F64>(stt_key)(self.stt)
  //let empty_stt   = Map.set<F64>(stt_key)(after_tiks)(self.stt)
  //current_tik<() TA.Thing>
  //| TA.Thing.set_stt(self)(empty_stt);
  //| (current_tik.value) 
    //Bool.if<TA.Thing>(F64.eql(current_tik.value)(F64.0))
    //| let self.pid = TA.Thing.get_pid(self)
      //let self.pos = TA.Thing.get_pos(self)
      //let self = TA.Thing.set_fun(self)(tx)
      //let self = TA.Thing.set_pid(self)(self.pid)
      //let self = TA.Thing.set_pos(self)(self.pos)
      //let self = TA.Thing.set_stt(self)(empty_stt)
      //self;
    //| let new_stt = 
        //Map.set<F64>
        //| stt_key;
        //| Bool.if<F64>(F64.ltn(F64.0)(current_tik.value))
          //| F64.sub(current_tik.value)(F64.1);
          //| F64.0;;
        //| self.stt;
      //TA.Thing.set_stt(self)(new_stt);;

//// end_thing(
////   self: Thing, 
////   tx: TxFunction, 
////   after_tiks: Number, 
////   stt_key: Bits
////   ) : Thing
////   case self |thing
////     let current_tik = lookup(_ stt_key, self.stt)
////     let empty_stt = insert(_ stt_key, after_tiks, self.stt)
////     case current_tik
////     | none => self <= thing(stt = empty_stt) // insert a new key
////     | some =>
////       if current_tik.value === 0 
////       then
////         self <= thing(fun=tx, pid=self.pid, pos=self.pos, stt=empty_stt)
////       else 
////         let new_stt = insert(_ stt_key, if current_tik.value > 0 then current_tik.value - 1 else 0, self.stt)
////         self <= thing(stt = new_stt)
//TA.Thing : Type 
  //thing<P: TA.Thing -> Type> ->
  //(new: 
    //(fun: TA.Game.TxFunction) ->
    //(pid: TA.Game.PlayerId) -> 
    //(mid: TA.Game.ModelId) ->
    //(act: TA.Game.ActionId) ->
    //(sid: TA.Game.SideId) ->
    //(stt: Map(F64)) -> 
    //(nam: String) ->
    //(lit: List(TA.Game.Light)) ->
    //(tik: F64) ->
    //(pos: F64.V3) ->
    //(mov: F64) -> 
    //(bst: F64) ->
    //(pad: F64.V3) ->
    //(dir: F64.V3) ->
    //(trg: F64.V3) ->
    //(vel: F64.V3) ->
    //(box: TA.Game.Hitbox) ->
    //(wei: F64) ->
    //(mhp: F64) ->
    //(dmg: F64) ->
    //(knk: F64.V3) ->
    //(buf: List(TA.Game.Buff)) ->
    //(chi: List(TA.Thing)) -> 
    //(hit: List(TA.Game.Hit)) ->
    //(rst: Bool) -> 
    //(die: Bool) -> 
    //P(TA.Thing.new
    //| fun; 
    //| pid;
    //| mid;
    //| act;
    //| sid;
    //| stt;
    //| nam;
    //| lit;
    //| tik;
    //| pos;
    //| mov;
    //| bst;
    //| pad;
    //| dir;
    //| trg;
    //| vel;
    //| box;
    //| wei;
    //| mhp;
    //| dmg;
    //| knk;
    //| buf;
    //| chi;
    //| hit;
    //| rst;
    //| die;) ) ->
    //P(thing)

//// T Thing
//// | thing(
////   fun : TxFunction,  // transaction function
////   pid : PlayerId,    // number of player controlling this
////   mid : ModelId,     // id of model to be rendered
////   act : ActionId,    // number of performing action
////   sid : SideId,      // player side
////   stt : Map(Number), // an arbitrary state
////   nam : String,      // name of thing
////   lit : List(Light), // list of lights to render
////   tik : Number,      // ticks passed since last act change
////   pos : V3,          // in-game position
////   mov : Number,      // movement speed
////   bst : Number,      // movement speed multiplier
////   pad : V3,          // analog pad direction (len = 0 to 1)
////   dir : V3,          // facing direction (len = 1)
////   trg : V3,          // targeted position
////   vel : V3,          // dash velocity vector
////   box : Hitbox,      // hitbox (space occupied)
////   wei : Number,      // weight (affects friction)
////   mhp : Number,      // max health points
////   dmg : Number,      // damage taken
////   knk : V3,          // launch direction and intensity
////   buf : List(Buff),  // buffs and nerfs (status effects) applied
////   chi : List(Thing), // child thing to create on next tick
////   hit : List(Hit),   // hits done by this
////   rst : Bool,        // should this reset to idle
////   die : Bool)        // should this be removed?
//TA.Thing.get_act: (thi: TA.Thing) -> TA.Game.ActionId
  //(thi)
  //thi<() TA.Game.ActionId>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.act;
  
//TA.Thing.get_box: (thi: TA.Thing) -> TA.Game.Hitbox
  //(thi)
  //thi<() TA.Game.Hitbox>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.box;
  
//TA.Thing.get_bst: (thi: TA.Thing) -> F64
  //(thi)
  //thi<() F64>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.bst;
  
//TA.Thing.get_buf: (thi: TA.Thing) -> List(TA.Game.Buff)
  //(thi)
  //thi<() List(TA.Game.Buff)>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.buf;
  
//TA.Thing.get_by_pid.cond: TA.Game.PlayerId -> TA.Thing -> Bool
  //(pid) (thi)
  //let thi.pid = TA.Thing.get_pid(thi)
  //F64.eql(pid)(thi.pid)
  
//TA.Thing.get_by_pid: TA.Game.PlayerId -> TA.Game.Game -> Maybe(TA.Thing) 
  //(pid) (gm)
  //gm<() Maybe(TA.Thing)> | (gm.stage)
  //List.find<TA.Thing>
  //|TA.Thing.get_by_pid.cond(pid);
  //|gm.stage;;

//TA.Thing.get_chi: (thi: TA.Thing) -> List(TA.Thing)
  //(thi)
  //thi<() List(TA.Thing)>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.chi;
  
//TA.Thing.get_die: (thi: TA.Thing) -> Bool
  //(thi)
  //thi<() Bool>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.die;
  
//TA.Thing.get_dir: (thi: TA.Thing) -> F64.V3
  //(thi)
  //thi<() F64.V3>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.dir;
  
//TA.Thing.get_dmg: (thi: TA.Thing) -> F64
  //(thi)
  //thi<() F64>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.dmg;
  
//TA.Thing.get_fun: (thi: TA.Thing) -> TA.Game.TxFunction
  //(thi)
  //thi<() TA.Game.TxFunction>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.fun;
  
//TA.Thing.get_hit: (thi: TA.Thing) -> List(TA.Game.Hit)
 //(thi)
  //thi<() List(TA.Game.Hit)>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.hit;
  
//TA.Thing.get_knk: (thi: TA.Thing) -> F64.V3
  //(thi)
  //thi<() F64.V3>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.knk;
  
//TA.Thing.get_lit: (thi: TA.Thing) -> List(TA.Game.Light)
  //(thi)
  //thi<() List(TA.Game.Light)>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.lit;

//TA.Thing.get_mhp: (thi: TA.Thing) -> F64
  //(thi)
  //thi<() F64>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.mhp;
  
//TA.Thing.get_mid: (thi: TA.Thing) -> TA.Game.ModelId
  //(thi)
  //thi<() TA.Game.ModelId>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.mid;
  
//TA.Thing.get_mov: (thi: TA.Thing) -> F64
  //(thi)
  //thi<() F64>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.mov;
  
//TA.Thing.get_nam: (thi: TA.Thing) -> String
  //(thi)
  //thi<() String>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.nam;

//TA.Thing.get_pad: (thi: TA.Thing) -> F64.V3
  //(thi)
  //thi<() F64.V3>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.pad;
  
//TA.Thing.get_pid: (thi: TA.Thing) -> TA.Game.PlayerId
  //(thi)
  //thi<() TA.Game.PlayerId>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.pid;
  
//TA.Thing.get_pos: (thi: TA.Thing) -> F64.V3
  //(thi)
  //thi<() F64.V3>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.pos;
  
//TA.Thing.get_rst: (thi: TA.Thing) -> Bool
  //(thi)
  //thi<() Bool>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.rst;
  
//TA.Thing.get_sid: (thi: TA.Thing) -> TA.Game.SideId
 //(thi)
  //thi<() TA.Game.SideId>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.sid;
  
//TA.Thing.get_stt: (thi: TA.Thing) -> Map(F64)
  //(thi)
  //thi<() Map(F64)>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.stt;
  
//TA.Thing.get_stt_value: TA.Thing -> Bits -> F64
  //(self) (stt_key) 
  //let stt = TA.Thing.get_stt(self)
  //Map.get<F64>(stt_key)(stt)<() F64>
  //| F64.0;
  //| (result.value) 
    //result.value;

//// get_stt_value(self: Thing, stt_key: Bits) : Number 
////   case self |thing 
////     let result = lookup(_ stt_key, self.stt)
////     case result 
////     | none => 0
////     | some => result.value

//// get_stt_value_v3(self: Thing) : V3
////   case self |thing
////   let x = get_stt_value(self, POS_X_KEY)
////   let y = get_stt_value(self, POS_Y_KEY)
////   // let z = get_stt_value(self, POS_Z_KEY)
////   v3(x, y, 0)

//TA.Thing.get_stt_value_v3: (self: TA.Thing) -> F64.V3
  //(self)
  //let x = TA.Thing.get_stt_value(self)(TA.Constants.POS_X_KEY)
  //let y = TA.Thing.get_stt_value(self)(TA.Constants.POS_Y_KEY)
  //F64.V3.new(x)(y)(F64.0)
//TA.Thing.get_tik: (thi: TA.Thing) -> F64
  //(thi)
  //thi<() F64>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.tik;
  
//TA.Thing.get_trg: (thi: TA.Thing) -> F64.V3
  //(thi)
  //thi<() F64.V3>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.trg;
  
//TA.Thing.get_vel: (thi: TA.Thing) -> F64.V3
  //(thi)
  //thi<() F64.V3>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.vel;
  
//TA.Thing.get_wei: (thi: TA.Thing) -> F64
  //(thi)
  //thi<() F64>
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
  //thi.wei;
  
//// Checks if there are shields to be used and update it if have
//// handle_shields(hit_dmg: Number, self: Thing) : Thing 
////   case self |thing 
////   let init_val      = pair(__ hit_dmg, nil(_))
////   let res           = fold(__ init_val, use_shields, self.buf) 
////   let remaining_dmg = pair_fst(__ res) + self.dmg // Number actual damage taken
////   let remaining_buf = pair_snd(__ res) // List(Buff)
////   self <= thing(dmg = remaining_dmg, buf = remaining_buf)  

//TA.Thing.handle_shields
  //: (hit_dmg: F64)        ->
    //(self: TA.Thing) ->
    //TA.Thing
  //(hit_dmg) (self)
  //let self.buf = TA.Thing.get_buf(self)
  //let self.dmg = TA.Thing.get_dmg(self)
  //let init_val = 
    //Pair.new<F64><List(TA.Game.Buff)>
    //| hit_dmg;
    //| List.nil<TA.Game.Buff>;
  //let res = // fold(__ init_val, use_shields, self.buf) 
    //List.fold<TA.Game.Buff><Pair(F64)(List(TA.Game.Buff))>
    //| init_val;
    //| TA.Game.use_shields;
    //| self.buf;
  //let res.fst = Pair.fst<F64><List(TA.Game.Buff)>(res)
  //let res.snd = Pair.snd<F64><List(TA.Game.Buff)>(res)
  //let remaining_dmg = F64.add(res.fst)(self.dmg) // Number actual damage taken
  //let remaining_buf = res.snd // List(Buff)
  //let self = TA.Thing.set_dmg(self)(remaining_dmg)
  //let self = TA.Thing.set_buf(self)(remaining_buf)
  //self

//TA.Thing.has_shields: TA.Thing -> Bool
  //(self)
  //let self.buf = TA.Thing.get_buf(self)
  //let has_shields = ((buff) 
    //buff<() Bool>
    //| #shielded#(buff.dur) (buff.val) Bool.true;
    //| #slowed# (buff.dur) (buff.val) Bool.false;
    //| #hasted# (buff.dur) (buff.val) Bool.false;
    //| #silenced# (buff.dur) Bool.false;
    //| #rooted# (buff.dur) Bool.false;
    //| #stunned# (buff.dur) Bool.false;
  //) :: TA.Game.Buff -> Bool
  //let found_buf = List.find<TA.Game.Buff>
    //| has_shields;
    //| self.buf;
  //found_buf<() Bool>
  //| #none# Bool.false;
  //| #some# (value) Bool.true;

//// has_shield(self: Thing) : Bool 
////   case self |thing 
////   let is_shielded_buff = (buff: Buff) => 
////     case buff 
////     | shielded => true  
////     | slowed   => false  
////     | hasted   => false 
////     | silenced => false  
////     | rooted   => false 
////     | stuned   => false  
////   case find(Buff; is_shielded_buff, self.buf) as res 
////   | none => false 
////   | some => true
//// Creates lights at given tick
//TA.Thing.illumine
  //: TA.Thing       ->
    //F64                 ->
    //F64                 ->
    //List(TA.Game.Light) -> 
    //TA.Thing
  //(self) (from_tik) (to_tik) (lights)
  //let curr_tik = TA.Thing.get_tik(self)
  //F64.is_between(from_tik)(to_tik)(curr_tik)<() TA.Thing>
  //| TA.Thing.set_lit(self)(lights);
  //| TA.Thing.set_lit(self)(List.nil<TA.Game.Light>);

//// illumine(
////   self     : Thing,
////   from_tik : Number,
////   to_tik   : Number,
////   lights   : List(Light))
////   self <= thing(lit =
////     if is_between(from_tik, to_tik, tik)
////       then lights
////       else nil(_))
//TA.Thing.is_rooted: (self: TA.Thing) -> Bool
  //(self)
  //let self.buf = TA.Thing.get_buf(self)
  //let is_rooted_buff = ((buff) 
    //buff<() Bool>
    //| #shielded# (buff.dur) (buff.val) Bool.false;
    //| #slowed#   (buff.dur) (buff.val) Bool.false;
    //| #hasted#   (buff.dur) (buff.val) Bool.false;
    //| #silenced# (buff.dur) Bool.false;
    //| #rooted#   (buff.dur) Bool.true;
    //| #stuned#   (buff.dur) Bool.true;
  //) :: TA.Game.Buff -> Bool
  //let found_buf = List.find<TA.Game.Buff>
    //| is_rooted_buff;
    //| self.buf;
  //found_buf<() Bool>
  //| #none# Bool.false;
  //| #some# (value) Bool.true;
 
 //// is_rooted(self: Thing) : Bool 
////   case self |thing 
////   let is_rooted_buff = (buff: Buff) => 
////     case buff 
////     | shielded => false  
////     | slowed   => false  
////     | hasted   => false 
////     | silenced => false  
////     | rooted   => true 
////     | stuned   => true  
////   case find(Buff; is_rooted_buff, self.buf) as res 
////   | none => false 
////   | some => true

//TA.Thing.is_silenced: TA.Thing -> Bool
  //(self)
  //let self.buf = TA.Thing.get_buf(self)
  //let is_silenced = ((buff) 
    //buff<() Bool>
    //| #shielded# (buff.dur) (buff.val) Bool.false;
    //| #slowed#   (buff.dur) (buff.val) Bool.false; 
    //| #hasted#   (buff.dur) (buff.val) Bool.false;
    //| #silenced# (buff.dur) Bool.true;
    //| #rooted#   (buff.dur) Bool.false;
    //| #stunned#  (buff.dur) Bool.true;
  //) :: TA.Game.Buff -> Bool
  //let found_buf = List.find<TA.Game.Buff>
    //| is_silenced;
    //| self.buf;
  //found_buf<() Bool>
  //| #none# Bool.false;
  //| #some# (value) Bool.true;

//// is_silenced(self: Thing) : Bool 
////   case self |thing 
////   let is_silenced_buff = (buff: Buff) => 
////     case buff 
////     | shielded => false  
////     | slowed   => false  
////     | hasted   => false 
////     | silenced => true  
////     | rooted   => false 
////     | stuned   => true  
////   case find(Buff; is_silenced_buff, self.buf) as res 
////   | none => false 
////   | some => true 

//TA.Thing.is_stunned: TA.Thing -> Bool
  //(self)
  //let self.buf = TA.Thing.get_buf(self)
  //let is_stunned = ((buff) 
    //buff<() Bool>
    //| #shielded# (buff.dur) (buff.val) Bool.false;
    //| #slowed#   (buff.dur) (buff.val) Bool.false;
    //| #hasted#   (buff.dur) (buff.val) Bool.false;
    //| #silenced# (buff.dur) Bool.false;
    //| #rooted#   (buff.dur) Bool.false;
    //| #stuned#   (buff.dur) Bool.true;
  //) :: TA.Game.Buff -> Bool
  //let found_buf = List.find<TA.Game.Buff>
    //| is_stunned;
    //| self.buf;
  //found_buf<() Bool>
  //| #none# Bool.false;
  //| #some# (value) Bool.true;

//// is_stunned(self: Thing) : Bool 
////   case self |thing 
////   let is_stunned_buff = (buff: Buff) => 
////     case buff 
////     | shielded => false  
////     | slowed   => false  
////     | hasted   => false 
////     | silenced => false  
////     | rooted   => false 
////     | stuned   => true  
////   case find(Buff; is_stunned_buff, self.buf) as res 
////   | none => false 
////   | some => true

//TA.Thing.is_using_buff: TA.Thing -> Bits -> Bool
  //(self) (stt_key)
  //let stt = TA.Thing.get_stt(self)
  //Map.get<F64>(stt_key)(stt)<() Bool>
  //| Bool.false; 
  //| (current_tik)
    //F64.eql(current_tik)(F64.0)<() Bool>
    //| Bool.false;
    //| Bool.true;;


//// is_using_buff(self: Thing, stt_key: Bits) : Bool
////   case self |thing
////     let current_tik = lookup(_ stt_key, self.stt)
////     case current_tik
////     | none => false
////     | some => if current_tik.value === 0 then false else true

//// Is this thing walking?
//TA.Thing.is_walking: TA.Thing -> F64
  //(this)
  //let this.pad = TA.Thing.get_pad(this)
  //F64.from_bool(F64.ltn(F64.0)(F64.V3.len(this.pad)))

//// is_walking(this: Thing) : Number
////   case this |thing
////   len_v3(this.pad) > 0 

//TA.Thing.map_stt_key
  //: TA.Thing     ->
    //Bits         ->
    //(F64 -> F64) -> 
    //TA.Thing
  //(self) (stt_key) (func)
  //let stt = TA.Thing.get_stt(self)
  //Map.get<F64>(stt_key)(stt)<() TA.Thing>
  //| TA.Thing.set_stt
    //|self;
    //|Map.set<F64>(stt_key)(F64.0)(stt);;
  //| (result.value)
    //TA.Thing.set_stt
    //|self;
    //|Map.set<F64>(stt_key)(func(result.value))(stt);; 

//// map_stt_key(self: Thing, stt_key: Bits, func: Number -> Number) : Thing
////   self <= thing(stt = 
////     case lookup(_ stt_key, stt) as result
////     | none => insert(_ stt_key, 0, stt)
////     | some => insert(_ stt_key, func(result.value), stt))

//// Sets the position
//// move(self: Thing, to_pos: V3)
////   self <= thing(pos = to_pos)
//TA.Thing.move: TA.Thing -> F64.V3 -> TA.Thing
  //(self) (to_pos)
  //TA.Thing.set_pos(self)(to_pos)
  
//TA.Thing.new
  //: TA.Game.TxFunction  -> 
    //TA.Game.PlayerId    -> 
    //TA.Game.ModelId     -> 
    //TA.Game.ActionId    -> 
    //TA.Game.SideId      -> 
    //Map(F64)            -> //stt
    //String              -> //name
    //List(TA.Game.Light) -> 
    //F64                 -> //tik
    //F64.V3              -> //pos
    //F64                 -> //mov
    //F64                 -> //bst
    //F64.V3              -> //pad
    //F64.V3              -> //dir
    //F64.V3              -> //trg
    //F64.V3              -> //vel
    //TA.Game.Hitbox      -> 
    //F64                 -> //wei
    //F64                 -> //mhp
    //F64                 -> //dmg
    //F64.V3              -> //knk
    //List(TA.Game.Buff)  -> 
    //List(TA.Thing) -> 
    //List(TA.Game.Hit)   -> 
    //Bool                -> //rst
    //Bool                -> //die
    //TA.Thing
  //(fun) (pid) (mid) (act) (sid) (stt) (nam) (lit) (tik) (pos) (mov) (bst) (pad) 
  //(dir) (trg) (vel) (box) (wei) (mhp) (dmg) (knk) (buf) (chi) (hit) (rst) (die)
  //<P> (new)
  //new 
  //| fun; 
  //| pid;
  //| mid;
  //| act;
  //| sid;
  //| stt;
  //| nam;
  //| lit;
  //| tik;
  //| pos;
  //| mov;
  //| bst;
  //| pad;
  //| dir;
  //| trg;
  //| vel;
  //| box;
  //| wei;
  //| mhp;
  //| dmg;
  //| knk;
  //| buf;
  //| chi;
  //| hit;
  //| rst;
  //| die;
  
//TA.Thing.new_thing : TA.Thing
   //TA.Thing.new
   //| #fun# ((x) x);
   //| #pid# F64.0;
   //| #mid# F64.0;
   //| #act# F64.0;
   //| #sid# F64.0;
   //| #stt# Map.new<>;
   //| #nam# String.nil;
   //| #lit# List.nil<TA.Game.Light>;
   //| #tik# F64.0;
   //| #pos# F64.V3.new(F64.0)(F64.0)(F64.0);
   //| #mov# F64.parse("8");
   //| #bst# F64.1;
   //| #pad# F64.V3.new(F64.0)(F64.0)(F64.0);
   //| #dir# F64.V3.new(F64.0)(F64._1)(F64.0);
   //| #trg# F64.V3.new(F64.0)(F64.0)(F64.0);
   //| #vel# F64.V3.new(F64.0)(F64.0)(F64.0);
   //| #box# TA.Game.Hitbox.cbox(F64.parse("12"));
   //| #wei# F64.1;
   //| #mhp# F64.parse("24");
   //| #dmg# F64.0;
   //| #knk# F64.V3.new(F64.0)(F64.0)(F64.0);
   //| #buf# List.nil<TA.Game.Buff>;
   //| #chi# List.nil<TA.Thing>;
   //| #hit# List.nil<TA.Game.Hit>;
   //| #rst# Bool.false;
   //| #die# Bool.false; 
//TA.Thing.poste_fun: TA.Game.TxFunction
  //(self)
  //let self.pos = TA.Thing.get_pos(self)

  //let new_pos = F64.V3.new(F64.0)(F64.0)(F64.0)
  //let self = TA.Thing.set_pos(self)(new_pos)
  //let self = TA.Thing.set_mid(self)(POSTE_IDLE_000)
  //let lpos = 
    //self.pos<() F64.V3>
    //| (self.pos.x) (self.pos.y) (self.pos.z)
      //F64.V3.new(self.pos.x)(self.pos.y)(F64.parse("52"));
  //let lrng = F64.parse("32.0")
  //let lrad = F64.parse("12")
  //let lsub = F64.V3.new(F64.0)(F64.0)(F64.0)
  //let ladd = F64.V3.new(F64.parse("0.72"))(F64.parse("0.60"))(F64.parse("0.24"))
  //let lght = TA.Game.Light.new(lpos)(lrad)(lrng)(lsub)(ladd)
  //let self =  TA.Thing.illumine(self)(F64.0)(F64.parse("2147483648"))
    //| [TA.Game.Light; lght];
  //self

//TA.Thing.puddledmg_fun : TA.Game.TxFunction
  //(self)
  //let self.pos = TA.Thing.get_pos(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let new_pos = F64.V3.new(F64.parse("100"))(F64.parse("-100"))(F64.0)
  //let self = TA.Thing.set_pos(self)(new_pos)
  //let new_dir = F64.V3.new(F64.parse("0.7071"))(F64.parse("0.7071"))(F64.0)
  //let self = TA.Thing.set_dir(self)(new_dir)
  //let self = TA.Thing.set_box(self)(TA.Game.Hitbox.nbox)
  //let self = TA.Thing.set_mid(self)(DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000)
  //let self = 
    //TA.Thing.animate(self)(F64.0)
    //| DORIME_LEPTOSPIROSE_CURSE_PUDDLE_IDLE_000;
    //| F64.parse("29");
    //| F64.parse("58");
  //let effs = [
    //TA.Game.Effect;
    //TA.Game.Effect.damage(F64.1)
  //]
  //let hits = [
    //TA.Game.Hit;
    //TA.Game.Hit.new
    //| effs;
    //| self.pos;
    //| self.dir;
    //| TA.Game.Hitbox.cbox(F64.parse("48"));
  //]
  //let eff_slow = [
    //TA.Game.Effect;
    //TA.Game.Effect.slow  
    //| F64.mul(TA.Constants.ONE_SEC)(F64.parse("3"));
    //| F64.parse("0.7");
  //]
  //let slow = [
    //TA.Game.Hit;
    //TA.Game.Hit.new
    //| eff_slow;
    //| self.pos;
    //| self.dir;
    //| TA.Game.Hitbox.cbox(F64.parse("48"));
  //]
  //let self = TA.Thing.cast(self)(F64.parse("10"))(slow)
  //let self = TA.Thing.cast(self)(F64.parse("18"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("26"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("30"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("38"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("44"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("52"))(hits)
  //self
//TA.Thing.puddleheal_fun : TA.Game.TxFunction
  //(self)
  //let self.pos = TA.Thing.get_pos(self)
  //let self.dir = TA.Thing.get_dir(self)
  //let new_pos = F64.V3.new(F64.parse("130"))(F64.parse("80"))(F64.0)
  //let self = TA.Thing.set_pos(self)(new_pos)
  //let new_dir = F64.V3.new(F64.parse("0.7071"))(F64.parse("0.7071"))(F64.0)
  //let self = TA.Thing.set_dir(self)(new_dir)
  //let self = TA.Thing.set_sid(self)(F64.0)
  //let self = TA.Thing.set_box(self)(TA.Game.Hitbox.nbox)
  //let self = TA.Thing.set_mid(self)(DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015)
  //let self = 
    //TA.Thing.animate(self)(F64.0)
    //| DORIME_GODS_CHAMBER_HEAL_CIRCLE_IDLE_015;
    //| F64.parse("9");
    //| F64.parse("36");
  //let effs =
    //List.cons<TA.Game.Effect>
      //| TA.Game.Effect.heal(F64.parse("2"));
      //| List.nil<TA.Game.Effect>;;
  //let hits = 
    //List.cons<TA.Game.Hit>
    //| TA.Game.Hit.new
      //| effs;
      //| self.pos;
      //| self.dir;
      //| TA.Game.Hitbox.cbox(F64.parse("42"));;
    //| List.nil<TA.Game.Hit>;
  //let self = TA.Thing.cast(self)(F64.parse("10"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("10"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("10"))(hits)
  //let self = TA.Thing.cast(self)(F64.parse("10"))(hits)
  //self
//TA.Thing.punchingbag_fun : TA.Game.TxFunction
  //(self)
  //let self.dmg = TA.Thing.get_dmg(self)
  //let self.tik = TA.Thing.get_tik(self)

  //let smhp = F64.parse("32")
  //let self = TA.Thing.set_mhp(self)(smhp)
  //let self = 
    //TA.Thing.set_dir(self)
    //| F64.V3.new
      //| F64.parse("0.707");
      //| F64.parse("-0.707");
      //| F64.0;
    //;
  //let div_aux = F64.div(F64.parse("2"))(F64.parse("24"))
  //let self = 
    //TA.Thing.set_dmg(self)(F64.sub(self.dmg)(div_aux))
  //let self = 
    //TA.Thing.set_mid(self)
    //| let pow = F64.max(F64.0)(F64.min(F64.1)(F64.div(self.dmg)(smhp)))
      //let sin = F64.sin(F64.div(self.tik)(F64.parse("6")))
      //let re0 = F64.mul(F64.mul(sin)(F64.parse("12")))(pow)
      //let re1 = F64.add(F64.add(re0)(F64.parse("24")))(F64.parse("0.5"))
      //let ang = F64.mod(re1)(F64.parse("24"))
      //F64.add(PUNCHINGBAG_IDLE_000)(F64.floor(ang));
  //self




//// Resets to given tick
//// reset(
////   self   : Thing,
////   at_tik : Number)
////   case self |thing
////   if self.tik > (at_tik - 1) then
////     self <= thing(rst = true)
////   else
////     self
//TA.Thing.reset: TA.Thing -> F64 -> TA.Thing
  //(self) (at_tik)
  //let curr_tik = TA.Thing.get_tik(self)
  //let should_reset = F64.gtn(curr_tik)(F64.sub(at_tik)(F64.1))
  //should_reset<() TA.Thing>
  //| TA.Thing.set_rst(self)(Bool.true);
  //| self;



//TA.Thing.set_act
  //: (thi: TA.Thing)        -> 
    //(new_act: TA.Game.ActionId) -> 
    //TA.Thing
  //(thi) (new_act)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| new_act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;


//TA.Thing.set_box
  //: (thi: TA.Thing)      -> 
    //(new_box: TA.Game.Hitbox) -> 
    //TA.Thing
  //(thi) (new_box)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| new_box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_bst
  //: (thi: TA.Thing) -> 
    //(new_bst: F64)       -> 
    //TA.Thing
  //(thi) (new_bst)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| new_bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_buf
  //: (thi: TA.Thing)          -> 
    //(new_buf: List(TA.Game.Buff)) -> 
    //TA.Thing
  //(thi) (new_buf)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| new_buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_chi
  //: (thi: TA.Thing)           -> 
    //(new_chi: List(TA.Thing)) -> 
    //TA.Thing
  //(thi) (new_chi)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| new_chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_die: (thi: TA.Thing) -> (new_die: Bool) -> TA.Thing
  //(thi) (new_die)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| new_die;
  //;

//TA.Thing.set_dir: (thi: TA.Thing) -> (new_dir: F64.V3) -> TA.Thing
  //(thi) (new_dir)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| new_dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_dmg: (thi: TA.Thing) -> (new_dmg: F64) -> TA.Thing
  //(thi) (new_dmg)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| new_dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_fun
  //: (thi: TA.Thing)          -> 
    //(new_fun: TA.Game.TxFunction) -> 
    //TA.Thing
  //(thi) (new_fun)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| new_fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_hit
  //: (thi: TA.Thing)         -> 
    //(new_hit: List(TA.Game.Hit)) -> 
    //TA.Thing
  //(thi) (new_hit)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| new_hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_knk: (thi: TA.Thing) -> (new_knk: F64.V3) -> TA.Thing
  //(thi) (new_knk)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| new_knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_lit
  //: (thi: TA.Thing)           -> 
    //(new_lit: List(TA.Game.Light)) -> 
    //TA.Thing
  //(thi) (new_lit)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| new_lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;


//TA.Thing.set_mhp: (thi: TA.Thing) -> (new_mhp: F64) -> TA.Thing
  //(thi) (new_mhp)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| new_mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_mid
  //: (thi: TA.Thing)       -> 
    //(new_mid: TA.Game.ModelId) -> 
    //TA.Thing
  //(thi) (new_mid)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| new_mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;


//TA.Thing.set_mov: (thi: TA.Thing) -> (new_mov: F64) -> TA.Thing
  //(thi) (new_mov)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| new_mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_nam: (thi: TA.Thing) -> (new_nam: String) -> TA.Thing
  //(thi) (new_nam)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| new_nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;


//TA.Thing.set_pad: (thi: TA.Thing) -> (new_pad: F64.V3) -> TA.Thing
  //(thi) (new_pad)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| new_pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_pid
  //: (thi: TA.Thing)        -> 
    //(new_pid: TA.Game.PlayerId) -> 
    //TA.Thing
  //(thi) (new_pid)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| new_pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;


//TA.Thing.set_pos: (thi: TA.Thing) -> (new_pos: F64.V3) -> TA.Thing
  //(thi) (new_pos)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| new_pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_rst: (thi: TA.Thing) -> (new_rst: Bool) -> TA.Thing
  //(thi) (new_rst)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| new_rst;
    //| thi.die;
  //;

//TA.Thing.set_sid
  //: (thi: TA.Thing)      -> 
    //(new_sid: TA.Game.SideId) -> 
    //TA.Thing
  //(thi) (new_sid)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| new_sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;


//TA.Thing.set_stt: (thi: TA.Thing) -> (new_stt: Map(F64)) -> TA.Thing
  //(thi) (new_stt)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| new_stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;


//// set_stt_value_v3(self: Thing, v3: V3) : Thing
////   case self |thing
////   case v3 |v3
////   // let self = self <= thing(stt=insert(_ POS_X_KEY, v3.x, self.stt))
////   let self = set_thing_stt(self, insert(_ POS_X_KEY, v3.x, self.stt))
////   let self = set_thing_stt(self, insert(_ POS_X_KEY, v3.y, self.stt))
////   // let self = self <= thing(stt=insert(_ POS_Y_KEY, v3.y, self.stt))
////   // let self = self <= thing(stt=insert(_ POS_Z_KEY, v3.z, self.stt))
////   self

//TA.Thing.set_stt_value_v3
  //: (self: TA.Thing) -> 
    //(v3: F64.V3)          ->
    //TA.Thing
  //(self) (v3)
  //let self.stt = TA.Thing.get_stt(self)
  //v3<() TA.Thing> | (v3.x) (v3.y) (v3.z) 
  //let insert_x = Map.set<F64>(TA.Constants.POS_X_KEY)(v3.x)(self.stt)
  //let insert_y = Map.set<F64>(TA.Constants.POS_Y_KEY)(v3.y)(self.stt)
  //let self = TA.Thing.set_stt(self)(insert_x)
  //let self = TA.Thing.set_stt(self)(insert_y)
  //self;

//TA.Thing.set_tik: (thi: TA.Thing) -> (new_tik: F64) -> TA.Thing
  //(thi) (new_tik)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| new_tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;


//TA.Thing.set_trg: (thi: TA.Thing) -> (new_trg: F64.V3) -> TA.Thing
  //(thi) (new_trg)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| new_trg;
    //| thi.vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_vel: (thi: TA.Thing) -> (new_vel: F64.V3) -> TA.Thing
  //(thi) (new_vel)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| new_vel;
    //| thi.box;
    //| thi.wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//TA.Thing.set_wei: (thi: TA.Thing) -> (new_wei: F64) -> TA.Thing
  //(thi) (new_wei)
  //thi<() TA.Thing> 
  //| (thi.fun) (thi.pid) (thi.mid) (thi.act) (thi.sid) (thi.stt) (thi.nam) 
    //(thi.lit) (thi.tik) (thi.pos) (thi.mov) (thi.bst) (thi.pad) (thi.dir) 
    //(thi.trg) (thi.vel) (thi.box) (thi.wei) (thi.mhp) (thi.dmg) (thi.knk) 
    //(thi.buf) (thi.chi) (thi.hit) (thi.rst) (thi.die)
    //TA.Thing.new
    //| thi.fun;
    //| thi.pid;
    //| thi.mid;
    //| thi.act;
    //| thi.sid;
    //| thi.stt;
    //| thi.nam;
    //| thi.lit;
    //| thi.tik;
    //| thi.pos;
    //| thi.mov;
    //| thi.bst;
    //| thi.pad;
    //| thi.dir;
    //| thi.trg;
    //| thi.vel;
    //| thi.box;
    //| new_wei;
    //| thi.mhp;
    //| thi.dmg;
    //| thi.knk;
    //| thi.buf;
    //| thi.chi;
    //| thi.hit;
    //| thi.rst;
    //| thi.die;
  //;

//// Spawns another thing
//// - self: thing that will create another thing
//// - at_tik: number of the tik when thing will be created
//// - thing: thing that will be created
//TA.Thing.spawn: TA.Thing -> F64 -> List(TA.Thing) -> TA.Thing
  //(self) (at_tik) (children)
  //let curr_tik = TA.Thing.get_tik(self)
  //F64.eql(curr_tik)(at_tik)<() TA.Thing>
  //| TA.Thing.set_chi(self)(children);
  //| self;  

//// spawn(
////   self   : Thing,
////   at_tik : Number,
////   childs : List(Thing))
////   self <= thing(chi =
////     if tik === at_tik then
////       childs
////     else
////       chi)

//TA.Thing.speed_multiplier_of: TA.Thing -> F64
  //(self) 
  //let bst = TA.Thing.get_bst(self)
  //let buf = TA.Thing.get_buf(self)
  //List.fold<TA.Game.Buff><F64>
  //|bst;
  //|TA.Game.combine_mov_buffs;
  //|buf;  

//// speed_multiplier_of(self: Thing) : Number
////   case self |thing 
////   fold(Buff; Number; self.bst, combine_mov_buffs, self.buf)

//// Returns the direction the thing is looking to
//// targ_dir(self: Thing)
////   case self |thing
////   lookat_v3(self.pos, self.trg, self.dir)
//TA.Thing.targ_dir: TA.Thing -> F64.V3
  //(self) 
  //let pos = TA.Thing.get_pos(self)
  //let trg = TA.Thing.get_trg(self)
  //let dir = TA.Thing.get_dir(self)
  //F64.V3.look_at(pos)(trg)(dir)

//// Update a stt_key until the value associated to it ends. Used along with will_set_buff
//// - self: thing with stt (usually character)
//// - stt_key: the key in the stt map
//TA.Thing.update_buff: TA.Thing -> Bits -> TA.Thing
  //(self) (stt_key)
  //let stt = TA.Thing.get_stt(self)
  //let curr_tik = Map.get<F64>(stt_key)(stt)
  //curr_tik<() TA.Thing>
  //| self;
  //| (curr_tik.value)
    //F64.eql(curr_tik.value)(F64.0)<() TA.Thing>
    //| self;
    //| F64.gtn(curr_tik.value)(F64.0)<() TA.Thing>
      //| let new_tik = F64.sub(curr_tik.value)(F64.1)
        //let new_stt = Map.set<F64>(stt_key)(new_tik)(stt)
        //TA.Thing.set_stt(self)(new_stt);
      //| self;;; 

//// update_buff(self: Thing, stt_key: Bits) : Thing
////   case self |thing
////     let current_tik = lookup(_ stt_key, self.stt)
////     case current_tik
////     | none => self
////     | some => 
////       if current_tik.value === 0
////       then self <= thing(stt=insert(_ stt_key, 0, self.stt))
////       else 
////         let new_stt = insert(_ stt_key, if current_tik.value > 0 then current_tik.value - 1 else 0, self.stt)
////         self <= thing(stt = new_stt)

//TA.Thing.update_buff_dur: (self: TA.Thing) -> TA.Thing
  //(self)
  //let self.buf = TA.Thing.get_buf(self)
  //let fn = ( (buff) (acc)
    //buff<() List(TA.Game.Buff)>
    //| #shielded# (buff.dur) (buff.val)
      //Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      //| acc;
      //| List.cons<TA.Game.Buff> 
        //| TA.Game.Buff.shielded(F64.sub(buff.dur)(F64.1))(buff.val);
        //| acc;;
    //; 
    //| #slowed# (buff.dur) (buff.val)
      //Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      //| acc;
      //| List.cons<TA.Game.Buff> 
        //| TA.Game.Buff.slowed(F64.sub(buff.dur)(F64.1))(buff.val);
        //| acc;;
    //; 
    //| #hasted# (buff.dur) (buff.val)
      //Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      //| acc;
      //| List.cons<TA.Game.Buff> 
        //| TA.Game.Buff.hasted(F64.sub(buff.dur)(F64.1))(buff.val);
        //| acc;;
    //; 
    //| #silenced# (buff.dur)
      //Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      //| acc;
      //| List.cons<TA.Game.Buff> 
        //| TA.Game.Buff.silenced(F64.sub(buff.dur)(F64.1));
        //| acc;;
    //; 
    //| #rooted# (buff.dur)
      //Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      //| acc;
      //| List.cons<TA.Game.Buff> 
        //| TA.Game.Buff.rooted(F64.sub(buff.dur)(F64.1));
        //| acc;;
    //; 
    //| #stuned# (buff.dur)
      //Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))
      //| acc;
      //| List.cons<TA.Game.Buff> 
        //| TA.Game.Buff.stuned(F64.sub(buff.dur)(F64.1));
        //| acc;;
    //; 
  //) :: TA.Game.Buff -> List(TA.Game.Buff) -> List(TA.Game.Buff)
    //let new_buf = 
      //List.fold<TA.Game.Buff><List(TA.Game.Buff)>
      //| List.nil<TA.Game.Buff>;
      //| fn;
      //| self.buf;
    //TA.Thing.set_buf(self)(new_buf)

//// update_buff_dur(self: Thing) : Thing 
////   case self |thing 
////   let fn = (buff: Buff, acc: List(Buff)) => 
////     case buff 
////     | shielded => 
////       if buff.dur === 0 then 
////         acc 
////       else cons(_ shielded(buff.dur - 1, buff.val), acc)
////     | slowed => 
////       if buff.dur === 0 then 
////         acc 
////       else cons(_ slowed(buff.dur - 1, buff.val), acc)
////     | hasted => 
////       if buff.dur === 0 then 
////         acc 
////       else cons(_ hasted(buff.dur - 1, buff.val), acc)
////     | silenced => 
////       if buff.dur === 0 then 
////         acc 
////       else cons(_ silenced(buff.dur - 1), acc)
////     | rooted => 
////       if buff.dur === 0 then 
////         acc 
////       else cons(_ rooted(buff.dur - 1), acc)
////     | stuned => 
////       if buff.dur === 0 then 
////         acc 
////       else cons(_ stuned(buff.dur - 1), acc)

////     let new_buf = fold(Buff; List(Buff); [], fn, self.buf)
////     self <= thing(buf = new_buf)

//TA.Thing.wall_fun : TA.Game.TxFunction
  //(self)
  //let new_pos = F64.V3.new(F64.parse("-64"))(F64.parse("64"))(F64.0)
  //let self = TA.Thing.set_pos(self)(new_pos)
  //let new_dir = F64.V3.new(F64.parse("0.7071"))(F64.parse("0.7071"))(F64.0)
  //let self = TA.Thing.set_dir(self)(new_dir)
  //let self = TA.Thing.set_mid(self)(WALL_IDLE_000)
  //let boxw = F64.parse("60")
  //let boxh = F64.parse("7")
  //let new_pbox = [
    //F64.V3;
    //F64.V3.new(F64.mul(boxw)(F64._1))(F64.mul(boxh)(F64._1))(F64.0),
    //F64.V3.new(F64.mul(boxw)(F64._1))(F64.mul(boxh)(F64._1))(F64.0),
    //F64.V3.new(F64.mul(boxw)(F64._1))(F64.mul(boxh)(F64._1))(F64.0),
    //F64.V3.new(F64.mul(boxw)(F64._1))(F64.mul(boxh)(F64._1))(F64.0)
  //]
  //self
//// Checks if two boxes collide, returns outwards vector
//TA.collide_with
  //: (a_pos: F64.V3)         ->
    //(a_dir: F64.V3)         ->
    //(a_box: TA.Game.Hitbox) ->
    //(b_pos: F64.V3)         ->
    //(b_dir: F64.V3)         ->
    //(b_box: TA.Game.Hitbox) ->
    //Maybe(F64.V3)
  //(a_pos) (a_dir) (a_box) (b_pos) (b_dir) (b_box)
  //let none = Maybe.none<F64.V3>
  //a_box<() Maybe(F64.V3)>
  //| none; // nbox
  //| (a_box.rad) // cbox
    //b_box<() Maybe(F64.V3)>
    //| none; // nbox
    //| (b_box.rad) // cbox
      //let dst = F64.V3.dist(a_pos)(b_pos)
      //let rad = F64.add(a_box.rad)(b_box.rad)
      //let if_condition = Bool.and(F64.ltn(F64.0)(dst))(F64.ltn(dst)(rad))
      //Bool.if<Maybe(F64.V3)>(if_condition)
      //| let out_dir = F64.V3.norm(F64.V3.sub(a_pos)(b_pos))
        //let out_vec = F64.V3.scale(F64.sub(rad)(dst))(out_dir)
        //Maybe.some<F64.V3>(out_vec);
      //| none;;
    //| (b_box.pts) //pbox
      //let cons = ((segment) (result)
        //result<() Maybe(F64.V3)>
        //| // none
          //segment<() Maybe(F64.V3)> | (segment.a) (segment.b)
          //let dst = F64.V3.point_segment_dist(a_pos)(segment)
          //let rad = a_box.rad
          //Bool.if<Maybe(F64.V3)>(F64.ltn(dst)(rad))
          //| let out_dir = F64.V3.rot_90(F64.V3.norm(F64.V3.sub(segment.a)(segment.b)))
            //let out_vec = F64.V3.scale(F64.sub(rad)(dst))(out_dir)
            //Maybe.some<F64.V3>(out_vec);
          //| none;;;
        //| (result.value) // some 
          //Maybe.some<F64.V3>(result.value);
      //) :: F64.Segment -> Maybe(F64.V3) -> Maybe(F64.V3)
      //let segs = F64.V3.polygon_to_segments(b_pos)(b_dir)(b_box.pts)
      //List.fold<F64.Segment><Maybe(F64.V3)>(none)(cons)(segs);
  //; // close a_box case
  //| (a_box.pts) // pbox
    //none; // TODO

//// collide_with(
////   a_pos: V3,
////   a_dir: V3,
////   a_box: Hitbox,
////   b_pos: V3,
////   b_dir: V3,
////   b_box: Hitbox
//// ) : Maybe(V3)
////   case a_box
////   |nbox => none(_)
////   |cbox => case b_box
////     |nbox => none(_)
////     |cbox =>
////       let dst = dist_v3(a_pos, b_pos)
////       let rad = a_box.rad + b_box.rad
////       if (dst > 0) && (dst < rad) then
////         let out_dir = norm_v3(sub_v3(a_pos, b_pos))
////         let out_vec = scale_v3(rad - dst, out_dir)
////         some(_ out_vec)
////       else
////         none(_)
////     |pbox =>
////       let nil  = none(_)
////       let cons = (segment, result) =>
////         case result
////         |none =>
////           case segment |segment
////           let dst = point_segment_dist(a_pos, segment)
////           let rad = a_box.rad
////           if (dst < rad) then
////             let out_dir = rot90_v3(norm_v3(sub_v3(segment.a,segment.b)))
////             let out_vec = scale_v3(rad - dst, out_dir)
////             some(_ out_vec)
////           else
////             none(_)
////         |some => some(_ result.value)
////       let segs = polygon_to_segments(b_pos, b_dir, b_box.pts)
////       fold(Segment; Maybe(V3); nil, cons, segs)
////   |pbox =>
////     none(_) // TODO

//TA.exec_command
  //: TA.Game.Command ->
    //TA.Game.Game    ->
    //TA.Game.Game
  //(cmd) (gm)
  //cmd<() TA.Game.Game> | (cmd.pid) (cmd.inp)
  //let fn = ( (this)
    //let inp = cmd.inp 
    //let is_silenced = TA.Thing.is_silenced(this)
    //let is_stunned  = TA.Thing.is_stunned(this)
    //is_stunned<() TA.Thing>
    //| #true# 
      //inp<() TA.Thing> 
      //| (sdir.dir) TA.Game.init_act(this)(F64.0)(sdir.dir); 
      //| (key0.pos) this;  
      //| (key1.pos) this;
      //| (key2.pos) this;
      //| (key3.pos) this;
      //| (key4.pos) this;
      //| (key5.pos) this;
      //| (cmsg.txt) this;;

    //| #false#
      //is_silenced<() TA.Thing>  
      //| #true# 
        //inp<() TA.Thing> 
        //| (sdir.dir) TA.Thing.set_pad(this)(sdir.dir); 
        //| (key0.pos) this;  
        //| (key1.pos) this;
        //| (key2.pos) this;
        //| (key3.pos) this;
        //| (key4.pos) this;
        //| (key5.pos) this;
        //| (cmsg.txt) this;;             
      
      //| #false#
        //inp<() TA.Thing> 
        //| (sdir.dir) TA.Thing.set_pad(this)(sdir.dir); 
        //| (key0.pos) TA.Game.init_act(this)(F64.1)(key0.pos);  
        //| (key1.pos) TA.Game.init_act(this)(F64.2)(key1.pos);
        //| (key2.pos) TA.Game.init_act(this)(F64.parse("3"))(key2.pos);
        //| (key3.pos) TA.Game.init_act(this)(F64.parse("4"))(key3.pos);
        //| (key4.pos) TA.Game.init_act(this)(F64.parse("5"))(key4.pos);
        //| (key5.pos) TA.Game.init_act(this)(F64.parse("6"))(key5.pos);
        //| (cmsg.txt) this;;;
  //) :: TA.Thing -> TA.Thing
  //TA.Game.with_thing(cmd.pid)(fn)(gm);
    
//// Game's main loop
//TA.exec_turn: TA.Game.Game -> TA.Game.Game
  //(gm)
  //// Interaction function
  //let intr = ((that) (this) TA.interact_with(this)(that)) 
  //:: TA.Thing -> TA.Thing -> TA.Thing 
  
  //// For each thing in the game...
  //let tick = ((this) (others) (res)
    
    //// Removes past hits
    //let this = TA.Thing.set_hit
    //|this;
    //|List.nil<TA.Game.Hit>;

    //// Resets   
    //let rst = TA.Thing.get_rst(this)
    //let this = 
      //rst<() TA.Thing>
      //| #true#
        //let new_vel = F64.V3.new(F64.0)(F64.0)(F64.0)
        //let new_bst = F64.1
        //let new_box = TA.Game.Hitbox.cbox(F64.mul(F64.parse("3"))(F64.parse("4")))
        //let new_act = F64.0
        //let new_tik = F64.0
        //let new_lit = List.nil<TA.Game.Light>
        //let new_rst = Bool.false 
        //let this = TA.Thing.set_vel(this)(new_vel)
        //let this = TA.Thing.set_bst(this)(new_bst)
        //let this = TA.Thing.set_box(this)(new_box)
        //let this = TA.Thing.set_act(this)(new_act)
        //let this = TA.Thing.set_tik(this)(new_tik)
        //let this = TA.Thing.set_lit(this)(new_lit)
        //let this = TA.Thing.set_rst(this)(new_rst)
        //this;
      //| #false# this;  

    //// Integrates position with walk vector
    //let boost = TA.Thing.speed_multiplier_of(this)
    //let pos   = TA.Thing.get_pos(this)
    //let mov   = TA.Thing.get_mov(this)
    //let pad   = TA.Thing.get_pad(this)
    //let this  = 
      //TA.Thing.set_pos 
      //|this;
      //|F64.V3.add(pos)(F64.V3.scale(F64.mul(mov)(boost))(pad));

    //// Decreases duration of all buffs, removes from list if dur=0
    //let this = TA.Thing.update_buff_dur(this)

    //// Integrates position with knockback
    //let pos = TA.Thing.get_pos(this)
    //let knk = TA.Thing.get_knk(this)
    //let wei = TA.Thing.get_wei(this)
    //let new_pos = F64.V3.add(pos)(knk)
    //let knk_len = F64.V3.len(knk)
    //let new_knk = 
      //F64.gtn(knk_len)(F64.0)<() F64.V3>
      //| #true# 
        //let force = F64.max(F64.sub(knk_len)(wei))(F64.0)
        //F64.V3.scale(force)(F64.V3.norm(knk));
      //| #false# knk;
    //let this = TA.Thing.set_pos(this)(new_pos)
    //let this = TA.Thing.set_knk(this)(new_knk)

    //// Calls the transaction function
    //let fun = TA.Thing.get_fun(this)
    //let this = fun(this)

    //// Calls the interaction function with all other things
    //let this = 
      //List.fold<TA.Thing><TA.Thing>
      //|this;
      //|intr;
      //|others;

    //// Increments tik counter
    //let tik  = TA.Thing.get_tik(this)
    //let this = TA.Thing.set_tik(this)(F64.add(tik)(F64.1))

    //// Spawns children
    //let this_chi = TA.Thing.get_chi(this)
    //let chi_init = ((chi) 
      //TA.Thing.get_fun(chi)(chi)
    //) :: TA.Thing -> TA.Thing
    //let chi_list = 
      //List.map<TA.Thing><TA.Thing>
      //|chi_init;
      //|this_chi;
    //let this = 
      //TA.Thing.set_chi(this)(List.nil<TA.Thing>)

    //// Keeps inside map
    //let this_pos = TA.Thing.get_pos(this)
    //let pos_x = F64.V3.get_z(this_pos)
    //let pos_y = F64.V3.get_y(this_pos)
    //let pos_z = F64.V3.get_z(this_pos)
    //let new_x = F64.min(F64.max(F64.parse("-256"))(pos_x))(F64.parse("256"))
    //let new_y = F64.min(F64.max(F64.parse("-160"))(pos_y))(F64.parse("160"))
    //let new_z = F64.min(F64.max(F64.0)(pos_z))(F64.parse("256"))
    //let this  = TA.Thing.set_pos
    //|this;
    //|F64.V3.new(new_x)(new_y)(new_z);

    //// Bounds HP
    //let dmg = TA.Thing.get_dmg(this)
    //let mhp = TA.Thing.get_mhp(this)
    //let new_dmg = F64.max(F64.0)(F64.min(mhp)(dmg))
    //let this = TA.Thing.set_dmg(this)(new_dmg)

    //// Dies when 0 is 0
    //let sid = TA.Thing.get_sid(this)
    //let dmg = TA.Thing.get_dmg(this)
    //let mhp = TA.Thing.get_mhp(this)
    //let no_hp = Bool.false
      //// Bool.and(F64.gtn(sid)(F64.0))(F64.gte(dmg)(mhp))

    //let die = TA.Thing.get_die(this)
    //let xs = 
      //Bool.or(die)(no_hp)<() List(TA.Thing)>
      //| res;
      //| List.cons<TA.Thing>(this)(res);

    //List.concat<TA.Thing>(chi_list)(xs)

  //) :: TA.Thing -> 
       //List(TA.Thing) ->
       //List(TA.Thing) ->
       //List(TA.Thing)

  //let things_id = 
    //((x) x) :: List(TA.Thing) -> List(TA.Thing)
  //let stage = gm<() List(TA.Thing)> | (stage) stage;
  //let stage_nil = List.nil<TA.Thing>
  //let new_stage = 
    //TA.fold_with_context<TA.Thing><List(TA.Thing)>
    //|stage_nil;
    //|tick;
    //|stage;
    //|things_id;

  //TA.Game.Game.new(new_stage)


  

//// Game's main loop
//// exec_turn(gm: Game) : Game
////   // Interaction function
////   let intr = (that,this) => interact_with(this,that)

////   // For each thing in the game...
////   let tick = (this: Thing, others: List(Thing), res: List(Thing)) =>
////     case this |thing

////     // Removes past hits
////     let this = this <= thing(hit = [])

////     // Resets
////     let this =
////       case this.rst
////       | true  => this <= thing(
////         vel = v3(0,0,0),
////         bst = 1,
////         box = cbox(12),
////         act = 0,
////         tik = 0,
////         lit = nil(_),
////         rst = false)
////       | false => this

////     // Integrates position with dash velocity
////     let this = this <= thing(pos = add_v3(pos,vel))

////     // Integrates position with walk vector
////     let boost = speed_multiplier_of(this)
////     let this = this <= thing(pos = add_v3(pos,scale_v3(mov*boost,pad)))

////     // Decreases duration of all buffs, removes from list if dur=0
////     let this = update_buff_dur(this) 

////     // Integrates position with knockback
////     let this = this <= thing(
////       pos = add_v3(pos, knk),
////       knk = if len_v3(knk) > 0
////         then
////           let force = max(len_v3(knk) - this.wei, 0)
////           scale_v3(force, norm_v3(knk))
////         else knk)

////     // Calls the transaction function
////     let this = this.fun(this)

////     // Calls interaction function with all other things
////     let this = fold(Thing; _ this, intr, others)

////     // Increments tik counter
////     let this = this <= thing(tik = tik + 1)

////     // Spawns children
////     case this |thing
////     let chi_init = (chi) => case chi |thing chi.fun(chi)
////     let chi_list = map(Thing; Thing; chi_init, this.chi)
////     let this = this <= thing(chi = [])

////     // Keeps inside map
////     let this = this <= thing(pos =
////       case pos |v3
////       let x = min(max(-256, pos.x), 256)
////       let y = min(max(-160, pos.y), 160)
////       let z = min(max(   0, pos.z), 256)
////       v3(x, y, z))

////     // Bounds HP
////     let this = this <= thing(dmg = max(0, min(mhp, dmg)))

////     // Dies when 0 is 0
////     let no_hp =
////       false
////       //if (this.sid > 0) && gte(this.dmg, this.mhp)
////       //then true
////       //else false
    
////     // Adds updated thing and new things to stage
////     concat(_ chi_list,
////       case or(this.die, no_hp) as dead
////       |true res
////       |false cons(_ this, res))

////   // Ticks every thing on stage
////   gm <= game(
////     stage = fold_with_context(Thing; _ [], tick, stage, (x)=>x))
//TA.fold_with_context
  //: <A : Type>                  -> 
    //<B : Type>                  ->
    //(i : B)                     ->
    //(f: A -> List(A) -> B -> B) ->
    //(xs : List(A))              -> 
    //(ys : List(A) -> List(A))   ->
    //B 
  //<A> <B> (i) (f) (xs) (ys)
  //xs<() B>
  //| i;
  //| (xs.head) (xs.tail)
    //let ys2 = ((x) ys(List.cons<A>(xs.head)(xs))) :: List(A) -> List(A)
    //let rest = TA.fold_with_context<A><B>(i)(f)(xs.tail)(ys2)
    //f(xs.head)(ys(xs.tail))(rest);


//// Like a fold, but with access to a list of other elements
//// fold_with_context(A; B;
////   i: B,
////   f: A -> List(A) -> B -> B,
////   xs: List(A),
////   ys: List(A) -> List(A)
////   ) : B
////   case xs
////   | nil  => i
////   | cons =>
////     let self = xs.head
////     let tail = xs.tail
////     let ys2  = (x) => ys(cons(_ xs.head, x))
////     let rest = fold_with_context(A; B; i, f, xs.tail, ys2)
////     f(xs.head, ys(xs.tail), rest)

//// Interaction function between two things
//TA.interact_with
  //: (this: TA.Thing) ->
    //(that: TA.Thing) ->
    //TA.Thing
  //(this) (that)
  //// Physical interactions
  //let this.pos = TA.Thing.get_pos(this)
  //let this.dir = TA.Thing.get_dir(this)
  //let this.box = TA.Thing.get_box(this)
  //let this.buf = TA.Thing.get_buf(this)
  //let this.sid = TA.Thing.get_sid(this)
  //let that.pos = TA.Thing.get_pos(that)
  //let that.dir = TA.Thing.get_dir(that)
  //let that.box = TA.Thing.get_box(that)
  //let that.hit = TA.Thing.get_hit(that)
  //let that.sid = TA.Thing.get_sid(this)
  //let out_vec  = 
    //TA.collide_with
    //|this.pos;
    //|this.dir;
    //|this.box;
    //|that.pos;
    //|that.dir;
    //|that.box;
  //let this = 
    //out_vec<() TA.Thing>
    //| this;           // none
    //| (out_vec.value) // some 
      //let new_pos = F64.V3.add(this.pos)(out_vec.value)
      //TA.Thing.set_pos(this)(new_pos);
  //let this = 
  //// Hit by an effect
  //let apply_hit = ((hit) (this)
    //hit<() TA.Thing> | (hit.eff) (hit.pos) (hit.dir) (hit.box)
      //let out_vec = 
        //TA.collide_with
        //|this.pos;
        //|this.dir;
        //|this.box;
        //|hit.pos;
        //|hit.dir;
        //|hit.box;
      //out_vec<() TA.Thing>
      //| this; // none
      //| (out_vec.value) // some
        //let compare_sid = F64.eql(this.sid)(that.sid)
        //let apply_eff = ((eff) (this) 
        //eff<() TA.Thing>
        //| (eff.lif)  //heal
          //let this.dmg = TA.Thing.get_dmg(this)
          //// IMPORTANT: use commented code. 
          //// The code is inverted so the puddle on debug mode could heal 
          //Bool.if<TA.Thing>(compare_sid)
          //| this; // TA.Thing.set_dmg(this)(F64.sub(this.dmg)(eff.lif));
          //| TA.Thing.set_dmg(this)(F64.sub(this.dmg)(eff.lif));;
          //// this;;
        //| (eff.dmg)  //dmg
          //Bool.if<TA.Thing>(compare_sid)
          //| this;
          //| TA.Thing.handle_shields(eff.dmg)(this);;
        //| (eff.mag)  //repulse
          //Bool.if<TA.Thing>(compare_sid)
          //| this;
          //| let v3 = F64.V3.new(F64.1)(F64.0)(F64.0)
            //let dir = F64.V3.look_at(hit.pos)(this.pos)(v3)
            //let vec = F64.V3.scale(eff.mag)(dir)
            //TA.Thing.set_knk(this)(vec);;
        //| (eff.mag) (eff.dir)  //impulse
          //Bool.if<TA.Thing>(compare_sid)
          //| this;
          //| let vec = F64.V3.scale(eff.mag)(eff.dir)
            //TA.Thing.set_knk(this)(vec);;
        //| (eff.dur) (eff.val)  //slow
          //Bool.if<TA.Thing>(compare_sid)
          //| this;
          //| let updated_buffs = 
            //List.cons<TA.Game.Buff> 
            //| TA.Game.Buff.slowed(eff.dur)(eff.val);
            //| this.buf;
            //TA.Thing.set_buf(this)(updated_buffs);;
        //| (eff.dur) (eff.val)  //haste
          //Bool.if<TA.Thing>(compare_sid)
          //| this;
          //| let updated_buffs = 
            //List.cons<TA.Game.Buff> 
            //| TA.Game.Buff.hasted(eff.dur)(eff.val);
            //| this.buf;
            //TA.Thing.set_buf(this)(updated_buffs);;
        //| (eff.dur) (eff.val) //shield
          //Bool.if<TA.Thing>(compare_sid)
          //| this;
          //| let updated_buffs = 
            //List.cons<TA.Game.Buff> 
            //| TA.Game.Buff.shielded(eff.dur)(eff.val);
            //| this.buf;
            //TA.Thing.set_buf(this)(updated_buffs);;
        //| (eff.dur)  //silence
          //Bool.if<TA.Thing>(compare_sid)
          //| this;
          //| let updated_buffs = 
            //List.cons<TA.Game.Buff> 
            //| TA.Game.Buff.silenced(eff.dur);
            //| this.buf;
            //TA.Thing.set_buf(this)(updated_buffs);;
        //| (eff.dur) // root
          //Bool.if<TA.Thing>(compare_sid)
          //| this;
          //| let updated_buffs = 
            //List.cons<TA.Game.Buff> 
            //| TA.Game.Buff.rooted(eff.dur);
            //| this.buf;
            //TA.Thing.set_buf(this)(updated_buffs);;
        //| (eff.dur)  // stun
          //Bool.if<TA.Thing>(compare_sid)
          //| this;
          //| let updated_buffs = 
            //List.cons<TA.Game.Buff> 
            //| TA.Game.Buff.stuned(eff.dur);
            //| this.buf;
            //TA.Thing.set_buf(this)(updated_buffs);;
        //| (eff.to_pos) (eff.all)  // teleport
          //Bool.if<TA.Thing>(F64.eql(eff.all)(F64.1))
          //| TA.Thing.set_pos(this)(eff.to_pos);
          //| this;;
          //// apply_eff return
        //) :: TA.Game.Effect -> TA.Thing -> TA.Thing 
        //// end out_vec case
        //List.fold<TA.Game.Effect><TA.Thing>
        //| this;
        //| apply_eff;
        //| hit.eff;
      //; // end some case in out_vec
    //; // end some case in hit
  //) :: TA.Game.Hit -> TA.Thing -> TA.Thing
  //// apply_hit return
  //List.fold<TA.Game.Hit><TA.Thing>(this)(apply_hit)(that.hit)
  //// ends this
  //this


// Interaction function between two things
// interact_with(this:Thing, that:Thing): Thing
//   // Physical collisions
//   let this =
//     case this |thing
//     case that |thing
//     let out_vec = collide_with(
//       this.pos, this.dir, this.box,
//       that.pos, that.dir, that.box)
//     case out_vec
//     | none => this
//     | some => this <= thing(pos = add_v3(pos,out_vec.value))
//   // Hit by an effect
//   let this =
//     case that |thing
//     let apply_hit = (hit, this) =>
//       case hit |hit
//       case this |thing
//       let out_vec = collide_with(
//         this.pos, this.dir, this.box,
//         hit.pos, hit.dir, hit.box)
//       case out_vec
//       | none => this
//       | some =>
//         let apply_eff = (eff, this) =>
//           case eff
//           | heal =>
//             // IMPORTANT: use commented code. 
//             // I inverted this so the puddle on debug mode could heal 
//             if this.sid === that.sid then
//               this
//               // this <= thing(dmg = dmg - eff.lif)
//             else
//               // this
//               this <= thing(dmg = dmg - eff.lif)
//           | damage =>
//             if this.sid === that.sid then
//               this
//             else
//             // hit shields on thing.buf before hitting hp
//               handle_shields(eff.dmg, this)
//           | repulse =>
//             if this.sid === that.sid then
//               this
//             else
//               let dir = lookat_v3(hit.pos, this.pos, v3(1,0,0))
//               let vec = scale_v3(eff.mag, dir)
//               this <= thing(knk = vec)
//           | impulse =>
//             if this.sid === that.sid then
//               this
//             else
//               let vec = scale_v3(eff.mag, eff.dir)
//               this <= thing(knk = vec)
//           | slow => 
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ slowed(eff.dur, eff.val), this.buf)
//               this <= thing(buf = updated_buffs)
//           | haste =>
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ hasted(eff.dur, eff.val), this.buf)
//               this <= thing(buf = updated_buffs) 
//           | shield =>
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ shielded(eff.dur, eff.val), this.buf)
//               this <= thing(buf = updated_buffs) 
//           | silence => 
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ silenced(eff.dur), this.buf)
//               this <= thing(buf = updated_buffs) 
//           | root =>
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ rooted(eff.dur), this.buf)
//               this <= thing(buf = updated_buffs) 
//           | stun => 
//             if this.sid === that.sid then 
//               this 
//             else 
//               let updated_buffs = cons(_ stuned(eff.dur), this.buf)
//               this <= thing(buf = updated_buffs)
//           | teleport =>
//             if eff.all then
//               this <= thing(pos = eff.to_pos)
//             else 
//               if this.sid === that.sid then
//                 this <= thing(pos = eff.to_pos)
//               else 
//                 this
//         fold(Effect; Thing; this, apply_eff, hit.eff)
//     fold(Hit; Thing; this, apply_hit, that.hit)
//   this
