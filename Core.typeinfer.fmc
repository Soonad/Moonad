Core.typeinfer: Core -> Core.Defs -> Nat -> Either(Text)(Core)
  (term) (defs) (ctx)
  let bnd = Either.bind<Text><Core><Core>
  let err = Either.left<Text><Core>
  let ret = Either.right<Text><Core>
  let Ret = Either(Text)(Core)
  term<() Ret>
  |#var# (term.name) (term.indx) (term.flip)
    ret(Core.var(term.name)(term.indx)(term.flip));
  |#ref# (term.name)
    Core.Defs.get_type(defs)(term.name)<() Ret>
    |#none# err(String.concat("Undefined reference: ")(term.name));
    |#some# (type) ret(type);;
  |#typ#
    ret(Core.typ);
  |#all# (term.eras) (term.self) (term.name) (term.bind) (term.body)
    let self_var = Core.ann(Bool.true)
      | Core.var(term.self)(ctx)(Bool.false);
      | term;
    let name_var = Core.ann(Bool.true)
      | Core.var(term.name)(Nat.succ(ctx))(Bool.false);
      | term.bind;
    let body_ctx = Nat.succ(ctx)
    let body_ctx = Nat.succ(ctx)
    let term_body = term.body(self_var)(name_var)
    use bind_typ = bnd(Core.typecheck(term.bind)(Core.typ)(defs)(ctx))
    use body_typ = bnd(Core.typecheck(term_body)(Core.typ)(defs)(ctx))
    ret(Core.typ);
  |#lam# (term.eras) (term.name) (term.body)
    err("Can't infer type.");
  |#app# (term.eras) (term.func) (term.argm)
    use func_typ = bnd(Core.typeinfer(term.func)(defs)(ctx))
    let func_typ = Core.reduce(func_typ)(defs)
    Core.if_all(func_typ)<() Ret>
    |#none# err("Non-function application.");
    |#some# (got) got<Ret>
      |#new# (func_typ.eras) (func_typ.self) (func_typ.name) (func_typ.bind) (func_typ.body)
        let self_var = Core.ann(Bool.true)(term.func)(func_typ)
        let name_var = Core.ann(Bool.true)(term.argm)(func_typ.bind)
        use bind_typ = bnd(Core.typecheck(term.argm)(func_typ.bind)(defs)(ctx))
        let term_typ = func_typ.body(self_var)(name_var)
        // TODO: check erasure
        ret(term_typ);;;
  |#let# (term.name) (term.expr) (term.body)
    use expr_typ = bnd(Core.typeinfer(term.expr)(defs)(ctx))
    let expr_var = Core.ann(Bool.true)(term.expr)(expr_typ)
    let body_ctx = Nat.succ(ctx)
    use body_typ = bnd(Core.typeinfer(term.body(expr_var))(defs)(body_ctx))
    ret(body_typ);
  |#ann# (term.done) (term.expr) (term.type)
    term.done<() Ret>
    | ret(term.type);
    | Core.typeinfer(term.expr)(defs)(ctx);;
