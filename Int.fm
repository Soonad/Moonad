// An integer is a pair of nats quotiented by `(suc x, suc y) ~ (x, y)`
Int: Type
  int<P: Int -> Type> ->
  (new: (x: Nat) -> (y: Nat) -> P(Int.new(x, y))) ->
  P(int)

Int.new: Nat -> Nat -> Int
  (x) (y)
  <P> (new)
  x<(x) P(Int.new(x, y))>
  | new(Nat.zero, y);
  | (x.pred) y<(y) P(Int.new(Nat.succ(x.pred), y))>
    | new(Nat.succ(x.pred), Nat.zero);
    | (y.pred) Int.new(Nat.sub(x.pred, y.pred), Nat.sub(y.pred, x.pred))<P>(new);;

Int.fromNat: Nat -> Int
  (n) Int.new(n, Nat.0)

// true is negative, false is positive
Int.toNat: Int -> Pair(Bool, Nat)
  (a)
  a<() Pair(Bool, Nat)>
  | (a.x) (a.y)
    a.y<() Pair(Bool, Nat)>
    | Pair.new<Bool, Nat>(Bool.false, a.x);
    | () Pair.new<Bool, Nat>(Bool.true, a.y);;

Int.0: Int
  Int.fromNat(Nat.0)

Int.1: Int
  Int.fromNat(Nat.1)

Int.add: Int -> Int -> Int
  (a) (b)
  a<() Int>
  | (a.x) (a.y)
    b<() Int>
    | (b.x) (b.y)
      Int.new(Nat.add(a.x, b.x), Nat.add(a.y, b.y));;

Int.neg: Int -> Int
  (a) a<() Int>
  | (a.x) (a.y) Int.new(a.y, a.x);

Int.sub: Int -> Int -> Int
  (a) (b) Int.add(a, Int.neg(b))

Int.mul: Int -> Int -> Int
  (a) (b)
  a<() Int>
  | (a.x) (a.y)
    b<() Int>
    | (b.x) (b.y)
      Int.new(Nat.add(Nat.mul(a.x, b.x), Nat.mul(a.y, b.y)), Nat.add(Nat.mul(a.x, b.y), Nat.mul(a.y, b.x)));;

Int.div_Nat: Int -> Nat -> Int
  (a) (n)
  a<() Int>
  | (a.x) (a.y)
    Int.new(Nat.div(a.x, n), Nat.div(a.y, n));

Int.mod_Nat: Int -> Nat -> Nat
  (a) (n)
  a<() Nat>
  | (a.x) (a.y)
    let b = Nat.mod(a.y, n)
    let sum = Nat.add(a.x, Nat.sub(n, b))
    Nat.mod(sum, n);

Int.cmp: Int -> Int -> Cmp
  (a) (b)
  a<() Cmp>
  | (a.x) (a.y)
    b<() Cmp>
    | (b.x) (b.y)
      Nat.cmp(Nat.add(a.x, b.y), Nat.add(b.x, a.y));;

Int.parse_decimal: String -> Int
  (str) str<() Int>
  | Int.0;
  | (str.head) (str.tail)
    U16.eql(str.head, Char.parse("-"))<() Int>
    | Int.new(Nat.0, Nat.parse_decimal(str.tail));
    | Int.new(Nat.parse_decimal(String.cons(str.head, str.tail)), Nat.0);;

Int.parse_hex:
  (str: String) ->
    Int.parse_hex_safe(str)<() Type>
    | Unit;
    | () Int;
  (str)
  Int.parse_hex_safe(str)<
    (m)
    m<() Type>
    | Unit;
    | () Int;
  >
  | Unit.new;
  | (val) val;

Int.parse_hex_safe: String -> Maybe(Int)
  (str) str<() Maybe(Int)>
  | Maybe.none<>;
  | (str.head) (str.tail)
    U16.eql(str.head, Char.parse("-"))<() Maybe(Int)>
    | use b = Maybe.bind<><>(Nat.parse_hex_safe(str.tail))
      Maybe.some<>(Int.new(Nat.0, b));
    | use a = Maybe.bind<><>(Nat.parse_hex_safe(String.cons(str.head, str.tail)))
      Maybe.some<>(Int.new(a, Nat.0));;

Int.to_string_decimal: Int -> String
  (a)
  a<() String>
  | (a.x) (a.y)
    a.y<() String>
    | Nat.to_string_decimal(a.x);
    | () String.cons(Char.parse("-"), Nat.to_string_decimal(a.y));;
