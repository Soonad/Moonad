Core.normalize: Core -> Core.Defs -> Core
  (term) (defs)
  Core.reduce(term)(defs)<() Core>
  | (name) (indx) Core.var(name)(indx);
  | (name) Core.ref(name);
  | Core.typ;
  | (eras) (self) (name) (bind) (body)
    let bind = Core.normalize(bind)(defs)
    let body = ((s) (x) Core.normalize(body(s)(x))(defs)) :: Core -> Core -> Core
    Core.all(eras)(self)(name)(bind)(body);
  | (eras) (name) (body)
    let body = ((x) Core.normalize(body(x))(defs)) :: Core -> Core
    Core.lam(eras)(name)(body);
  | (eras) (func) (argm)
    let func = Core.normalize(func)(defs)
    let argm = Core.normalize(argm)(defs)
    Core.app(eras)(func)(argm);
  | (name) (expr) (body)
    Core.normalize(body(expr))(defs);
  | (done) (expr) (type)
    Core.normalize(expr)(defs);
