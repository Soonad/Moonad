TA.Thing.update_buff_dur: (self: TA.Thing) -> TA.Thing
  (self) let self.buf = TA.Thing.get_buf(self); let fn = ((buff) (acc) buff<() List(TA.Game.Buff)>((buff.dur) (buff.val) Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))(acc)(List.cons<TA.Game.Buff>(TA.Game.Buff.shielded(F64.sub(buff.dur)(F64.1))(buff.val))(acc)))((buff.dur) (buff.val) Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))(acc)(List.cons<TA.Game.Buff>(TA.Game.Buff.slowed(F64.sub(buff.dur)(F64.1))(buff.val))(acc)))((buff.dur) (buff.val) Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))(acc)(List.cons<TA.Game.Buff>(TA.Game.Buff.hasted(F64.sub(buff.dur)(F64.1))(buff.val))(acc)))((buff.dur) Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))(acc)(List.cons<TA.Game.Buff>(TA.Game.Buff.silenced(F64.sub(buff.dur)(F64.1)))(acc)))((buff.dur) Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))(acc)(List.cons<TA.Game.Buff>(TA.Game.Buff.rooted(F64.sub(buff.dur)(F64.1)))(acc)))((buff.dur) Bool.if<List(TA.Game.Buff)>(F64.eql(buff.dur)(F64.0))(acc)(List.cons<TA.Game.Buff>(TA.Game.Buff.stuned(F64.sub(buff.dur)(F64.1)))(acc)))) :: TA.Game.Buff -> List(TA.Game.Buff) -> List(TA.Game.Buff); let new_buf = List.fold<TA.Game.Buff><List(TA.Game.Buff)>([TA.Game.Buff;])(fn)(self.buf); TA.Thing.set_buf(self)(new_buf)

