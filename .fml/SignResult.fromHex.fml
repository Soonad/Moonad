SignResult.fromHex: String -> Maybe(SignResult)
  (str) def bind = Maybe.bind<Pair(String)(String)><SignResult>; def bind2 = Maybe.bind<Nat><SignResult>; bind(String.take_n(Nat.2)(str))((pair) pair<(x) Maybe(SignResult)>((str) (check1) bind(String.take_n(Nat.2)(str))((pair) pair<(x) Maybe(SignResult)>((length) (str) bind2(Nat.parse_hex_safe(length))((length) bind(String.take_n(Nat.2)(str))((pair) pair<(x) Maybe(SignResult)>((check2) (str) Bool.if<Maybe(SignResult)>(Bool.orVar(Nat.3)(String.eql(check1)("30"))(Nat.eql(length)(Nat.sub(String.length(str))(Nat.4)))(String.eql(check2)("02")))(Maybe.none<SignResult>)(bind(String.take_n(Nat.2)(str))((pair) pair<(x) Maybe(SignResult)>((rLen) (str) bind2(Nat.parse_hex_safe(rLen))((rLen) bind(String.take_n(rLen)(str))((pair) pair<(x) Maybe(SignResult)>((r) (str) bind2(Nat.parse_hex_safe(r))((r) bind(String.take_n(Nat.2)(str))((pair) pair<(x) Maybe(SignResult)>((check3) (str) String.eql(check3)("02")<() Maybe(SignResult)>(Maybe.none<SignResult>)(bind(String.take_n(Nat.2)(str))((pair) pair<(x) Maybe(SignResult)>((sLen) (str) bind2(Nat.parse_hex_safe(sLen))((sLen) bind(String.take_n(sLen)(str))((pair) pair<(x) Maybe(SignResult)>((s) (str) bind2(Nat.parse_hex_safe(s))((s) Maybe.some<SignResult>(SignResult.new(r)(s)))))))))))))))))))))))))

