Core.typecomp: Core -> Core -> Core.Defs -> Nat -> Either(String)(Core)
  (term) (type) (defs) (ctx) let bnd = Either.bind<Text><Core><Core>; let err = Either.left<Text><Core>; let ret = Either.right<Text><Core>; let Ret = Either(Text)(Core); bnd(Core.typeinfer(term)(defs)(ctx))((infr) Core.eql(type)(infr)(defs)<() Either(Text)(Core)>(ret(type))(let type_str = Core.stringify(Core.normalize(type)(Core.Defs.new)); let infr_str = Core.stringify(Core.normalize(infr)(Core.Defs.new)); let erro_str = "Type mismatch.\n"; let erro_str = String.concat(erro_str)("Found type... \x1b[2m"); let erro_str = String.concat(erro_str)(infr_str); let erro_str = String.concat(erro_str)("\x1b[0m\n"); let erro_str = String.concat(erro_str)("Instead of... \x1b[2m"); let erro_str = String.concat(erro_str)(type_str); let erro_str = String.concat(erro_str)("\x1b[0m\n"); err(erro_str)))

