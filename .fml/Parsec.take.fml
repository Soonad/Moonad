Parsec.take: <S: Type> -> <E: Type> -> <A: Type> -> String -> Nat -> Parsec(S)(E)(String)
  <S> <E> <A> (err) (n) <X> (s1) (empty_value) (empty_error) (eaten_value) () s1<() X>((input) (index) (error) (state) String.take_n(n)(input)<() X>(empty_error(s1)(Parsec.Error.make_trivial<E>(index)(Maybe.some<Parsec.Error.Item>(Parsec.Error.Item.end_of_input))(List.single<Parsec.Error.Item>(Parsec.Error.Item.label(err)))))((p) p<() X>((took) (rest) let s2 = Parsec.State.make<S><E>(rest)(Nat.add(index)(n))(error)(state); eaten_value(s2)(took))))

