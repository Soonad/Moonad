Nat.show.digit: (n: Nat) -> (base: Nat) -> Char
  (n) (base) let m = Nat.mod(n)(base); Nat.eql(m)(0)<(self.self) Char.parse.type("0")>(Char.parse("0"))(Nat.eql(m)(1)<(self.self) Char.parse.type("1")>(Char.parse("1"))(Nat.eql(m)(2)<(self.self) Char.parse.type("2")>(Char.parse("2"))(Nat.eql(m)(3)<(self.self) Char.parse.type("3")>(Char.parse("3"))(Nat.eql(m)(4)<(self.self) Char.parse.type("4")>(Char.parse("4"))(Nat.eql(m)(5)<(self.self) Char.parse.type("5")>(Char.parse("5"))(Nat.eql(m)(6)<(self.self) Char.parse.type("6")>(Char.parse("6"))(Nat.eql(m)(7)<(self.self) Char.parse.type("7")>(Char.parse("7"))(Nat.eql(m)(8)<(self.self) Char.parse.type("8")>(Char.parse("8"))(Nat.eql(m)(9)<(self.self) Char.parse.type("9")>(Char.parse("9"))(Nat.eql(m)(10)<(self.self) Char.parse.type("a")>(Char.parse("a"))(Nat.eql(m)(11)<(self.self) Char.parse.type("b")>(Char.parse("b"))(Nat.eql(m)(12)<(self.self) Char.parse.type("c")>(Char.parse("c"))(Nat.eql(m)(13)<(self.self) Char.parse.type("d")>(Char.parse("d"))(Nat.eql(m)(14)<(self.self) Char.parse.type("e")>(Char.parse("e"))(Nat.eql(m)(15)<(self.self) Char.parse.type("f")>(Char.parse("f"))(Char.parse("#")))))))))))))))))

