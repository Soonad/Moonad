TA.Thing.end_thing: (self: TA.Thing) -> (tx: TA.Game.TxFunction) -> (after_tiks: F64) -> (stt_key: Bits) -> TA.Thing
  (self) (tx) (after_tiks) (stt_key) let self.stt = TA.Thing.get_stt(self); let current_tik = Map.get<F64>(stt_key)(self.stt); let empty_stt = Map.set<F64>(stt_key)(after_tiks)(self.stt); current_tik<() TA.Thing>(TA.Thing.set_stt(self)(empty_stt))((current_tik.value) Bool.if<TA.Thing>(F64.eql(current_tik.value)(F64.0))(let self.pid = TA.Thing.get_pid(self); let self.pos = TA.Thing.get_pos(self); let self = TA.Thing.set_fun(self)(tx); let self = TA.Thing.set_pid(self)(self.pid); let self = TA.Thing.set_pos(self)(self.pos); let self = TA.Thing.set_stt(self)(empty_stt); self)(let new_stt = Map.set<F64>(stt_key)(Bool.if<F64>(F64.ltn(F64.0)(current_tik.value))(F64.sub(current_tik.value)(F64.1))(F64.0))(self.stt); TA.Thing.set_stt(self)(new_stt)))

