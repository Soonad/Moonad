Core.typecheck: Core -> Core -> Core.Defs -> Nat -> Either(String)(Core)
  (term) (type) (defs) (ctx) def bnd = Either.bind<Text><Core><Core>; def err = Either.left<Text><Core>; def ret = Either.right<Text><Core>; def Ret = Either(Text)(Core); term<() Ret>(() () () Core.typecomp(term)(type)(defs)(ctx))(() Core.typecomp(term)(type)(defs)(ctx))(Core.typecomp(term)(type)(defs)(ctx))(() () () () () Core.typecomp(term)(type)(defs)(ctx))((term.eras) (term.name) (term.body) let typv = Core.reduce(type)(defs); Core.if_all(typv)<() Ret>(err("Non-function application."))((got) got<Ret>((typv.eras) (typv.self) (typv.name) (typv.bind) (typv.body) let self_var = Core.ann(Bool.true)(term)(type); let name_var = Core.ann(Bool.true)(Core.var(term.name)(Nat.succ(ctx))(Bool.false))(typv.bind); let body_typ = typv.body(self_var)(name_var); let body_ctx = Nat.succ(ctx); bnd(Core.typecheck(term.body(name_var))(body_typ)(defs)(body_ctx))((_) ret(type)))))(() () () Core.typecomp(term)(type)(defs)(ctx))((term.name) (term.expr) (term.body) bnd(Core.typeinfer(term.expr)(defs)(ctx))((expr_typ) let expr_var = Core.ann(Bool.true)(term.expr)(expr_typ); let body_ctx = Nat.succ(ctx); Core.typecheck(term.body(expr_var))(type)(defs)(body_ctx)))(() () () Core.typecomp(term)(type)(defs)(ctx))

