ecdsa.invertBatch: (nums: List(Nat)) -> (modulo: Nat) -> List(Nat)
  (nums) (modulo) ecdsa.invertBatch.aux1(nums)(modulo)(1)([Nat;])([Nat;])<(x) List(Nat)>((acc) (p) p<(x) List(Nat)>((scratch) (rest) let acc = ecdsa.invert(acc)(modulo); ecdsa.invertBatch.aux2(rest)(modulo)(acc)(scratch)([Nat;])))

