Core.typeinfer: Core -> Core.Defs -> Nat -> Either(Text)(Core)
  (term) (defs) (ctx) def bnd = Either.bind<Text><Core><Core>; def err = Either.left<Text><Core>; def ret = Either.right<Text><Core>; def Ret = Either(Text)(Core); term<() Ret>((term.name) (term.indx) (term.flip) ret(Core.var(term.name)(term.indx)(term.flip)))((term.name) Core.Defs.get_type(defs)(term.name)<() Ret>(err(String.concat("Undefined reference: ")(term.name)))((type) ret(type)))(ret(Core.typ))((term.eras) (term.self) (term.name) (term.bind) (term.body) let self_var = Core.ann(Bool.true)(Core.var(term.self)(ctx)(Bool.false))(term); let name_var = Core.ann(Bool.true)(Core.var(term.name)(Nat.succ(ctx))(Bool.false))(term.bind); let body_ctx = Nat.succ(ctx); let body_ctx = Nat.succ(ctx); let term_body = term.body(self_var)(name_var); bnd(Core.typecheck(term.bind)(Core.typ)(defs)(ctx))((bind_typ) bnd(Core.typecheck(term_body)(Core.typ)(defs)(ctx))((body_typ) ret(Core.typ))))((term.eras) (term.name) (term.body) err("Can't infer type."))((term.eras) (term.func) (term.argm) bnd(Core.typeinfer(term.func)(defs)(ctx))((func_typ) let func_typ = Core.reduce(func_typ)(defs); Core.if_all(func_typ)<() Ret>(err("Non-function application."))((got) got<Ret>((func_typ.eras) (func_typ.self) (func_typ.name) (func_typ.bind) (func_typ.body) let self_var = Core.ann(Bool.true)(term.func)(func_typ); let name_var = Core.ann(Bool.true)(term.argm)(func_typ.bind); bnd(Core.typecheck(term.argm)(func_typ.bind)(defs)(ctx))((bind_typ) let term_typ = func_typ.body(self_var)(name_var); ret(term_typ))))))((term.name) (term.expr) (term.body) bnd(Core.typeinfer(term.expr)(defs)(ctx))((expr_typ) let expr_var = Core.ann(Bool.true)(term.expr)(expr_typ); let body_ctx = Nat.succ(ctx); bnd(Core.typeinfer(term.body(expr_var))(defs)(body_ctx))((body_typ) ret(body_typ))))((term.done) (term.expr) (term.type) term.done<() Ret>(ret(term.type))(Core.typeinfer(term.expr)(defs)(ctx)))

