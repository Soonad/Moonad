Core.Comp.infer: Core -> Core.Defs -> Nat -> Maybe(Pair(Comp)(Core))
  (term) (defs) (ctx) def Par = Pair(Comp)(Core); def par = Pair.new<Comp><Core>; def bnd = Maybe.bind<Par><Par>; def err = Maybe.none<Par>; def ret = Maybe.some<Par>; def Ret = Maybe(Par); def cmp = Pair.fst<Comp><Core>; def typ = Pair.snd<Comp><Core>; term<() Ret>((term.name) (term.indx) (term.flip) let comp = Comp.var(term.name); let type = Core.var(term.name)(term.indx)(term.flip); ret(par(comp)(type)))((term.name) Core.Defs.get_type(defs)(term.name)<() Ret>(err)((type) let comp = Comp.var(term.name); ret(par(comp)(type))))(let comp = Comp.fal; let type = Core.typ; ret(par(comp)(type)))((term.eras) (term.self) (term.name) (term.bind) (term.body) let comp = Comp.fal; let type = Core.typ; ret(par(comp)(type)))((term.eras) (term.name) (term.body) err)((term.eras) (term.func) (term.argm) bnd(Core.Comp.infer(term.func)(defs)(ctx))((func_res) let func_typ = Core.reduce(typ(func_res))(defs); Core.if_all(func_typ)<() Ret>(err)((got) got<Ret>((func_typ.eras) (func_typ.self) (func_typ.name) (func_typ.bind) (func_typ.body) let self_var = Core.ann(Bool.true)(term.func)(func_typ); let name_var = Core.ann(Bool.true)(term.argm)(func_typ.bind); bnd(Core.Comp.check(term.argm)(func_typ.bind)(defs)(ctx))((argm_res) let term_typ = func_typ.body(self_var)(name_var); let comp = Comp.app(cmp(func_res))(cmp(argm_res)); let type = term_typ; ret(par(comp)(type)))))))((term.name) (term.expr) (term.body) bnd(Core.Comp.infer(term.expr)(defs)(ctx))((expr_res) let expr_var = Core.ann(Bool.true)(term.expr)(typ(expr_res)); bnd(Core.Comp.infer(term.body(expr_var))(defs)(Nat.succ(ctx)))((body_res) let comp = Comp.let(term.name)(cmp(expr_res))(cmp(body_res)); let type = typ(body_res); ret(par(comp)(type)))))((term.done) (term.expr) (term.type) Core.Comp.check(term.expr)(term.type)(defs)(ctx))

