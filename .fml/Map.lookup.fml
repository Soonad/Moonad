Map.lookup: <A: Type> -> (bits: Bits) -> (val: A) -> (map: Map(A)) -> Pair(A)(Map(A))
  <A> (bits) (val) (map) bits<(bits.self) Pair(A)(Map(A))>(map<(map.self) Pair(A)(Map(A))>(let map = Map.tie<A>(Maybe.some<A>(val))(Map.new<A>)(Map.new<A>); Pair.new<A><Map(A)>(val)(map))((map.val) (map.lft) (map.rgt) let value = Maybe.extract<A>(map.val)(val); let map = Map.tie<A>(Maybe.some<A>(value))(map.lft)(map.rgt); Pair.new<A><Map(A)>(value)(map)))((bits.pred) map<(map.self) Pair(A)(Map(A))>(Map.lookup<A>(bits.pred)(val)(Map.new<A>)<(self) Pair(A)(Map(A))>((p.fst) (p.snd) Pair.new<A><Map(A)>(p.fst)(Map.tie<A>(Maybe.none<A>)(p.snd)(Map.new<A>))))((map.val) (map.lft) (map.rgt) Map.lookup<A>(bits.pred)(val)(map.lft)<(self) Pair(A)(Map(A))>((p.fst) (p.snd) Pair.new<A><Map(A)>(p.fst)(Map.tie<A>(map.val)(p.snd)(map.rgt)))))((bits.pred) map<(map.self) Pair(A)(Map(A))>(Map.lookup<A>(bits.pred)(val)(Map.new<A>)<(self) Pair(A)(Map(A))>((p.fst) (p.snd) Pair.new<A><Map(A)>(p.fst)(Map.tie<A>(Maybe.none<A>)(Map.new<A>)(p.snd))))((map.val) (map.lft) (map.rgt) Map.lookup<A>(bits.pred)(val)(map.rgt)<(self) Pair(A)(Map(A))>((p.fst) (p.snd) Pair.new<A><Map(A)>(p.fst)(Map.tie<A>(map.val)(map.lft)(p.snd)))))

