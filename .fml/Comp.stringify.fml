Comp.stringify: (term: Comp) -> String.Builder
  (term) let lit = String.to_builder; let rec = Comp.stringify; term<(term.self) String.Builder>((term.name) lit(term.name))((term.name) (term.body) let lpar = lit("(("); let name = lit(term.name); let rpar = lit(") "); let body = rec(term.body); let lend = lit(")"); (x) lpar(name(rpar(body(lend(x))))))((term.func) (term.argm) let func = rec(term.func); let lpar = lit("("); let argm = rec(term.argm); let rpar = lit(")"); (x) func(lpar(argm(rpar(x)))))((term.name) (term.expr) (term.body) let llet = lit("let "); let name = lit(term.name); let leql = lit(" = "); let expr = rec(term.expr); let spac = lit("; "); let body = rec(term.body); (x) llet(name(leql(expr(spac(body(x)))))))(let lval = lit("true"); (x) lval(x))(let lval = lit("false"); (x) lval(x))

