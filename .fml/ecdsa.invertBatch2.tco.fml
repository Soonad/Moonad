ecdsa.invertBatch2.tco: List(Nat) -> Nat -> Nat -> List(Nat) -> List(Nat) -> List(Nat)
  (nums) (modulo) (acc) (scratch) (inverts) nums<() List(Nat)>(inverts)((nums.head) (nums.tail) scratch<() List(Nat)>(inverts)((scratch.head) (scratch.tail) Bool.if<List(Nat)>(Nat.eql(nums.head)(Nat.0))(let inverts = List.cons<Nat>(Nat.0)(inverts); ecdsa.invertBatch2.tco(nums.tail)(modulo)(acc)(scratch.tail)(inverts))(let inverts = List.cons<Nat>(Nat.mod(Nat.mul(acc)(scratch.head))(modulo))(inverts); let acc = Nat.mod(Nat.mul(acc)(nums.head))(modulo); ecdsa.invertBatch2.tco(nums.tail)(modulo)(acc)(scratch.tail)(inverts))))

