F64.V3.circle_to_circle_hit_dist: (a: F64.Circle) -> (d: F64.V3) -> (b: F64.Circle) -> Maybe(F64)
  (a) (d) (b) a<(self) Maybe(F64)>((a.pos) (a.rad) b<(self) Maybe(F64)>((b.pos) (b.rad) let r = a.rad; let c = F64.Circle.new(b.pos)(F64.add(a.rad)(b.rad)); let l = F64.Line.new(a.pos)(F64.V3.norm(d)); let p = F64.V3.circle_line_intersection(c)(l); p<(p.self) Maybe(F64)>(Maybe.none<F64>)((p.value) p.value<(self) Maybe(F64)>((fst) (snd) let d0 = F64.V3.sqr_dist(a.pos)(fst); let d1 = F64.V3.sqr_dist(a.pos)(snd); let hp = F64.if<F64.V3>(F64.from_bool(F64.ltn(d0)(d1)))(fst)(snd); let dt = F64.V3.dot(d)(F64.V3.sub(hp)(a.pos)); let ds = F64.V3.sqr_dist(hp)(a.pos); let cmp_res = F64.from_bool(F64.gtn(dt)(F64.0)); F64.if<Maybe(F64)>(cmp_res)(Maybe.some<F64>(F64.sqrt(ds)))(Maybe.none<F64>)))))

