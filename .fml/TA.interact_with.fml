TA.interact_with: (this: TA.Thing) -> (that: TA.Thing) -> TA.Thing
  (this) (that) let this.pos = TA.Thing.get_pos(this); let this.dir = TA.Thing.get_dir(this); let this.box = TA.Thing.get_box(this); let this.buf = TA.Thing.get_buf(this); let this.sid = TA.Thing.get_sid(this); let that.pos = TA.Thing.get_pos(that); let that.dir = TA.Thing.get_dir(that); let that.box = TA.Thing.get_box(that); let that.hit = TA.Thing.get_hit(that); let that.sid = TA.Thing.get_sid(this); let out_vec = TA.collide_with(this.pos)(this.dir)(this.box)(that.pos)(that.dir)(that.box); let this = out_vec<() TA.Thing>(this)((out_vec.value) let new_pos = F64.V3.add(this.pos)(out_vec.value); TA.Thing.set_pos(this)(new_pos)); let this = let apply_hit = ((hit) (this) hit<() TA.Thing>((hit.eff) (hit.pos) (hit.dir) (hit.box) let out_vec = TA.collide_with(this.pos)(this.dir)(this.box)(hit.pos)(hit.dir)(hit.box); out_vec<() TA.Thing>(this)((out_vec.value) let compare_sid = F64.eql(this.sid)(that.sid); let apply_eff = ((eff) (this) eff<() TA.Thing>((eff.lif) let this.dmg = TA.Thing.get_dmg(this); Bool.if<TA.Thing>(compare_sid)(this)(TA.Thing.set_dmg(this)(F64.sub(this.dmg)(eff.lif))))((eff.dmg) Bool.if<TA.Thing>(compare_sid)(this)(TA.Thing.handle_shields(eff.dmg)(this)))((eff.mag) Bool.if<TA.Thing>(compare_sid)(this)(let v3 = F64.V3.new(F64.1)(F64.0)(F64.0); let dir = F64.V3.look_at(hit.pos)(this.pos)(v3); let vec = F64.V3.scale(eff.mag)(dir); TA.Thing.set_knk(this)(vec)))((eff.mag) (eff.dir) Bool.if<TA.Thing>(compare_sid)(this)(let vec = F64.V3.scale(eff.mag)(eff.dir); TA.Thing.set_knk(this)(vec)))((eff.dur) (eff.val) Bool.if<TA.Thing>(compare_sid)(this)(let updated_buffs = List.cons<TA.Game.Buff>(TA.Game.Buff.slowed(eff.dur)(eff.val))(this.buf); TA.Thing.set_buf(this)(updated_buffs)))((eff.dur) (eff.val) Bool.if<TA.Thing>(compare_sid)(this)(let updated_buffs = List.cons<TA.Game.Buff>(TA.Game.Buff.hasted(eff.dur)(eff.val))(this.buf); TA.Thing.set_buf(this)(updated_buffs)))((eff.dur) (eff.val) Bool.if<TA.Thing>(compare_sid)(this)(let updated_buffs = List.cons<TA.Game.Buff>(TA.Game.Buff.shielded(eff.dur)(eff.val))(this.buf); TA.Thing.set_buf(this)(updated_buffs)))((eff.dur) Bool.if<TA.Thing>(compare_sid)(this)(let updated_buffs = List.cons<TA.Game.Buff>(TA.Game.Buff.silenced(eff.dur))(this.buf); TA.Thing.set_buf(this)(updated_buffs)))((eff.dur) Bool.if<TA.Thing>(compare_sid)(this)(let updated_buffs = List.cons<TA.Game.Buff>(TA.Game.Buff.rooted(eff.dur))(this.buf); TA.Thing.set_buf(this)(updated_buffs)))((eff.dur) Bool.if<TA.Thing>(compare_sid)(this)(let updated_buffs = List.cons<TA.Game.Buff>(TA.Game.Buff.stuned(eff.dur))(this.buf); TA.Thing.set_buf(this)(updated_buffs)))((eff.to_pos) (eff.all) Bool.if<TA.Thing>(F64.eql(eff.all)(F64.1))(TA.Thing.set_pos(this)(eff.to_pos))(this))) :: TA.Game.Effect -> TA.Thing -> TA.Thing; List.fold<TA.Game.Effect><TA.Thing>(this)(apply_eff)(hit.eff)))) :: TA.Game.Hit -> TA.Thing -> TA.Thing; List.fold<TA.Game.Hit><TA.Thing>(this)(apply_hit)(that.hit); this

