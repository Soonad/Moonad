Vector.reverse.aux: <A: Type> -> <n: Nat> -> <m: Nat> -> (xs: Vector(A)(n)) -> (ys: Vector(A)(m)) -> Vector(A)(Nat.add(n)(m))
  <A> <n> <m> (xs) (ys) xs<(xs.len) (xs.self) Vector(A)(Nat.add(xs.len)(m))>(ys)(<xs.len> (xs.head) (xs.tail) let ys = Vector.ext<A><m>(xs.head)(ys); let eq = Nat.add_x_succ_y(xs.len)(m); let res = Vector.reverse.aux<A><xs.len><Nat.succ(m)>(xs.tail)(ys); Equal.rewrite<Nat><Nat.add(xs.len)(Nat.succ(m))><Nat.add(Nat.succ(xs.len))(m)><(x) Vector(A)(x)>(eq)(res))

