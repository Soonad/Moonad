Jacobian.add: (p: Jacobian) -> (q: Jacobian) -> Jacobian
  (p) (q) p<(self) Jacobian>((p.x) (p.y) (p.z) Bool.or(Nat.eql(p.x)(0))(Nat.eql(p.y)(0))<(self.self) Jacobian>(q)(q<(self) Jacobian>((q.x) (q.y) (q.z) Bool.or(Nat.eql(q.x)(0))(Nat.eql(q.y)(0))<(self.self) Jacobian>(p)(let p.z2 = Nat.square(p.z); let q.z2 = Nat.square(q.z); let U1 = Nat.mul(p.x)(q.z2); let U2 = Nat.mul(q.x)(p.z2); let S1 = Nat.mulVar(3)(p.y)(q.z)(q.z2); let S2 = Nat.mulVar(3)(q.y)(p.z)(p.z2); let H = ecdsa.sub(U2)(U1); let r = ecdsa.sub(S2)(S1); Nat.eql(H)(0)<(self.self) Jacobian>(Nat.eql(r)(0)<(self.self) Jacobian>(Jacobian.double(p))(Jacobian.0))(let HH = ecdsa.mod(Nat.square(H)); let HHH = ecdsa.mod(Nat.mul(H)(HH)); let V = Nat.mul(U1)(HH); let x = ecdsa.sub(ecdsa.sub(Nat.square(r))(HHH))(Nat.mul(2)(V)); let y = ecdsa.sub(Nat.mul(r)(ecdsa.sub(V)(x)))(Nat.mul(S1)(HHH)); let z = ecdsa.mod(Nat.mulVar(3)(p.z)(q.z)(H)); Jacobian.new(x)(y)(z))))))

