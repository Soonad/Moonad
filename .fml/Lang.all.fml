Lang.all: Parser(Core.Ctx -> Core)
  def Bnd = Core.Ctx -> Core; def Ret = Pair(Text)(Bnd); Parser.bind<Text><Bnd>(Lang.nam(Bool.true))((self) Parser.bind<Pair(Bool)(Ret)><Bnd>(Lang.enclose<Ret>(Parser.bind<Text><Ret>(Lang.nam(Bool.true))((n) Parser.then<Unit><Ret>(Lang.space)(Parser.then<Text><Ret>(Lang.symbol(":"))(Parser.bind<Bnd><Ret>(Lang.trm)((t) Parser.pure<Ret>(Pair.new<Text><Bnd>(n)(t))))))))((x) x<() Parser(Bnd)>((eras) (p) p<() Parser(Bnd)>((name) (bind) Parser.then<Unit><Bnd>(Lang.space)(Parser.then<Text><Bnd>(Lang.symbol("->"))(Parser.bind<Bnd><Bnd>(Lang.trm)((body) Parser.pure<Bnd>((ctx) let tbind = bind(ctx); let tbody = ((s) (x) body(Core.Ctx.ext(name)(x)(Core.Ctx.ext(self)(s)(ctx)))) :: Core -> Core -> Core; Core.all(eras)(self)(name)(tbind)(tbody)))))))))

