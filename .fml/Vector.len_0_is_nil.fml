Vector.len_0_is_nil: (vec: Vector(Nat)(Nat.zero)) -> Equal(Vector(Nat)(Nat.zero))(vec)(Vector.nil<Nat>)
  (vec) vec<(len) (vec) (e: Equal(Nat)(len)(Nat.zero)) -> def P0 = ((x) Vector(Nat)(x)) :: Nat -> Type; def P1 = ((x) Vector(Nat)(Nat.zero)) :: Nat -> Type; let x0 = Equal.rewrite<Nat><len><Nat.zero><P0>(e)(vec); let x1 = Equal.rewrite<Nat><len><Nat.zero><P1>(e)(Vector.nil<Nat>); Equal((((x) Vector(Nat)(x)) :: Nat -> Type)(Nat.zero))(x0)(x1)>((e) def P0 = ((x) Vector(Nat)(Nat.zero)) :: Nat -> Type; def x0 = Equal.rewrite<Nat><Nat.zero><Nat.zero><P0>(e)(Vector.nil<Nat>); Equal.to<Vector(Nat)(Nat.zero)><x0>)(<len> (x) (xs) (e) Empty.absurd(Nat.succ_isnt_zero(len)(e))(def P0 = ((x) Vector(Nat)(x)) :: Nat -> Type; def P1 = ((x) Vector(Nat)(Nat.zero)) :: Nat -> Type; let x0 = Equal.rewrite<Nat><Nat.succ(len)><Nat.zero><P0>(e)(Vector.ext<Nat><len>(x)(xs)); let x1 = Equal.rewrite<Nat><Nat.succ(len)><Nat.zero><P1>(e)(Vector.nil<Nat>); Equal((((x) Vector(Nat)(x)) :: Nat -> Type)(Nat.zero))(x0)(x1)))(Equal.to<Nat><Nat.zero>)

