Vector.len_0_is_nil: (vec: Vector(Nat)(Nat.zero)) -> Equal((((x) Vector(Nat)(x)) :: Nat -> Type)(Nat.zero))(vec)(Vector.nil<Nat>)
  (vec) vec<(vec.len) (vec.self) (e: Equal(Nat)(vec.len)(Nat.zero)) -> let x0 = Equal.rewrite<Nat><vec.len><Nat.zero><((x) Vector(Nat)(x)) :: Nat -> Type>(e)(vec.self); let x1 = Equal.rewrite<Nat><vec.len><Nat.zero><((x) Vector(Nat)(Nat.zero)) :: Nat -> Type>(e)(Vector.nil<Nat>); Equal((((x) Vector(Nat)(x)) :: Nat -> Type)(Nat.zero))(x0)(x1)>((e) Equal.to<Vector(Nat)(Nat.zero)><Equal.rewrite<Nat><Nat.zero><Nat.zero><((x) Vector(Nat)(Nat.zero)) :: Nat -> Type>(e)(Vector.nil<Nat>)>)(<vec.len> (vec.x) (vec.xs) (e) Empty.absurd(Nat.succ_isnt_zero(vec.len)(e))(let x0 = Equal.rewrite<Nat><Nat.succ(vec.len)><Nat.zero><((x) Vector(Nat)(x)) :: Nat -> Type>(e)(Vector.ext<Nat><vec.len>(vec.x)(vec.xs)); let x1 = Equal.rewrite<Nat><Nat.succ(vec.len)><Nat.zero><((x) Vector(Nat)(Nat.zero)) :: Nat -> Type>(e)(Vector.nil<Nat>); Equal((((x) Vector(Nat)(x)) :: Nat -> Type)(Nat.zero))(x0)(x1)))(Equal.to<Nat><Nat.zero>)

