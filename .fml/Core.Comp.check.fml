Core.Comp.check: Core -> Core -> Core.Defs -> Nat -> Maybe(Pair(Comp)(Core))
  (term) (type) (defs) (ctx) def Par = Pair(Comp)(Core); def par = Pair.new<Comp><Core>; def bnd = Maybe.bind<Par><Par>; def err = Maybe.none<Par>; def ret = Maybe.some<Par>; def Ret = Maybe(Par); def cmp = Pair.fst<Comp><Core>; def typ = Pair.snd<Comp><Core>; let con = String.concat; term<() Ret>(() () () Core.Comp.check(term)(type)(defs)(ctx))(() Core.Comp.check(term)(type)(defs)(ctx))(Core.Comp.check(term)(type)(defs)(ctx))(() () () () () Core.Comp.check(term)(type)(defs)(ctx))((term.eras) (term.name) (term.body) let typv = Core.reduce(type)(defs); Core.if_all(typv)<() Ret>(err)((got) got<Ret>((typv.eras) (typv.self) (typv.name) (typv.bind) (typv.body) let self_var = Core.ann(Bool.true)(term)(type); let name_var = Core.ann(Bool.true)(Core.var(term.name)(Nat.succ(ctx))(Bool.false))(typv.bind); let body_typ = typv.body(self_var)(name_var); let body_ctx = Nat.succ(ctx); bnd(Core.Comp.check(term.body(name_var))(body_typ)(defs)(body_ctx))((body_res) let comp = Comp.lam(term.name)(cmp(body_res)); ret(par(comp)(type))))))(() () () Core.Comp.check(term)(type)(defs)(ctx))((term.name) (term.expr) (term.body) bnd(Core.Comp.infer(term.expr)(defs)(ctx))((expr_res) let expr_var = Core.ann(Bool.true)(term.expr)(typ(expr_res)); let body_ctx = Nat.succ(ctx); bnd(Core.Comp.check(term.body(expr_var))(type)(defs)(Nat.succ(ctx)))((body_res) let comp = Comp.let(term.name)(cmp(expr_res))(cmp(body_res)); let type = typ(body_res); ret(par(comp)(type)))))(() () () Core.Comp.check(term)(type)(defs)(ctx))

