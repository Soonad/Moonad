TA.exec_turn: TA.Game.Game -> TA.Game.Game
  (gm) let intr = ((that) (this) TA.interact_with(this)(that)) :: TA.Thing -> TA.Thing -> TA.Thing; let tick = ((this) (others) (res) let this = TA.Thing.set_hit(this)([TA.Game.Hit;]); let rst = TA.Thing.get_rst(this); let this = rst<() TA.Thing>(let new_vel = F64.V3.new(F64.0)(F64.0)(F64.0); let new_bst = F64.1; let new_box = TA.Game.Hitbox.cbox(F64.mul(F64.parse("3"))(F64.parse("4"))); let new_act = F64.0; let new_tik = F64.0; let new_lit = [TA.Game.Light;]; let new_rst = Bool.false; let this = TA.Thing.set_vel(this)(new_vel); let this = TA.Thing.set_bst(this)(new_bst); let this = TA.Thing.set_box(this)(new_box); let this = TA.Thing.set_act(this)(new_act); let this = TA.Thing.set_tik(this)(new_tik); let this = TA.Thing.set_lit(this)(new_lit); let this = TA.Thing.set_rst(this)(new_rst); this)(this); let boost = TA.Thing.speed_multiplier_of(this); let pos = TA.Thing.get_pos(this); let mov = TA.Thing.get_mov(this); let pad = TA.Thing.get_pad(this); let this = TA.Thing.set_pos(this)(F64.V3.add(pos)(F64.V3.scale(F64.mul(mov)(boost))(pad))); let this = TA.Thing.update_buff_dur(this); let pos = TA.Thing.get_pos(this); let knk = TA.Thing.get_knk(this); let wei = TA.Thing.get_wei(this); let new_pos = F64.V3.add(pos)(knk); let knk_len = F64.V3.len(knk); let new_knk = F64.gtn(knk_len)(F64.0)<() F64.V3>(let force = F64.max(F64.sub(knk_len)(wei))(F64.0); F64.V3.scale(force)(F64.V3.norm(knk)))(knk); let this = TA.Thing.set_pos(this)(new_pos); let this = TA.Thing.set_knk(this)(new_knk); let fun = TA.Thing.get_fun(this); let this = fun(this); let this = List.fold<TA.Thing><TA.Thing>(this)(intr)(others); let tik = TA.Thing.get_tik(this); let this = TA.Thing.set_tik(this)(F64.add(tik)(F64.1)); let this_chi = TA.Thing.get_chi(this); let chi_init = ((chi) TA.Thing.get_fun(chi)(chi)) :: TA.Thing -> TA.Thing; let chi_list = List.map<TA.Thing><TA.Thing>(chi_init)(this_chi); let this = TA.Thing.set_chi(this)([TA.Thing;]); let this_pos = TA.Thing.get_pos(this); let pos_x = F64.V3.get_z(this_pos); let pos_y = F64.V3.get_y(this_pos); let pos_z = F64.V3.get_z(this_pos); let new_x = F64.min(F64.max(F64.parse("-256"))(pos_x))(F64.parse("256")); let new_y = F64.min(F64.max(F64.parse("-160"))(pos_y))(F64.parse("160")); let new_z = F64.min(F64.max(F64.0)(pos_z))(F64.parse("256")); let this = TA.Thing.set_pos(this)(F64.V3.new(new_x)(new_y)(new_z)); let dmg = TA.Thing.get_dmg(this); let mhp = TA.Thing.get_mhp(this); let new_dmg = F64.max(F64.0)(F64.min(mhp)(dmg)); let this = TA.Thing.set_dmg(this)(new_dmg); let sid = TA.Thing.get_sid(this); let dmg = TA.Thing.get_dmg(this); let mhp = TA.Thing.get_mhp(this); let no_hp = Bool.false; let die = TA.Thing.get_die(this); let xs = Bool.or(die)(no_hp)<() List(TA.Thing)>(res)(List.cons<TA.Thing>(this)(res)); List.concat<TA.Thing>(chi_list)(xs)) :: TA.Thing -> List(TA.Thing) -> List(TA.Thing) -> List(TA.Thing); let things_id = ((x) x) :: List(TA.Thing) -> List(TA.Thing); let stage = gm<() List(TA.Thing)>((stage) stage); let stage_nil = [TA.Thing;]; let new_stage = TA.fold_with_context<TA.Thing><List(TA.Thing)>(stage_nil)(tick)(stage)(things_id); TA.Game.Game.new(new_stage)

