Jacobian.wNAF.aux: (precomputes: List(Jacobian)) -> (p: Jacobian) -> (f: Jacobian) -> (n: Nat) -> (W: Nat) -> (window: Nat) -> (windows: Nat) -> (windowSize: Nat) -> (mask: Nat) -> (maxNumber: Nat) -> Pair(Jacobian)(Jacobian)
  (precomputes) (p) (f) (n) (W) (window) (windows) (windowSize) (mask) (maxNumber) Nat.ltn(window)(windows)<(self.self) Pair(Jacobian)(Jacobian)>(let offset = Nat.mul(window)(windowSize); let wbits = Nat.bitwise_and(n)(mask); let n = Nat.div(n)(maxNumber); Nat.gtn(wbits)(windowSize)<(self.self) Pair(Nat)(Nat)>(Pair.new<Nat><Nat>(Nat.succ(n))(Nat.sub(wbits)(maxNumber)))(Pair.new<Nat><Nat>(n)(wbits))<(x) Pair(Jacobian)(Jacobian)>((n) (wbits) Nat.eql(wbits)(0)<(self.self) Pair(Jacobian)(Jacobian)>(let q = Maybe.extract<Jacobian>(List.at<Jacobian>(precomputes)(offset))(Jacobian.0); let f = Jacobian.add(f)(Bool.if<Jacobian>(Nat.odd(window))(Jacobian.negate(q))(q)); let window = Nat.succ(window); Jacobian.wNAF.aux(precomputes)(p)(f)(n)(W)(window)(windows)(windowSize)(mask)(maxNumber))(let cached = Maybe.extract<Jacobian>(List.at<Jacobian>(precomputes)(Nat.pred(Nat.add(offset)(wbits))))(Jacobian.0); let p = Jacobian.add(p)(cached); let window = Nat.succ(window); Jacobian.wNAF.aux(precomputes)(p)(f)(n)(W)(window)(windows)(windowSize)(mask)(maxNumber))))(Pair.new<Jacobian><Jacobian>(p)(f))

