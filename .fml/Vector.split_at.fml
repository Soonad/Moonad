Vector.split_at: <A: Type> -> <n: Nat> -> Vector(A)(n) -> (m: Nat) -> Pair(Vector(A)(Nat.min(n)(m)))(Vector(A)(Nat.sub(n)(m)))
  <A> <n> (xs) xs<(n) () (m: Nat) -> Pair(Vector(A)(Nat.min(n)(m)))(Vector(A)(Nat.sub(n)(m)))>((m) Pair.new<Vector(A)(Nat.0)><Vector(A)(Nat.0)>(Vector.nil<A>)(Vector.nil<A>))(<n.pred> (head) (tail) (m) m<(m) Pair(Vector(A)(Nat.min(Nat.succ(n.pred))(m)))(Vector(A)(Nat.sub(Nat.succ(n.pred))(m)))>(Pair.new<Vector(A)(Nat.0)><Vector(A)(Nat.succ(n.pred))>(Vector.nil<A>)(Vector.ext<A><n.pred>(head)(tail)))((m.pred) Vector.split_at<A><n.pred>(tail)(m.pred)<(self) Pair(Vector(A)(Nat.succ(Nat.min(n.pred)(m.pred))))(Vector(A)(Nat.sub(n.pred)(m.pred)))>((x) (y) let x = Vector.ext<A><Nat.min(n.pred)(m.pred)>(head)(x); def x_type = Vector(A)(Nat.succ(Nat.min(n.pred)(m.pred))); def y_type = Vector(A)(Nat.sub(n.pred)(m.pred)); Pair.new<x_type><y_type>(x)(y))))

