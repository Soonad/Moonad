Vector.split_at: <A: Type> -> <n: Nat> -> (xs: Vector(A)(n)) -> (m: Nat) -> Pair(Vector(A)(Nat.min(n)(m)))(Vector(A)(Nat.sub(n)(m)))
  <A> <n> (xs) xs<(xs.len) (xs.self) (m: Nat) -> Pair(Vector(A)(Nat.min(xs.len)(m)))(Vector(A)(Nat.sub(xs.len)(m)))>((m) Pair.new<Vector(A)(0)><Vector(A)(0)>(Vector.nil<A>)(Vector.nil<A>))(<xs.len> (xs.head) (xs.tail) (m) m<(m.self) Pair(Vector(A)(Nat.min(Nat.succ(xs.len))(m.self)))(Vector(A)(Nat.sub(Nat.succ(xs.len))(m.self)))>(Pair.new<Vector(A)(Nat.zero)><Vector(A)(Nat.succ(xs.len))>(Vector.nil<A>)(Vector.ext<A><xs.len>(xs.head)(xs.tail)))((m.pred) Vector.split_at<A><xs.len>(xs.tail)(m.pred)<(x) Pair(Vector(A)(Nat.succ(Nat.min(xs.len)(m.pred))))(Vector(A)(Nat.sub(xs.len)(m.pred)))>((x) (y) let x = Vector.ext<A><Nat.min(xs.len)(m.pred)>(xs.head)(x); Pair.new<Vector(A)(Nat.succ(Nat.min(xs.len)(m.pred)))><Vector(A)(Nat.sub(xs.len)(m.pred))>(x)(y))))

