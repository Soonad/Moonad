Parser.take_while1: (lbl: String) -> (f: Char -> Bool) -> Parser(String)
  (lbl) (f) (s1) s1<(self) Parser.Reply(String)>((pos) (str) (errs) String.span(f)(str)<(x) Parser.Reply(String)>((took) (rest) str<(str.self) Parser.Reply(String)>(Parser.Reply.err<String>(Parser.State.make(Nat.add(pos)(String.length(took)))(rest)(errs))(Parser.Error.new(pos)(Maybe.some<Parser.Item>(Parser.Item.eof))(List.pure<Parser.Item>(Parser.Item.label(lbl)))))((str.head) (str.tail) String.length(took)<(len.self) Parser.Reply(String)>(Parser.Reply.err<String>(Parser.State.make(Nat.add(pos)(String.length(took)))(rest)(errs))(Parser.Error.new(pos)(Maybe.some<Parser.Item>(Parser.Item.tokens(String.pure(str.head))))(List.pure<Parser.Item>(Parser.Item.label(lbl)))))((len.pred) Parser.Reply.val<String>(Parser.State.make(Nat.add(pos)(String.length(took)))(rest)(errs))(took)))))

