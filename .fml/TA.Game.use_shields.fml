TA.Game.use_shields: (buff: TA.Game.Buff) -> (acc: Pair(F64)(List(TA.Game.Buff))) -> Pair(F64)(List(TA.Game.Buff))
  (buff) (acc) acc<() Pair(F64)(List(TA.Game.Buff))>((acc.fst) (acc.snd) buff<() Pair(F64)(List(TA.Game.Buff))>((buff.dur) (buff.val) Bool.if<Pair(F64)(List(TA.Game.Buff))>(F64.eql(acc.fst)(F64.0))(acc)(let compare = F64.compare_numbers(acc.fst)(buff.val); compare<() Pair(F64)(List(TA.Game.Buff))>(let remaining_shield_val = F64.sub(buff.val)(acc.fst); let remaining_buf = List.cons<TA.Game.Buff>(TA.Game.Buff.shielded(buff.dur)(remaining_shield_val))(acc.snd); Pair.new<F64><List(TA.Game.Buff)>(F64.0)(remaining_buf))(Pair.new<F64><List(TA.Game.Buff)>(F64.0)(acc.snd))(let remaining_dmg = F64.sub(acc.fst)(buff.val); Pair.new<F64><List(TA.Game.Buff)>(remaining_dmg)(acc.snd))))((buff.dur) (buff.val) Pair.new<F64><List(TA.Game.Buff)>(acc.fst)(List.cons<TA.Game.Buff>(buff)(acc.snd)))((buff.dur) (buff.val) Pair.new<F64><List(TA.Game.Buff)>(acc.fst)(List.cons<TA.Game.Buff>(buff)(acc.snd)))((buff.dur) Pair.new<F64><List(TA.Game.Buff)>(acc.fst)(List.cons<TA.Game.Buff>(buff)(acc.snd)))((buff.dur) Pair.new<F64><List(TA.Game.Buff)>(acc.fst)(List.cons<TA.Game.Buff>(buff)(acc.snd)))((buff.dur) Pair.new<F64><List(TA.Game.Buff)>(acc.fst)(List.cons<TA.Game.Buff>(buff)(acc.snd))))

