Point.to_bytes: (p: Point) -> (compressed: Bool) -> Vector(U8)(Bool.if<Nat>(compressed)(Nat.33)(Nat.65))
  (p) (compressed) p<(self) Vector(U8)(Bool.if<Nat>(compressed)(Nat.33)(Nat.65))>((p.x) (p.y) let x = U8_Vector.from_nat(Nat.32)(p.x); compressed<(b) Vector(U8)(Bool.if<Nat>(b)(Nat.33)(Nat.65))>(let is_odd_byte = U8.from_nat(Bool.if<Nat>(Nat.odd(p.y))(Nat.3)(Nat.2)); Vector.ext<U8><Nat.32>(is_odd_byte)(x))(let uncompressed_byte = U8.from_nat(Nat.4); let y = U8_Vector.from_nat(Nat.32)(p.y); let uncompressed_vec = Vector.concat<U8><Nat.32><Nat.32>(x)(y); Vector.ext<U8><Nat.64>(uncompressed_byte)(uncompressed_vec)))

