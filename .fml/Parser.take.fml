Parser.take: (lbl: String) -> (n: Nat) -> Parser(String)
  (lbl) (n) (s1) s1<(self) Parser.Reply(String)>((pos) (str) (errs) String.split_at(n)(str)<(self) Parser.Reply(String)>((took) (rest) def len = String.length(took); def s2 = Parser.State.make(Nat.add(pos)(len))(rest)(errs); Nat.eql(len)(n)<(self.self) Parser.Reply(String)>(Parser.Reply.val<String>(s2)(took))(def l = List.pure<Parser.Item>(Parser.Item.label(lbl)); def e = Parser.Error.new(Nat.add(pos)(len))(Maybe.some<Parser.Item>(Parser.Item.eof))(l); Parser.Reply.err<String>(s2)(e))))

