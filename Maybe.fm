// The Maybe(A) type can hold a value of type A or nothing.
T Maybe <A: Type>
| none;
| some(value: A);

Maybe.bind<A: Type, B: Type>(m: Maybe(A), f: A -> Maybe(B)): Maybe(B)
  case m:
  | Maybe.none<B>;
  | f(m.value);

Maybe.extract<A: Type>(m: Maybe(A), a: A): A
  case m:
  | a;
  | m.value;

Maybe.join<A: Type>(m: Maybe(Maybe(A))): Maybe(A)
  case m:
  | Maybe.none<A>;
  | m.value;

Maybe.map<A: Type, B: Type>(f: A -> B, m: Maybe(A)): Maybe(B)
  case m:
  | Maybe.none<B>;
  | Maybe.some<B>(f(m.value));
