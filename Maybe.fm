// The Maybe(A) type can hold a value of type A or nothing.
T Maybe <A: Type>
| none;
| some(value: A);

Maybe.bind<A: Type, B: Type>(m: Maybe(A), f: A -> Maybe(B)): Maybe(B)
  case m:
  | Maybe.none<B>;
  | f(m.value);

Maybe.pure<A: Type>(a: A): Maybe(A)
  Maybe.some<A>(a)

// the monad instance for Maybe
Maybe.monad: Monad(Maybe)
  Monad.new<Maybe>(Maybe.bind, Maybe.pure)

Maybe.extract<A: Type>(m: Maybe(A), a: A): A
  case m:
  | a;
  | m.value;

Maybe.join<A: Type>(m: Maybe(Maybe(A))): Maybe(A)
  case m:
  | Maybe.none<A>;
  | m.value;

Maybe.map<A: Type, B: Type>(f: A -> B, m: Maybe(A)): Maybe(B)
  case m:
  | Maybe.none<B>;
  | Maybe.some<B>(f(m.value));

// Maybe functor
// =============
Maybe.functor: Functor(Maybe)
  Functor.new<Maybe>(Maybe.map)

Maybe.functor.verified: VerifiedFunctor(Maybe, Maybe.functor)
  VerifiedFunctor.new<Maybe, Maybe.functor>(Maybe.map.id, Maybe.map.comp)

Maybe.map.id<A: Type>(ma: Maybe(A)): Equal(Maybe(A), Maybe.map<A, A>(Function.id<A>, ma), ma)
  case ma:
  | _;
  | _;
  : Equal(_, Maybe.map<,>(Function.id<>, ma.self), ma.self);

Maybe.map.comp<A: Type, B: Type, C: Type>(ma: Maybe(A), g: (B -> C), h: (A -> B))
  : Equal(Maybe(C),
          Maybe.map<A, C>(Function.comp<A, B, C>(g, h), ma),
          Function.comp<Maybe(A), Maybe(B), Maybe(C)>(Maybe.map<B, C>(g), Maybe.map<A, B>(h))(ma))
  case ma:
  | _;
  | _;
  : Equal(_,
          Maybe.map<,>(Function.comp<,,>(g, h), ma.self),
          Function.comp<,,>(Maybe.map<,>(g), Maybe.map<,>(h))(ma.self));
